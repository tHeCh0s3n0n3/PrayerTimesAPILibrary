//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace PrayerTimesAPILibrary.PrayerAPI
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class Client 
    {
        private string _baseUrl = "https://api.aladhan.com";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public Client(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Current Date
        /// </summary>
        /// <remarks>
        /// Returns the current date for the specified time zone.
        /// </remarks>
        /// <param name="zone">A valid timezone as specified [here](http://php.net/manual/en/timezones.php).</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ApiResponse<CurrentDateSuccess>> V1CurrentDateAsync(string zone)
        {
            return V1CurrentDateAsync(zone, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Current Date
        /// </summary>
        /// <remarks>
        /// Returns the current date for the specified time zone.
        /// </remarks>
        /// <param name="zone">A valid timezone as specified [here](http://php.net/manual/en/timezones.php).</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ApiResponse<CurrentDateSuccess>> V1CurrentDateAsync(string zone, System.Threading.CancellationToken cancellationToken)
        {
            if (zone == null)
                throw new System.ArgumentNullException("zone");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/currentDate?");
            urlBuilder_.Append(System.Uri.EscapeDataString("zone") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zone, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CurrentDateSuccess>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new ApiResponse<CurrentDateSuccess>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Current Time
        /// </summary>
        /// <remarks>
        /// Returns the current time for the specified time zone.
        /// </remarks>
        /// <param name="zone">A valid timezone as specified [here](http://php.net/manual/en/timezones.php).</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ApiResponse<CurrentTimeSuccess>> V1CurrentTimeAsync(string zone)
        {
            return V1CurrentTimeAsync(zone, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Current Time
        /// </summary>
        /// <remarks>
        /// Returns the current time for the specified time zone.
        /// </remarks>
        /// <param name="zone">A valid timezone as specified [here](http://php.net/manual/en/timezones.php).</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ApiResponse<CurrentTimeSuccess>> V1CurrentTimeAsync(string zone, System.Threading.CancellationToken cancellationToken)
        {
            if (zone == null)
                throw new System.ArgumentNullException("zone");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/currentTime?");
            urlBuilder_.Append(System.Uri.EscapeDataString("zone") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zone, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CurrentTimeSuccess>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new ApiResponse<CurrentTimeSuccess>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Current Timestamp
        /// </summary>
        /// <remarks>
        /// Returns the current [unix/epoch](https://en.wikipedia.org/wiki/Unix_time) timestamp for the specified time zone.
        /// </remarks>
        /// <param name="zone">A valid timezone as specified [here](http://php.net/manual/en/timezones.php).</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ApiResponse<CurrentTimestampSuccess>> V1CurrentTimestampAsync(string zone)
        {
            return V1CurrentTimestampAsync(zone, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Current Timestamp
        /// </summary>
        /// <remarks>
        /// Returns the current [unix/epoch](https://en.wikipedia.org/wiki/Unix_time) timestamp for the specified time zone.
        /// </remarks>
        /// <param name="zone">A valid timezone as specified [here](http://php.net/manual/en/timezones.php).</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ApiResponse<CurrentTimestampSuccess>> V1CurrentTimestampAsync(string zone, System.Threading.CancellationToken cancellationToken)
        {
            if (zone == null)
                throw new System.ArgumentNullException("zone");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/currentTimestamp?");
            urlBuilder_.Append(System.Uri.EscapeDataString("zone") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zone, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CurrentTimestampSuccess>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new ApiResponse<CurrentTimestampSuccess>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Prayer Times Methods
        /// </summary>
        /// <remarks>
        /// Returns all the prayer times calculation methods &amp; details supported by Islamic Network API. \
        /// <br/>
        /// <br/>Furthermore, [you can use customize the methods &amp; create your own if needed](https://aladhan.com/calculation-methods).
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ApiResponse<MethodsSuccess>> V1MethodsAsync()
        {
            return V1MethodsAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Prayer Times Methods
        /// </summary>
        /// <remarks>
        /// Returns all the prayer times calculation methods &amp; details supported by Islamic Network API. \
        /// <br/>
        /// <br/>Furthermore, [you can use customize the methods &amp; create your own if needed](https://aladhan.com/calculation-methods).
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ApiResponse<MethodsSuccess>> V1MethodsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/methods");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MethodsSuccess>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new ApiResponse<MethodsSuccess>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Prayer Times Calendar
        /// </summary>
        /// <remarks>
        /// Returns all prayer times for a specific calendar month.
        /// </remarks>
        /// <param name="latitude">The decimal value for the latitude co-ordinate of the location you want the time computed for.</param>
        /// <param name="longitude">The decimal value for the longitude co-ordinate of the location you want the time computed for.</param>
        /// <param name="month">A gregorian calendar month</param>
        /// <param name="year">A gregorian calendar year</param>
        /// <param name="annual">If true, month parameter will be ignored and the calendar for the entire year will be returned</param>
        /// <param name="method">A prayer times calculation method. Methods identify various schools of thought about how to compute the timings. If not specified, it defaults to the closest authority based on the location or co-ordinates specified in the API call. This parameter accepts values from 0-12 and 99, as specified below: &lt;br&gt;&lt;br&gt; Possible values:
        /// <br/>* `0` - Shia Ithna-Ansari
        /// <br/>* `1` - University of Islamic Sciences, Karachi
        /// <br/>* `2` - Islamic Society of North America
        /// <br/>* `3` - Muslim World League
        /// <br/>* `4` - Umm Al-Qura University, Makkah
        /// <br/>* `5` - Egyptian General Authority of Survey
        /// <br/>* `6` - Institute of Geophysics, University of Tehran
        /// <br/>* `7` - Gulf Region
        /// <br/>* `8` - Kuwait
        /// <br/>* `9` - Qatar
        /// <br/>* `10` - Majlis Ugama Islam Singapura, Singapore
        /// <br/>* `11` - Union Organization islamic de France
        /// <br/>* `12` - Diyanet İşleri Başkanlığı, Turkey
        /// <br/>* `13` - Spiritual Administration of Muslims of Russia
        /// <br/>* `14` - Moonsighting Committee Worldwide (also requires shafaq paramteer)
        /// <br/>* `99` - Custom. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods)</param>
        /// <param name="shafaq">Which Shafaq to use if the method is Moonsighting Commitee Worldwide. Acceptable options are 'general', 'ahmer' and 'abyad'</param>
        /// <param name="tune">Comma Separated String of integers to offset timings returned by the API in minutes. The order is `Imsak,Fajr,Sunrise,Dhuhr,Asr,Maghrib,Sunset,Isha,Midnight`. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods) for more details.</param>
        /// <param name="school">Shafi (or the standard way) or Hanafi. &lt;br /&gt;&lt;br /&gt; Possible values:
        /// <br/>* `0` - Shafi
        /// <br/>* `1` - Hanafi</param>
        /// <param name="midnightMode">Determines the method for calculating midnight &lt;br&gt;&lt;br&gt; Possible values:
        /// <br/>* `0` - Standard (Mid Sunset to Sunrise)
        /// <br/>* `1` - Jafari (Mid Sunset to Fajr)</param>
        /// <param name="timezonestring">A valid timezone name as specified on [https://php.net/manual/en/timezones.php](https://php.net/manual/en/timezones.php). &lt;br&gt; *If you do not specify this, we'll calcuate it using the co-ordinates you provide.*</param>
        /// <param name="latitudeAdjustmentMethod">Method for adjusting times at higher latitudes. For example, if you are checking timings in the UK or Sweden. &lt;br&gt;&lt;br&gt; Possible values:
        /// <br/>* `1` - Middle of the Night
        /// <br/>* `2` - One Seventh
        /// <br/>* `3` - Angle Based</param>
        /// <param name="adjustment">Number of days to adjust hijri date(s).</param>
        /// <param name="iso8601">Whether to return the prayer times in the iso8601 format. Example: true will return 2020-07-01T02:56:00+01:00 instead of 02:56</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ApiResponse<Calendar_response>> V1CalendarAsync(double? latitude, double? longitude, double? month, double? year, bool? annual, double? method, Shafaq? shafaq, string? tune, School? school, MidnightMode? midnightMode, string? timezonestring, LatitudeAdjustmentMethod? latitudeAdjustmentMethod, int? adjustment, bool? iso8601)
        {
            return V1CalendarAsync(latitude, longitude, month, year, annual, method, shafaq, tune, school, midnightMode, timezonestring, latitudeAdjustmentMethod, adjustment, iso8601, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Prayer Times Calendar
        /// </summary>
        /// <remarks>
        /// Returns all prayer times for a specific calendar month.
        /// </remarks>
        /// <param name="latitude">The decimal value for the latitude co-ordinate of the location you want the time computed for.</param>
        /// <param name="longitude">The decimal value for the longitude co-ordinate of the location you want the time computed for.</param>
        /// <param name="month">A gregorian calendar month</param>
        /// <param name="year">A gregorian calendar year</param>
        /// <param name="annual">If true, month parameter will be ignored and the calendar for the entire year will be returned</param>
        /// <param name="method">A prayer times calculation method. Methods identify various schools of thought about how to compute the timings. If not specified, it defaults to the closest authority based on the location or co-ordinates specified in the API call. This parameter accepts values from 0-12 and 99, as specified below: &lt;br&gt;&lt;br&gt; Possible values:
        /// <br/>* `0` - Shia Ithna-Ansari
        /// <br/>* `1` - University of Islamic Sciences, Karachi
        /// <br/>* `2` - Islamic Society of North America
        /// <br/>* `3` - Muslim World League
        /// <br/>* `4` - Umm Al-Qura University, Makkah
        /// <br/>* `5` - Egyptian General Authority of Survey
        /// <br/>* `6` - Institute of Geophysics, University of Tehran
        /// <br/>* `7` - Gulf Region
        /// <br/>* `8` - Kuwait
        /// <br/>* `9` - Qatar
        /// <br/>* `10` - Majlis Ugama Islam Singapura, Singapore
        /// <br/>* `11` - Union Organization islamic de France
        /// <br/>* `12` - Diyanet İşleri Başkanlığı, Turkey
        /// <br/>* `13` - Spiritual Administration of Muslims of Russia
        /// <br/>* `14` - Moonsighting Committee Worldwide (also requires shafaq paramteer)
        /// <br/>* `99` - Custom. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods)</param>
        /// <param name="shafaq">Which Shafaq to use if the method is Moonsighting Commitee Worldwide. Acceptable options are 'general', 'ahmer' and 'abyad'</param>
        /// <param name="tune">Comma Separated String of integers to offset timings returned by the API in minutes. The order is `Imsak,Fajr,Sunrise,Dhuhr,Asr,Maghrib,Sunset,Isha,Midnight`. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods) for more details.</param>
        /// <param name="school">Shafi (or the standard way) or Hanafi. &lt;br /&gt;&lt;br /&gt; Possible values:
        /// <br/>* `0` - Shafi
        /// <br/>* `1` - Hanafi</param>
        /// <param name="midnightMode">Determines the method for calculating midnight &lt;br&gt;&lt;br&gt; Possible values:
        /// <br/>* `0` - Standard (Mid Sunset to Sunrise)
        /// <br/>* `1` - Jafari (Mid Sunset to Fajr)</param>
        /// <param name="timezonestring">A valid timezone name as specified on [https://php.net/manual/en/timezones.php](https://php.net/manual/en/timezones.php). &lt;br&gt; *If you do not specify this, we'll calcuate it using the co-ordinates you provide.*</param>
        /// <param name="latitudeAdjustmentMethod">Method for adjusting times at higher latitudes. For example, if you are checking timings in the UK or Sweden. &lt;br&gt;&lt;br&gt; Possible values:
        /// <br/>* `1` - Middle of the Night
        /// <br/>* `2` - One Seventh
        /// <br/>* `3` - Angle Based</param>
        /// <param name="adjustment">Number of days to adjust hijri date(s).</param>
        /// <param name="iso8601">Whether to return the prayer times in the iso8601 format. Example: true will return 2020-07-01T02:56:00+01:00 instead of 02:56</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ApiResponse<Calendar_response>> V1CalendarAsync(double? latitude, double? longitude, double? month, double? year, bool? annual, double? method, Shafaq? shafaq, string? tune, School? school, MidnightMode? midnightMode, string? timezonestring, LatitudeAdjustmentMethod? latitudeAdjustmentMethod, int? adjustment, bool? iso8601, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/calendar?");
            if (latitude != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("latitude") + "=").Append(System.Uri.EscapeDataString(ConvertToString(latitude, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (longitude != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("longitude") + "=").Append(System.Uri.EscapeDataString(ConvertToString(longitude, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (month != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("month") + "=").Append(System.Uri.EscapeDataString(ConvertToString(month, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (year != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("year") + "=").Append(System.Uri.EscapeDataString(ConvertToString(year, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (annual != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("annual") + "=").Append(System.Uri.EscapeDataString(ConvertToString(annual, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (method != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("method") + "=").Append(System.Uri.EscapeDataString(ConvertToString(method, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (shafaq != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("shafaq") + "=").Append(System.Uri.EscapeDataString(ConvertToString(shafaq, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (tune != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tune") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tune, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (school != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("school") + "=").Append(System.Uri.EscapeDataString(ConvertToString(school, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (midnightMode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("midnightMode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(midnightMode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (timezonestring != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timezonestring") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timezonestring, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (latitudeAdjustmentMethod != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("latitudeAdjustmentMethod") + "=").Append(System.Uri.EscapeDataString(ConvertToString(latitudeAdjustmentMethod, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (adjustment != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("adjustment") + "=").Append(System.Uri.EscapeDataString(ConvertToString(adjustment, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (iso8601 != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("iso8601") + "=").Append(System.Uri.EscapeDataString(ConvertToString(iso8601, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Calendar_response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new ApiResponse<Calendar_response>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Prayer Times Calendar by address
        /// </summary>
        /// <remarks>
        /// Returns all prayer times for a specific calendar month at a particular address.
        /// </remarks>
        /// <param name="address">An address string</param>
        /// <param name="month">A gregorian calendar month</param>
        /// <param name="year">A gregorian calendar year</param>
        /// <param name="annual">If true, month parameter will be ignored and the calendar for the entire year will be returned</param>
        /// <param name="method">A prayer times calculation method. Methods identify various schools of thought about how to compute the timings. If not specified, it defaults to the closest authority based on the location or co-ordinates specified in the API call. This parameter accepts values from 0-12 and 99, as specified below: &lt;br&gt;&lt;br&gt; Possible values:
        /// <br/>* `0` - Shia Ithna-Ansari
        /// <br/>* `1` - University of Islamic Sciences, Karachi
        /// <br/>* `2` - Islamic Society of North America
        /// <br/>* `3` - Muslim World League
        /// <br/>* `4` - Umm Al-Qura University, Makkah
        /// <br/>* `5` - Egyptian General Authority of Survey
        /// <br/>* `6` - Institute of Geophysics, University of Tehran
        /// <br/>* `7` - Gulf Region
        /// <br/>* `8` - Kuwait
        /// <br/>* `9` - Qatar
        /// <br/>* `10` - Majlis Ugama Islam Singapura, Singapore
        /// <br/>* `11` - Union Organization islamic de France
        /// <br/>* `12` - Diyanet İşleri Başkanlığı, Turkey
        /// <br/>* `13` - Spiritual Administration of Muslims of Russia
        /// <br/>* `14` - Moonsighting Committee Worldwide (also requires shafaq paramteer)
        /// <br/>* `99` - Custom. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods)</param>
        /// <param name="shafaq">Which Shafaq to use if the method is Moonsighting Commitee Worldwide. Acceptable options are 'general', 'ahmer' and 'abyad'</param>
        /// <param name="tune">Comma Separated String of integers to offset timings returned by the API in minutes. The order is `Imsak,Fajr,Sunrise,Dhuhr,Asr,Maghrib,Sunset,Isha,Midnight`. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods) for more details.</param>
        /// <param name="school">Shafi (or the standard way) or Hanafi. &lt;br /&gt;&lt;br /&gt; Possible values:
        /// <br/>* `0` - Shafi
        /// <br/>* `1` - Hanafi</param>
        /// <param name="midnightMode">Determines the method for calculating midnight &lt;br&gt;&lt;br&gt; Possible values:
        /// <br/>* `0` - Standard (Mid Sunset to Sunrise)
        /// <br/>* `1` - Jafari (Mid Sunset to Fajr)</param>
        /// <param name="latitudeAdjustmentMethod">Method for adjusting times at higher latitudes. For example, if you are checking timings in the UK or Sweden. &lt;br&gt;&lt;br&gt; Possible values:
        /// <br/>* `1` - Middle of the Night
        /// <br/>* `2` - One Seventh
        /// <br/>* `3` - Angle Based</param>
        /// <param name="adjustment">Number of days to adjust hijri date(s).</param>
        /// <param name="iso8601">Whether to return the prayer times in the iso8601 format. Example: true will return 2020-07-01T02:56:00+01:00 instead of 02:56</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ApiResponse<Calendar_response>> V1CalendarByAddressAsync(string? address, double? month, double? year, bool? annual, double? method, Shafaq2? shafaq, string? tune, School2? school, MidnightMode2? midnightMode, LatitudeAdjustmentMethod2? latitudeAdjustmentMethod, int? adjustment, bool? iso8601)
        {
            return V1CalendarByAddressAsync(address, month, year, annual, method, shafaq, tune, school, midnightMode, latitudeAdjustmentMethod, adjustment, iso8601, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Prayer Times Calendar by address
        /// </summary>
        /// <remarks>
        /// Returns all prayer times for a specific calendar month at a particular address.
        /// </remarks>
        /// <param name="address">An address string</param>
        /// <param name="month">A gregorian calendar month</param>
        /// <param name="year">A gregorian calendar year</param>
        /// <param name="annual">If true, month parameter will be ignored and the calendar for the entire year will be returned</param>
        /// <param name="method">A prayer times calculation method. Methods identify various schools of thought about how to compute the timings. If not specified, it defaults to the closest authority based on the location or co-ordinates specified in the API call. This parameter accepts values from 0-12 and 99, as specified below: &lt;br&gt;&lt;br&gt; Possible values:
        /// <br/>* `0` - Shia Ithna-Ansari
        /// <br/>* `1` - University of Islamic Sciences, Karachi
        /// <br/>* `2` - Islamic Society of North America
        /// <br/>* `3` - Muslim World League
        /// <br/>* `4` - Umm Al-Qura University, Makkah
        /// <br/>* `5` - Egyptian General Authority of Survey
        /// <br/>* `6` - Institute of Geophysics, University of Tehran
        /// <br/>* `7` - Gulf Region
        /// <br/>* `8` - Kuwait
        /// <br/>* `9` - Qatar
        /// <br/>* `10` - Majlis Ugama Islam Singapura, Singapore
        /// <br/>* `11` - Union Organization islamic de France
        /// <br/>* `12` - Diyanet İşleri Başkanlığı, Turkey
        /// <br/>* `13` - Spiritual Administration of Muslims of Russia
        /// <br/>* `14` - Moonsighting Committee Worldwide (also requires shafaq paramteer)
        /// <br/>* `99` - Custom. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods)</param>
        /// <param name="shafaq">Which Shafaq to use if the method is Moonsighting Commitee Worldwide. Acceptable options are 'general', 'ahmer' and 'abyad'</param>
        /// <param name="tune">Comma Separated String of integers to offset timings returned by the API in minutes. The order is `Imsak,Fajr,Sunrise,Dhuhr,Asr,Maghrib,Sunset,Isha,Midnight`. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods) for more details.</param>
        /// <param name="school">Shafi (or the standard way) or Hanafi. &lt;br /&gt;&lt;br /&gt; Possible values:
        /// <br/>* `0` - Shafi
        /// <br/>* `1` - Hanafi</param>
        /// <param name="midnightMode">Determines the method for calculating midnight &lt;br&gt;&lt;br&gt; Possible values:
        /// <br/>* `0` - Standard (Mid Sunset to Sunrise)
        /// <br/>* `1` - Jafari (Mid Sunset to Fajr)</param>
        /// <param name="latitudeAdjustmentMethod">Method for adjusting times at higher latitudes. For example, if you are checking timings in the UK or Sweden. &lt;br&gt;&lt;br&gt; Possible values:
        /// <br/>* `1` - Middle of the Night
        /// <br/>* `2` - One Seventh
        /// <br/>* `3` - Angle Based</param>
        /// <param name="adjustment">Number of days to adjust hijri date(s).</param>
        /// <param name="iso8601">Whether to return the prayer times in the iso8601 format. Example: true will return 2020-07-01T02:56:00+01:00 instead of 02:56</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ApiResponse<Calendar_response>> V1CalendarByAddressAsync(string? address, double? month, double? year, bool? annual, double? method, Shafaq2? shafaq, string? tune, School2? school, MidnightMode2? midnightMode, LatitudeAdjustmentMethod2? latitudeAdjustmentMethod, int? adjustment, bool? iso8601, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/calendarByAddress?");
            if (address != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("address") + "=").Append(System.Uri.EscapeDataString(ConvertToString(address, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (month != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("month") + "=").Append(System.Uri.EscapeDataString(ConvertToString(month, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (year != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("year") + "=").Append(System.Uri.EscapeDataString(ConvertToString(year, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (annual != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("annual") + "=").Append(System.Uri.EscapeDataString(ConvertToString(annual, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (method != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("method") + "=").Append(System.Uri.EscapeDataString(ConvertToString(method, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (shafaq != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("shafaq") + "=").Append(System.Uri.EscapeDataString(ConvertToString(shafaq, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (tune != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tune") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tune, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (school != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("school") + "=").Append(System.Uri.EscapeDataString(ConvertToString(school, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (midnightMode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("midnightMode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(midnightMode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (latitudeAdjustmentMethod != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("latitudeAdjustmentMethod") + "=").Append(System.Uri.EscapeDataString(ConvertToString(latitudeAdjustmentMethod, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (adjustment != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("adjustment") + "=").Append(System.Uri.EscapeDataString(ConvertToString(adjustment, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (iso8601 != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("iso8601") + "=").Append(System.Uri.EscapeDataString(ConvertToString(iso8601, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Calendar_response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new ApiResponse<Calendar_response>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Prayer Times Calendar by city
        /// </summary>
        /// <remarks>
        /// Returns all prayer times for a specific calendar month by City.
        /// </remarks>
        /// <param name="city">A city name</param>
        /// <param name="country">A country name or 2 character alpha ISO 3166 code</param>
        /// <param name="month">A gregorian calendar month</param>
        /// <param name="year">A gregorian calendar year</param>
        /// <param name="annual">If true, month parameter will be ignored and the calendar for the entire year will be returned</param>
        /// <param name="method">A prayer times calculation method. Methods identify various schools of thought about how to compute the timings. If not specified, it defaults to the closest authority based on the location or co-ordinates specified in the API call. This parameter accepts values from 0-12 and 99, as specified below: &lt;br&gt;&lt;br&gt; Possible values:
        /// <br/>* `0` - Shia Ithna-Ansari
        /// <br/>* `1` - University of Islamic Sciences, Karachi
        /// <br/>* `2` - Islamic Society of North America
        /// <br/>* `3` - Muslim World League
        /// <br/>* `4` - Umm Al-Qura University, Makkah
        /// <br/>* `5` - Egyptian General Authority of Survey
        /// <br/>* `6` - Institute of Geophysics, University of Tehran
        /// <br/>* `7` - Gulf Region
        /// <br/>* `8` - Kuwait
        /// <br/>* `9` - Qatar
        /// <br/>* `10` - Majlis Ugama Islam Singapura, Singapore
        /// <br/>* `11` - Union Organization islamic de France
        /// <br/>* `12` - Diyanet İşleri Başkanlığı, Turkey
        /// <br/>* `13` - Spiritual Administration of Muslims of Russia
        /// <br/>* `14` - Moonsighting Committee Worldwide (also requires shafaq paramteer)
        /// <br/>* `99` - Custom. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods)</param>
        /// <param name="shafaq">Which Shafaq to use if the method is Moonsighting Commitee Worldwide. Acceptable options are 'general', 'ahmer' and 'abyad'</param>
        /// <param name="tune">Comma Separated String of integers to offset timings returned by the API in minutes. The order is `Imsak,Fajr,Sunrise,Dhuhr,Asr,Maghrib,Sunset,Isha,Midnight`. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods) for more details.</param>
        /// <param name="school">Shafi (or the standard way) or Hanafi. &lt;br /&gt;&lt;br /&gt; Possible values:
        /// <br/>* `0` - Shafi
        /// <br/>* `1` - Hanafi</param>
        /// <param name="midnightMode">Determines the method for calculating midnight &lt;br&gt;&lt;br&gt; Possible values:
        /// <br/>* `0` - Standard (Mid Sunset to Sunrise)
        /// <br/>* `1` - Jafari (Mid Sunset to Fajr)</param>
        /// <param name="latitudeAdjustmentMethod">Method for adjusting times at higher latitudes. For example, if you are checking timings in the UK or Sweden. &lt;br&gt;&lt;br&gt; Possible values:
        /// <br/>* `1` - Middle of the Night
        /// <br/>* `2` - One Seventh
        /// <br/>* `3` - Angle Based</param>
        /// <param name="adjustment">Number of days to adjust hijri date(s).</param>
        /// <param name="iso8601">Whether to return the prayer times in the iso8601 format. Example: true will return 2020-07-01T02:56:00+01:00 instead of 02:56</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ApiResponse<Calendar_response>> V1CalendarByCityAsync(string? city, string? country, double? month, double? year, bool? annual, double? method, Shafaq3? shafaq, string? tune, School3? school, MidnightMode3? midnightMode, LatitudeAdjustmentMethod3? latitudeAdjustmentMethod, int? adjustment, bool? iso8601)
        {
            return V1CalendarByCityAsync(city, country, month, year, annual, method, shafaq, tune, school, midnightMode, latitudeAdjustmentMethod, adjustment, iso8601, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Prayer Times Calendar by city
        /// </summary>
        /// <remarks>
        /// Returns all prayer times for a specific calendar month by City.
        /// </remarks>
        /// <param name="city">A city name</param>
        /// <param name="country">A country name or 2 character alpha ISO 3166 code</param>
        /// <param name="month">A gregorian calendar month</param>
        /// <param name="year">A gregorian calendar year</param>
        /// <param name="annual">If true, month parameter will be ignored and the calendar for the entire year will be returned</param>
        /// <param name="method">A prayer times calculation method. Methods identify various schools of thought about how to compute the timings. If not specified, it defaults to the closest authority based on the location or co-ordinates specified in the API call. This parameter accepts values from 0-12 and 99, as specified below: &lt;br&gt;&lt;br&gt; Possible values:
        /// <br/>* `0` - Shia Ithna-Ansari
        /// <br/>* `1` - University of Islamic Sciences, Karachi
        /// <br/>* `2` - Islamic Society of North America
        /// <br/>* `3` - Muslim World League
        /// <br/>* `4` - Umm Al-Qura University, Makkah
        /// <br/>* `5` - Egyptian General Authority of Survey
        /// <br/>* `6` - Institute of Geophysics, University of Tehran
        /// <br/>* `7` - Gulf Region
        /// <br/>* `8` - Kuwait
        /// <br/>* `9` - Qatar
        /// <br/>* `10` - Majlis Ugama Islam Singapura, Singapore
        /// <br/>* `11` - Union Organization islamic de France
        /// <br/>* `12` - Diyanet İşleri Başkanlığı, Turkey
        /// <br/>* `13` - Spiritual Administration of Muslims of Russia
        /// <br/>* `14` - Moonsighting Committee Worldwide (also requires shafaq paramteer)
        /// <br/>* `99` - Custom. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods)</param>
        /// <param name="shafaq">Which Shafaq to use if the method is Moonsighting Commitee Worldwide. Acceptable options are 'general', 'ahmer' and 'abyad'</param>
        /// <param name="tune">Comma Separated String of integers to offset timings returned by the API in minutes. The order is `Imsak,Fajr,Sunrise,Dhuhr,Asr,Maghrib,Sunset,Isha,Midnight`. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods) for more details.</param>
        /// <param name="school">Shafi (or the standard way) or Hanafi. &lt;br /&gt;&lt;br /&gt; Possible values:
        /// <br/>* `0` - Shafi
        /// <br/>* `1` - Hanafi</param>
        /// <param name="midnightMode">Determines the method for calculating midnight &lt;br&gt;&lt;br&gt; Possible values:
        /// <br/>* `0` - Standard (Mid Sunset to Sunrise)
        /// <br/>* `1` - Jafari (Mid Sunset to Fajr)</param>
        /// <param name="latitudeAdjustmentMethod">Method for adjusting times at higher latitudes. For example, if you are checking timings in the UK or Sweden. &lt;br&gt;&lt;br&gt; Possible values:
        /// <br/>* `1` - Middle of the Night
        /// <br/>* `2` - One Seventh
        /// <br/>* `3` - Angle Based</param>
        /// <param name="adjustment">Number of days to adjust hijri date(s).</param>
        /// <param name="iso8601">Whether to return the prayer times in the iso8601 format. Example: true will return 2020-07-01T02:56:00+01:00 instead of 02:56</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ApiResponse<Calendar_response>> V1CalendarByCityAsync(string? city, string? country, double? month, double? year, bool? annual, double? method, Shafaq3? shafaq, string? tune, School3? school, MidnightMode3? midnightMode, LatitudeAdjustmentMethod3? latitudeAdjustmentMethod, int? adjustment, bool? iso8601, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/calendarByCity?");
            if (city != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("city") + "=").Append(System.Uri.EscapeDataString(ConvertToString(city, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (country != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("country") + "=").Append(System.Uri.EscapeDataString(ConvertToString(country, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (month != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("month") + "=").Append(System.Uri.EscapeDataString(ConvertToString(month, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (year != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("year") + "=").Append(System.Uri.EscapeDataString(ConvertToString(year, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (annual != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("annual") + "=").Append(System.Uri.EscapeDataString(ConvertToString(annual, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (method != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("method") + "=").Append(System.Uri.EscapeDataString(ConvertToString(method, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (shafaq != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("shafaq") + "=").Append(System.Uri.EscapeDataString(ConvertToString(shafaq, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (tune != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tune") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tune, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (school != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("school") + "=").Append(System.Uri.EscapeDataString(ConvertToString(school, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (midnightMode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("midnightMode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(midnightMode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (latitudeAdjustmentMethod != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("latitudeAdjustmentMethod") + "=").Append(System.Uri.EscapeDataString(ConvertToString(latitudeAdjustmentMethod, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (adjustment != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("adjustment") + "=").Append(System.Uri.EscapeDataString(ConvertToString(adjustment, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (iso8601 != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("iso8601") + "=").Append(System.Uri.EscapeDataString(ConvertToString(iso8601, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Calendar_response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new ApiResponse<Calendar_response>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Prayer Times Calendar
        /// </summary>
        /// <remarks>
        /// Returns all prayer times for a specific calendar month.
        /// </remarks>
        /// <param name="latitude">The decimal value for the latitude co-ordinate of the location you want the time computed for.</param>
        /// <param name="longitude">The decimal value for the longitude co-ordinate of the location you want the time computed for.</param>
        /// <param name="month">A hijri calendar month</param>
        /// <param name="year">A gregorian calendar year</param>
        /// <param name="annual">If true, month parameter will be ignored and the calendar for the entire year will be returned</param>
        /// <param name="method">A prayer times calculation method. Methods identify various schools of thought about how to compute the timings. If not specified, it defaults to the closest authority based on the location or co-ordinates specified in the API call. This parameter accepts values from 0-12 and 99, as specified below: &lt;br&gt;&lt;br&gt; Possible values:
        /// <br/>* `0` - Shia Ithna-Ansari
        /// <br/>* `1` - University of Islamic Sciences, Karachi
        /// <br/>* `2` - Islamic Society of North America
        /// <br/>* `3` - Muslim World League
        /// <br/>* `4` - Umm Al-Qura University, Makkah
        /// <br/>* `5` - Egyptian General Authority of Survey
        /// <br/>* `6` - Institute of Geophysics, University of Tehran
        /// <br/>* `7` - Gulf Region
        /// <br/>* `8` - Kuwait
        /// <br/>* `9` - Qatar
        /// <br/>* `10` - Majlis Ugama Islam Singapura, Singapore
        /// <br/>* `11` - Union Organization islamic de France
        /// <br/>* `12` - Diyanet İşleri Başkanlığı, Turkey
        /// <br/>* `13` - Spiritual Administration of Muslims of Russia
        /// <br/>* `14` - Moonsighting Committee Worldwide (also requires shafaq paramteer)
        /// <br/>* `99` - Custom. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods)</param>
        /// <param name="shafaq">Which Shafaq to use if the method is Moonsighting Commitee Worldwide. Acceptable options are 'general', 'ahmer' and 'abyad'</param>
        /// <param name="tune">Comma Separated String of integers to offset timings returned by the API in minutes. The order is `Imsak,Fajr,Sunrise,Dhuhr,Asr,Maghrib,Sunset,Isha,Midnight`. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods) for more details.</param>
        /// <param name="school">Shafi (or the standard way) or Hanafi. &lt;br /&gt;&lt;br /&gt; Possible values:
        /// <br/>* `0` - Shafi
        /// <br/>* `1` - Hanafi</param>
        /// <param name="midnightMode">Determines the method for calculating midnight &lt;br&gt;&lt;br&gt; Possible values:
        /// <br/>* `0` - Standard (Mid Sunset to Sunrise)
        /// <br/>* `1` - Jafari (Mid Sunset to Fajr)</param>
        /// <param name="timezonestring">A valid timezone name as specified on [https://php.net/manual/en/timezones.php](https://php.net/manual/en/timezones.php). &lt;br&gt; *If you do not specify this, we'll calcuate it using the co-ordinates you provide.*</param>
        /// <param name="latitudeAdjustmentMethod">Method for adjusting times at higher latitudes. For example, if you are checking timings in the UK or Sweden. &lt;br&gt;&lt;br&gt; Possible values:
        /// <br/>* `1` - Middle of the Night
        /// <br/>* `2` - One Seventh
        /// <br/>* `3` - Angle Based</param>
        /// <param name="adjustment">Number of days to adjust hijri date(s).</param>
        /// <param name="iso8601">Whether to return the prayer times in the iso8601 format. Example: true will return 2020-07-01T02:56:00+01:00 instead of 02:56</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ApiResponse<Calendar_response>> V1HijriCalendarAsync(double? latitude, double? longitude, double? month, double? year, bool? annual, double? method, Shafaq4? shafaq, string? tune, School4? school, MidnightMode4? midnightMode, string? timezonestring, LatitudeAdjustmentMethod4? latitudeAdjustmentMethod, int? adjustment, bool? iso8601)
        {
            return V1HijriCalendarAsync(latitude, longitude, month, year, annual, method, shafaq, tune, school, midnightMode, timezonestring, latitudeAdjustmentMethod, adjustment, iso8601, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Prayer Times Calendar
        /// </summary>
        /// <remarks>
        /// Returns all prayer times for a specific calendar month.
        /// </remarks>
        /// <param name="latitude">The decimal value for the latitude co-ordinate of the location you want the time computed for.</param>
        /// <param name="longitude">The decimal value for the longitude co-ordinate of the location you want the time computed for.</param>
        /// <param name="month">A hijri calendar month</param>
        /// <param name="year">A gregorian calendar year</param>
        /// <param name="annual">If true, month parameter will be ignored and the calendar for the entire year will be returned</param>
        /// <param name="method">A prayer times calculation method. Methods identify various schools of thought about how to compute the timings. If not specified, it defaults to the closest authority based on the location or co-ordinates specified in the API call. This parameter accepts values from 0-12 and 99, as specified below: &lt;br&gt;&lt;br&gt; Possible values:
        /// <br/>* `0` - Shia Ithna-Ansari
        /// <br/>* `1` - University of Islamic Sciences, Karachi
        /// <br/>* `2` - Islamic Society of North America
        /// <br/>* `3` - Muslim World League
        /// <br/>* `4` - Umm Al-Qura University, Makkah
        /// <br/>* `5` - Egyptian General Authority of Survey
        /// <br/>* `6` - Institute of Geophysics, University of Tehran
        /// <br/>* `7` - Gulf Region
        /// <br/>* `8` - Kuwait
        /// <br/>* `9` - Qatar
        /// <br/>* `10` - Majlis Ugama Islam Singapura, Singapore
        /// <br/>* `11` - Union Organization islamic de France
        /// <br/>* `12` - Diyanet İşleri Başkanlığı, Turkey
        /// <br/>* `13` - Spiritual Administration of Muslims of Russia
        /// <br/>* `14` - Moonsighting Committee Worldwide (also requires shafaq paramteer)
        /// <br/>* `99` - Custom. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods)</param>
        /// <param name="shafaq">Which Shafaq to use if the method is Moonsighting Commitee Worldwide. Acceptable options are 'general', 'ahmer' and 'abyad'</param>
        /// <param name="tune">Comma Separated String of integers to offset timings returned by the API in minutes. The order is `Imsak,Fajr,Sunrise,Dhuhr,Asr,Maghrib,Sunset,Isha,Midnight`. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods) for more details.</param>
        /// <param name="school">Shafi (or the standard way) or Hanafi. &lt;br /&gt;&lt;br /&gt; Possible values:
        /// <br/>* `0` - Shafi
        /// <br/>* `1` - Hanafi</param>
        /// <param name="midnightMode">Determines the method for calculating midnight &lt;br&gt;&lt;br&gt; Possible values:
        /// <br/>* `0` - Standard (Mid Sunset to Sunrise)
        /// <br/>* `1` - Jafari (Mid Sunset to Fajr)</param>
        /// <param name="timezonestring">A valid timezone name as specified on [https://php.net/manual/en/timezones.php](https://php.net/manual/en/timezones.php). &lt;br&gt; *If you do not specify this, we'll calcuate it using the co-ordinates you provide.*</param>
        /// <param name="latitudeAdjustmentMethod">Method for adjusting times at higher latitudes. For example, if you are checking timings in the UK or Sweden. &lt;br&gt;&lt;br&gt; Possible values:
        /// <br/>* `1` - Middle of the Night
        /// <br/>* `2` - One Seventh
        /// <br/>* `3` - Angle Based</param>
        /// <param name="adjustment">Number of days to adjust hijri date(s).</param>
        /// <param name="iso8601">Whether to return the prayer times in the iso8601 format. Example: true will return 2020-07-01T02:56:00+01:00 instead of 02:56</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ApiResponse<Calendar_response>> V1HijriCalendarAsync(double? latitude, double? longitude, double? month, double? year, bool? annual, double? method, Shafaq4? shafaq, string? tune, School4? school, MidnightMode4? midnightMode, string? timezonestring, LatitudeAdjustmentMethod4? latitudeAdjustmentMethod, int? adjustment, bool? iso8601, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/hijriCalendar?");
            if (latitude != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("latitude") + "=").Append(System.Uri.EscapeDataString(ConvertToString(latitude, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (longitude != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("longitude") + "=").Append(System.Uri.EscapeDataString(ConvertToString(longitude, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (month != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("month") + "=").Append(System.Uri.EscapeDataString(ConvertToString(month, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (year != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("year") + "=").Append(System.Uri.EscapeDataString(ConvertToString(year, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (annual != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("annual") + "=").Append(System.Uri.EscapeDataString(ConvertToString(annual, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (method != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("method") + "=").Append(System.Uri.EscapeDataString(ConvertToString(method, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (shafaq != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("shafaq") + "=").Append(System.Uri.EscapeDataString(ConvertToString(shafaq, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (tune != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tune") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tune, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (school != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("school") + "=").Append(System.Uri.EscapeDataString(ConvertToString(school, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (midnightMode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("midnightMode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(midnightMode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (timezonestring != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timezonestring") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timezonestring, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (latitudeAdjustmentMethod != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("latitudeAdjustmentMethod") + "=").Append(System.Uri.EscapeDataString(ConvertToString(latitudeAdjustmentMethod, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (adjustment != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("adjustment") + "=").Append(System.Uri.EscapeDataString(ConvertToString(adjustment, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (iso8601 != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("iso8601") + "=").Append(System.Uri.EscapeDataString(ConvertToString(iso8601, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Calendar_response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new ApiResponse<Calendar_response>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Prayer Times Hijri Calendar by address
        /// </summary>
        /// <remarks>
        /// Returns all prayer times for a specific Hijri calendar month at a particular address.
        /// </remarks>
        /// <param name="latitude">The decimal value for the latitude co-ordinate of the location you want the time computed for.</param>
        /// <param name="longitude">The decimal value for the longitude co-ordinate of the location you want the time computed for.</param>
        /// <param name="month">A hijri calendar month</param>
        /// <param name="year">A gregorian calendar year</param>
        /// <param name="annual">If true, month parameter will be ignored and the calendar for the entire year will be returned</param>
        /// <param name="method">A prayer times calculation method. Methods identify various schools of thought about how to compute the timings. If not specified, it defaults to the closest authority based on the location or co-ordinates specified in the API call. This parameter accepts values from 0-12 and 99, as specified below: &lt;br&gt;&lt;br&gt; Possible values:
        /// <br/>* `0` - Shia Ithna-Ansari
        /// <br/>* `1` - University of Islamic Sciences, Karachi
        /// <br/>* `2` - Islamic Society of North America
        /// <br/>* `3` - Muslim World League
        /// <br/>* `4` - Umm Al-Qura University, Makkah
        /// <br/>* `5` - Egyptian General Authority of Survey
        /// <br/>* `6` - Institute of Geophysics, University of Tehran
        /// <br/>* `7` - Gulf Region
        /// <br/>* `8` - Kuwait
        /// <br/>* `9` - Qatar
        /// <br/>* `10` - Majlis Ugama Islam Singapura, Singapore
        /// <br/>* `11` - Union Organization islamic de France
        /// <br/>* `12` - Diyanet İşleri Başkanlığı, Turkey
        /// <br/>* `13` - Spiritual Administration of Muslims of Russia
        /// <br/>* `14` - Moonsighting Committee Worldwide (also requires shafaq paramteer)
        /// <br/>* `99` - Custom. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods)</param>
        /// <param name="shafaq">Which Shafaq to use if the method is Moonsighting Commitee Worldwide. Acceptable options are 'general', 'ahmer' and 'abyad'</param>
        /// <param name="tune">Comma Separated String of integers to offset timings returned by the API in minutes. The order is `Imsak,Fajr,Sunrise,Dhuhr,Asr,Maghrib,Sunset,Isha,Midnight`. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods) for more details.</param>
        /// <param name="school">Shafi (or the standard way) or Hanafi. &lt;br /&gt;&lt;br /&gt; Possible values:
        /// <br/>* `0` - Shafi
        /// <br/>* `1` - Hanafi</param>
        /// <param name="midnightMode">Determines the method for calculating midnight &lt;br&gt;&lt;br&gt; Possible values:
        /// <br/>* `0` - Standard (Mid Sunset to Sunrise)
        /// <br/>* `1` - Jafari (Mid Sunset to Fajr)</param>
        /// <param name="timezonestring">A valid timezone name as specified on [https://php.net/manual/en/timezones.php](https://php.net/manual/en/timezones.php). &lt;br&gt; *If you do not specify this, we'll calcuate it using the co-ordinates you provide.*</param>
        /// <param name="latitudeAdjustmentMethod">Method for adjusting times at higher latitudes. For example, if you are checking timings in the UK or Sweden. &lt;br&gt;&lt;br&gt; Possible values:
        /// <br/>* `1` - Middle of the Night
        /// <br/>* `2` - One Seventh
        /// <br/>* `3` - Angle Based</param>
        /// <param name="adjustment">Number of days to adjust hijri date(s).</param>
        /// <param name="iso8601">Whether to return the prayer times in the iso8601 format. Example: true will return 2020-07-01T02:56:00+01:00 instead of 02:56</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ApiResponse<Calendar_response>> V1HijriCalendarByAddressAsync(double? latitude, double? longitude, double? month, double? year, bool? annual, double? method, Shafaq5? shafaq, string? tune, School5? school, MidnightMode5? midnightMode, string? timezonestring, LatitudeAdjustmentMethod5? latitudeAdjustmentMethod, int? adjustment, bool? iso8601)
        {
            return V1HijriCalendarByAddressAsync(latitude, longitude, month, year, annual, method, shafaq, tune, school, midnightMode, timezonestring, latitudeAdjustmentMethod, adjustment, iso8601, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Prayer Times Hijri Calendar by address
        /// </summary>
        /// <remarks>
        /// Returns all prayer times for a specific Hijri calendar month at a particular address.
        /// </remarks>
        /// <param name="latitude">The decimal value for the latitude co-ordinate of the location you want the time computed for.</param>
        /// <param name="longitude">The decimal value for the longitude co-ordinate of the location you want the time computed for.</param>
        /// <param name="month">A hijri calendar month</param>
        /// <param name="year">A gregorian calendar year</param>
        /// <param name="annual">If true, month parameter will be ignored and the calendar for the entire year will be returned</param>
        /// <param name="method">A prayer times calculation method. Methods identify various schools of thought about how to compute the timings. If not specified, it defaults to the closest authority based on the location or co-ordinates specified in the API call. This parameter accepts values from 0-12 and 99, as specified below: &lt;br&gt;&lt;br&gt; Possible values:
        /// <br/>* `0` - Shia Ithna-Ansari
        /// <br/>* `1` - University of Islamic Sciences, Karachi
        /// <br/>* `2` - Islamic Society of North America
        /// <br/>* `3` - Muslim World League
        /// <br/>* `4` - Umm Al-Qura University, Makkah
        /// <br/>* `5` - Egyptian General Authority of Survey
        /// <br/>* `6` - Institute of Geophysics, University of Tehran
        /// <br/>* `7` - Gulf Region
        /// <br/>* `8` - Kuwait
        /// <br/>* `9` - Qatar
        /// <br/>* `10` - Majlis Ugama Islam Singapura, Singapore
        /// <br/>* `11` - Union Organization islamic de France
        /// <br/>* `12` - Diyanet İşleri Başkanlığı, Turkey
        /// <br/>* `13` - Spiritual Administration of Muslims of Russia
        /// <br/>* `14` - Moonsighting Committee Worldwide (also requires shafaq paramteer)
        /// <br/>* `99` - Custom. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods)</param>
        /// <param name="shafaq">Which Shafaq to use if the method is Moonsighting Commitee Worldwide. Acceptable options are 'general', 'ahmer' and 'abyad'</param>
        /// <param name="tune">Comma Separated String of integers to offset timings returned by the API in minutes. The order is `Imsak,Fajr,Sunrise,Dhuhr,Asr,Maghrib,Sunset,Isha,Midnight`. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods) for more details.</param>
        /// <param name="school">Shafi (or the standard way) or Hanafi. &lt;br /&gt;&lt;br /&gt; Possible values:
        /// <br/>* `0` - Shafi
        /// <br/>* `1` - Hanafi</param>
        /// <param name="midnightMode">Determines the method for calculating midnight &lt;br&gt;&lt;br&gt; Possible values:
        /// <br/>* `0` - Standard (Mid Sunset to Sunrise)
        /// <br/>* `1` - Jafari (Mid Sunset to Fajr)</param>
        /// <param name="timezonestring">A valid timezone name as specified on [https://php.net/manual/en/timezones.php](https://php.net/manual/en/timezones.php). &lt;br&gt; *If you do not specify this, we'll calcuate it using the co-ordinates you provide.*</param>
        /// <param name="latitudeAdjustmentMethod">Method for adjusting times at higher latitudes. For example, if you are checking timings in the UK or Sweden. &lt;br&gt;&lt;br&gt; Possible values:
        /// <br/>* `1` - Middle of the Night
        /// <br/>* `2` - One Seventh
        /// <br/>* `3` - Angle Based</param>
        /// <param name="adjustment">Number of days to adjust hijri date(s).</param>
        /// <param name="iso8601">Whether to return the prayer times in the iso8601 format. Example: true will return 2020-07-01T02:56:00+01:00 instead of 02:56</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ApiResponse<Calendar_response>> V1HijriCalendarByAddressAsync(double? latitude, double? longitude, double? month, double? year, bool? annual, double? method, Shafaq5? shafaq, string? tune, School5? school, MidnightMode5? midnightMode, string? timezonestring, LatitudeAdjustmentMethod5? latitudeAdjustmentMethod, int? adjustment, bool? iso8601, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/hijriCalendarByAddress?");
            if (latitude != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("latitude") + "=").Append(System.Uri.EscapeDataString(ConvertToString(latitude, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (longitude != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("longitude") + "=").Append(System.Uri.EscapeDataString(ConvertToString(longitude, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (month != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("month") + "=").Append(System.Uri.EscapeDataString(ConvertToString(month, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (year != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("year") + "=").Append(System.Uri.EscapeDataString(ConvertToString(year, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (annual != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("annual") + "=").Append(System.Uri.EscapeDataString(ConvertToString(annual, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (method != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("method") + "=").Append(System.Uri.EscapeDataString(ConvertToString(method, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (shafaq != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("shafaq") + "=").Append(System.Uri.EscapeDataString(ConvertToString(shafaq, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (tune != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tune") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tune, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (school != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("school") + "=").Append(System.Uri.EscapeDataString(ConvertToString(school, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (midnightMode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("midnightMode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(midnightMode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (timezonestring != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timezonestring") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timezonestring, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (latitudeAdjustmentMethod != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("latitudeAdjustmentMethod") + "=").Append(System.Uri.EscapeDataString(ConvertToString(latitudeAdjustmentMethod, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (adjustment != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("adjustment") + "=").Append(System.Uri.EscapeDataString(ConvertToString(adjustment, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (iso8601 != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("iso8601") + "=").Append(System.Uri.EscapeDataString(ConvertToString(iso8601, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Calendar_response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new ApiResponse<Calendar_response>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Prayer Times Hijri Calendar by city
        /// </summary>
        /// <remarks>
        /// Returns all prayer times for a specific Hijri calendar month by City.
        /// </remarks>
        /// <param name="latitude">The decimal value for the latitude co-ordinate of the location you want the time computed for.</param>
        /// <param name="longitude">The decimal value for the longitude co-ordinate of the location you want the time computed for.</param>
        /// <param name="month">A hijri calendar month</param>
        /// <param name="year">A gregorian calendar year</param>
        /// <param name="annual">If true, month parameter will be ignored and the calendar for the entire year will be returned</param>
        /// <param name="method">A prayer times calculation method. Methods identify various schools of thought about how to compute the timings. If not specified, it defaults to the closest authority based on the location or co-ordinates specified in the API call. This parameter accepts values from 0-12 and 99, as specified below: &lt;br&gt;&lt;br&gt; Possible values:
        /// <br/>* `0` - Shia Ithna-Ansari
        /// <br/>* `1` - University of Islamic Sciences, Karachi
        /// <br/>* `2` - Islamic Society of North America
        /// <br/>* `3` - Muslim World League
        /// <br/>* `4` - Umm Al-Qura University, Makkah
        /// <br/>* `5` - Egyptian General Authority of Survey
        /// <br/>* `6` - Institute of Geophysics, University of Tehran
        /// <br/>* `7` - Gulf Region
        /// <br/>* `8` - Kuwait
        /// <br/>* `9` - Qatar
        /// <br/>* `10` - Majlis Ugama Islam Singapura, Singapore
        /// <br/>* `11` - Union Organization islamic de France
        /// <br/>* `12` - Diyanet İşleri Başkanlığı, Turkey
        /// <br/>* `13` - Spiritual Administration of Muslims of Russia
        /// <br/>* `14` - Moonsighting Committee Worldwide (also requires shafaq paramteer)
        /// <br/>* `99` - Custom. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods)</param>
        /// <param name="shafaq">Which Shafaq to use if the method is Moonsighting Commitee Worldwide. Acceptable options are 'general', 'ahmer' and 'abyad'</param>
        /// <param name="tune">Comma Separated String of integers to offset timings returned by the API in minutes. The order is `Imsak,Fajr,Sunrise,Dhuhr,Asr,Maghrib,Sunset,Isha,Midnight`. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods) for more details.</param>
        /// <param name="school">Shafi (or the standard way) or Hanafi. &lt;br /&gt;&lt;br /&gt; Possible values:
        /// <br/>* `0` - Shafi
        /// <br/>* `1` - Hanafi</param>
        /// <param name="midnightMode">Determines the method for calculating midnight &lt;br&gt;&lt;br&gt; Possible values:
        /// <br/>* `0` - Standard (Mid Sunset to Sunrise)
        /// <br/>* `1` - Jafari (Mid Sunset to Fajr)</param>
        /// <param name="timezonestring">A valid timezone name as specified on [https://php.net/manual/en/timezones.php](https://php.net/manual/en/timezones.php). &lt;br&gt; *If you do not specify this, we'll calcuate it using the co-ordinates you provide.*</param>
        /// <param name="latitudeAdjustmentMethod">Method for adjusting times at higher latitudes. For example, if you are checking timings in the UK or Sweden. &lt;br&gt;&lt;br&gt; Possible values:
        /// <br/>* `1` - Middle of the Night
        /// <br/>* `2` - One Seventh
        /// <br/>* `3` - Angle Based</param>
        /// <param name="adjustment">Number of days to adjust hijri date(s).</param>
        /// <param name="iso8601">Whether to return the prayer times in the iso8601 format. Example: true will return 2020-07-01T02:56:00+01:00 instead of 02:56</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ApiResponse<Calendar_response>> V1HijriCalendarByCityAsync(double? latitude, double? longitude, double? month, double? year, bool? annual, double? method, Shafaq6? shafaq, string? tune, School6? school, MidnightMode6? midnightMode, string? timezonestring, LatitudeAdjustmentMethod6? latitudeAdjustmentMethod, int? adjustment, bool? iso8601)
        {
            return V1HijriCalendarByCityAsync(latitude, longitude, month, year, annual, method, shafaq, tune, school, midnightMode, timezonestring, latitudeAdjustmentMethod, adjustment, iso8601, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Prayer Times Hijri Calendar by city
        /// </summary>
        /// <remarks>
        /// Returns all prayer times for a specific Hijri calendar month by City.
        /// </remarks>
        /// <param name="latitude">The decimal value for the latitude co-ordinate of the location you want the time computed for.</param>
        /// <param name="longitude">The decimal value for the longitude co-ordinate of the location you want the time computed for.</param>
        /// <param name="month">A hijri calendar month</param>
        /// <param name="year">A gregorian calendar year</param>
        /// <param name="annual">If true, month parameter will be ignored and the calendar for the entire year will be returned</param>
        /// <param name="method">A prayer times calculation method. Methods identify various schools of thought about how to compute the timings. If not specified, it defaults to the closest authority based on the location or co-ordinates specified in the API call. This parameter accepts values from 0-12 and 99, as specified below: &lt;br&gt;&lt;br&gt; Possible values:
        /// <br/>* `0` - Shia Ithna-Ansari
        /// <br/>* `1` - University of Islamic Sciences, Karachi
        /// <br/>* `2` - Islamic Society of North America
        /// <br/>* `3` - Muslim World League
        /// <br/>* `4` - Umm Al-Qura University, Makkah
        /// <br/>* `5` - Egyptian General Authority of Survey
        /// <br/>* `6` - Institute of Geophysics, University of Tehran
        /// <br/>* `7` - Gulf Region
        /// <br/>* `8` - Kuwait
        /// <br/>* `9` - Qatar
        /// <br/>* `10` - Majlis Ugama Islam Singapura, Singapore
        /// <br/>* `11` - Union Organization islamic de France
        /// <br/>* `12` - Diyanet İşleri Başkanlığı, Turkey
        /// <br/>* `13` - Spiritual Administration of Muslims of Russia
        /// <br/>* `14` - Moonsighting Committee Worldwide (also requires shafaq paramteer)
        /// <br/>* `99` - Custom. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods)</param>
        /// <param name="shafaq">Which Shafaq to use if the method is Moonsighting Commitee Worldwide. Acceptable options are 'general', 'ahmer' and 'abyad'</param>
        /// <param name="tune">Comma Separated String of integers to offset timings returned by the API in minutes. The order is `Imsak,Fajr,Sunrise,Dhuhr,Asr,Maghrib,Sunset,Isha,Midnight`. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods) for more details.</param>
        /// <param name="school">Shafi (or the standard way) or Hanafi. &lt;br /&gt;&lt;br /&gt; Possible values:
        /// <br/>* `0` - Shafi
        /// <br/>* `1` - Hanafi</param>
        /// <param name="midnightMode">Determines the method for calculating midnight &lt;br&gt;&lt;br&gt; Possible values:
        /// <br/>* `0` - Standard (Mid Sunset to Sunrise)
        /// <br/>* `1` - Jafari (Mid Sunset to Fajr)</param>
        /// <param name="timezonestring">A valid timezone name as specified on [https://php.net/manual/en/timezones.php](https://php.net/manual/en/timezones.php). &lt;br&gt; *If you do not specify this, we'll calcuate it using the co-ordinates you provide.*</param>
        /// <param name="latitudeAdjustmentMethod">Method for adjusting times at higher latitudes. For example, if you are checking timings in the UK or Sweden. &lt;br&gt;&lt;br&gt; Possible values:
        /// <br/>* `1` - Middle of the Night
        /// <br/>* `2` - One Seventh
        /// <br/>* `3` - Angle Based</param>
        /// <param name="adjustment">Number of days to adjust hijri date(s).</param>
        /// <param name="iso8601">Whether to return the prayer times in the iso8601 format. Example: true will return 2020-07-01T02:56:00+01:00 instead of 02:56</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ApiResponse<Calendar_response>> V1HijriCalendarByCityAsync(double? latitude, double? longitude, double? month, double? year, bool? annual, double? method, Shafaq6? shafaq, string? tune, School6? school, MidnightMode6? midnightMode, string? timezonestring, LatitudeAdjustmentMethod6? latitudeAdjustmentMethod, int? adjustment, bool? iso8601, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/hijriCalendarByCity?");
            if (latitude != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("latitude") + "=").Append(System.Uri.EscapeDataString(ConvertToString(latitude, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (longitude != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("longitude") + "=").Append(System.Uri.EscapeDataString(ConvertToString(longitude, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (month != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("month") + "=").Append(System.Uri.EscapeDataString(ConvertToString(month, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (year != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("year") + "=").Append(System.Uri.EscapeDataString(ConvertToString(year, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (annual != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("annual") + "=").Append(System.Uri.EscapeDataString(ConvertToString(annual, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (method != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("method") + "=").Append(System.Uri.EscapeDataString(ConvertToString(method, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (shafaq != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("shafaq") + "=").Append(System.Uri.EscapeDataString(ConvertToString(shafaq, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (tune != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tune") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tune, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (school != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("school") + "=").Append(System.Uri.EscapeDataString(ConvertToString(school, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (midnightMode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("midnightMode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(midnightMode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (timezonestring != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timezonestring") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timezonestring, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (latitudeAdjustmentMethod != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("latitudeAdjustmentMethod") + "=").Append(System.Uri.EscapeDataString(ConvertToString(latitudeAdjustmentMethod, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (adjustment != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("adjustment") + "=").Append(System.Uri.EscapeDataString(ConvertToString(adjustment, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (iso8601 != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("iso8601") + "=").Append(System.Uri.EscapeDataString(ConvertToString(iso8601, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Calendar_response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new ApiResponse<Calendar_response>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Prayer Times for date
        /// </summary>
        /// <remarks>
        /// Returns all prayer times for a specific date.
        /// </remarks>
        /// <param name="latitude">The decimal value for the latitude co-ordinate of the location you want the time computed for.</param>
        /// <param name="longitude">The decimal value for the longitude co-ordinate of the location you want the time computed for.</param>
        /// <param name="method">A prayer times calculation method. Methods identify various schools of thought about how to compute the timings. If not specified, it defaults to the closest authority based on the location or co-ordinates specified in the API call. This parameter accepts values from 0-12 and 99, as specified below: &lt;br&gt;&lt;br&gt; Possible values:
        /// <br/>* `0` - Shia Ithna-Ansari
        /// <br/>* `1` - University of Islamic Sciences, Karachi
        /// <br/>* `2` - Islamic Society of North America
        /// <br/>* `3` - Muslim World League
        /// <br/>* `4` - Umm Al-Qura University, Makkah
        /// <br/>* `5` - Egyptian General Authority of Survey
        /// <br/>* `6` - Institute of Geophysics, University of Tehran
        /// <br/>* `7` - Gulf Region
        /// <br/>* `8` - Kuwait
        /// <br/>* `9` - Qatar
        /// <br/>* `10` - Majlis Ugama Islam Singapura, Singapore
        /// <br/>* `11` - Union Organization islamic de France
        /// <br/>* `12` - Diyanet İşleri Başkanlığı, Turkey
        /// <br/>* `13` - Spiritual Administration of Muslims of Russia
        /// <br/>* `14` - Moonsighting Committee Worldwide (also requires shafaq paramteer)
        /// <br/>* `99` - Custom. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods)</param>
        /// <param name="shafaq">Which Shafaq to use if the method is Moonsighting Commitee Worldwide. Acceptable options are 'general', 'ahmer' and 'abyad'</param>
        /// <param name="tune">Comma Separated String of integers to offset timings returned by the API in minutes. The order is `Imsak,Fajr,Sunrise,Dhuhr,Asr,Maghrib,Sunset,Isha,Midnight`. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods) for more details.</param>
        /// <param name="school">Shafi (or the standard way) or Hanafi. &lt;br /&gt;&lt;br /&gt; Possible values:
        /// <br/>* `0` - Shafi
        /// <br/>* `1` - Hanafi</param>
        /// <param name="midnightMode">Determines the method for calculating midnight &lt;br&gt;&lt;br&gt; Possible values:
        /// <br/>* `0` - Standard (Mid Sunset to Sunrise)
        /// <br/>* `1` - Jafari (Mid Sunset to Fajr)</param>
        /// <param name="timezonestring">A valid timezone name as specified on [https://php.net/manual/en/timezones.php](https://php.net/manual/en/timezones.php). &lt;br&gt; *If you do not specify this, we'll calcuate it using the co-ordinates you provide.*</param>
        /// <param name="latitudeAdjustmentMethod">Method for adjusting times at higher latitudes. For example, if you are checking timings in the UK or Sweden. &lt;br&gt;&lt;br&gt; Possible values:
        /// <br/>* `1` - Middle of the Night
        /// <br/>* `2` - One Seventh
        /// <br/>* `3` - Angle Based</param>
        /// <param name="adjustment">Number of days to adjust hijri date(s).</param>
        /// <param name="iso8601">Whether to return the prayer times in the iso8601 format. Example: true will return 2020-07-01T02:56:00+01:00 instead of 02:56</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ApiResponse<Timings_response>> V1TimingsGetAsync(double? latitude, double? longitude, double? method, Shafaq7? shafaq, string? tune, School7? school, MidnightMode7? midnightMode, string? timezonestring, LatitudeAdjustmentMethod7? latitudeAdjustmentMethod, int? adjustment, bool? iso8601)
        {
            return V1TimingsGetAsync(latitude, longitude, method, shafaq, tune, school, midnightMode, timezonestring, latitudeAdjustmentMethod, adjustment, iso8601, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Prayer Times for date
        /// </summary>
        /// <remarks>
        /// Returns all prayer times for a specific date.
        /// </remarks>
        /// <param name="latitude">The decimal value for the latitude co-ordinate of the location you want the time computed for.</param>
        /// <param name="longitude">The decimal value for the longitude co-ordinate of the location you want the time computed for.</param>
        /// <param name="method">A prayer times calculation method. Methods identify various schools of thought about how to compute the timings. If not specified, it defaults to the closest authority based on the location or co-ordinates specified in the API call. This parameter accepts values from 0-12 and 99, as specified below: &lt;br&gt;&lt;br&gt; Possible values:
        /// <br/>* `0` - Shia Ithna-Ansari
        /// <br/>* `1` - University of Islamic Sciences, Karachi
        /// <br/>* `2` - Islamic Society of North America
        /// <br/>* `3` - Muslim World League
        /// <br/>* `4` - Umm Al-Qura University, Makkah
        /// <br/>* `5` - Egyptian General Authority of Survey
        /// <br/>* `6` - Institute of Geophysics, University of Tehran
        /// <br/>* `7` - Gulf Region
        /// <br/>* `8` - Kuwait
        /// <br/>* `9` - Qatar
        /// <br/>* `10` - Majlis Ugama Islam Singapura, Singapore
        /// <br/>* `11` - Union Organization islamic de France
        /// <br/>* `12` - Diyanet İşleri Başkanlığı, Turkey
        /// <br/>* `13` - Spiritual Administration of Muslims of Russia
        /// <br/>* `14` - Moonsighting Committee Worldwide (also requires shafaq paramteer)
        /// <br/>* `99` - Custom. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods)</param>
        /// <param name="shafaq">Which Shafaq to use if the method is Moonsighting Commitee Worldwide. Acceptable options are 'general', 'ahmer' and 'abyad'</param>
        /// <param name="tune">Comma Separated String of integers to offset timings returned by the API in minutes. The order is `Imsak,Fajr,Sunrise,Dhuhr,Asr,Maghrib,Sunset,Isha,Midnight`. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods) for more details.</param>
        /// <param name="school">Shafi (or the standard way) or Hanafi. &lt;br /&gt;&lt;br /&gt; Possible values:
        /// <br/>* `0` - Shafi
        /// <br/>* `1` - Hanafi</param>
        /// <param name="midnightMode">Determines the method for calculating midnight &lt;br&gt;&lt;br&gt; Possible values:
        /// <br/>* `0` - Standard (Mid Sunset to Sunrise)
        /// <br/>* `1` - Jafari (Mid Sunset to Fajr)</param>
        /// <param name="timezonestring">A valid timezone name as specified on [https://php.net/manual/en/timezones.php](https://php.net/manual/en/timezones.php). &lt;br&gt; *If you do not specify this, we'll calcuate it using the co-ordinates you provide.*</param>
        /// <param name="latitudeAdjustmentMethod">Method for adjusting times at higher latitudes. For example, if you are checking timings in the UK or Sweden. &lt;br&gt;&lt;br&gt; Possible values:
        /// <br/>* `1` - Middle of the Night
        /// <br/>* `2` - One Seventh
        /// <br/>* `3` - Angle Based</param>
        /// <param name="adjustment">Number of days to adjust hijri date(s).</param>
        /// <param name="iso8601">Whether to return the prayer times in the iso8601 format. Example: true will return 2020-07-01T02:56:00+01:00 instead of 02:56</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ApiResponse<Timings_response>> V1TimingsGetAsync(double? latitude, double? longitude, double? method, Shafaq7? shafaq, string? tune, School7? school, MidnightMode7? midnightMode, string? timezonestring, LatitudeAdjustmentMethod7? latitudeAdjustmentMethod, int? adjustment, bool? iso8601, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/timings?");
            if (latitude != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("latitude") + "=").Append(System.Uri.EscapeDataString(ConvertToString(latitude, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (longitude != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("longitude") + "=").Append(System.Uri.EscapeDataString(ConvertToString(longitude, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (method != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("method") + "=").Append(System.Uri.EscapeDataString(ConvertToString(method, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (shafaq != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("shafaq") + "=").Append(System.Uri.EscapeDataString(ConvertToString(shafaq, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (tune != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tune") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tune, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (school != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("school") + "=").Append(System.Uri.EscapeDataString(ConvertToString(school, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (midnightMode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("midnightMode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(midnightMode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (timezonestring != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timezonestring") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timezonestring, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (latitudeAdjustmentMethod != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("latitudeAdjustmentMethod") + "=").Append(System.Uri.EscapeDataString(ConvertToString(latitudeAdjustmentMethod, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (adjustment != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("adjustment") + "=").Append(System.Uri.EscapeDataString(ConvertToString(adjustment, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (iso8601 != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("iso8601") + "=").Append(System.Uri.EscapeDataString(ConvertToString(iso8601, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Timings_response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new ApiResponse<Timings_response>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Prayer Times for date
        /// </summary>
        /// <remarks>
        /// Returns all prayer times for a specific date.
        /// </remarks>
        /// <param name="date_or_timestamp">A date in the DD-MM-YYYY format or UNIX timestamp. Defaults to the current date if omitted.</param>
        /// <param name="latitude">The decimal value for the latitude co-ordinate of the location you want the time computed for.</param>
        /// <param name="longitude">The decimal value for the longitude co-ordinate of the location you want the time computed for.</param>
        /// <param name="method">A prayer times calculation method. Methods identify various schools of thought about how to compute the timings. If not specified, it defaults to the closest authority based on the location or co-ordinates specified in the API call. This parameter accepts values from 0-12 and 99, as specified below: &lt;br&gt;&lt;br&gt; Possible values:
        /// <br/>* `0` - Shia Ithna-Ansari
        /// <br/>* `1` - University of Islamic Sciences, Karachi
        /// <br/>* `2` - Islamic Society of North America
        /// <br/>* `3` - Muslim World League
        /// <br/>* `4` - Umm Al-Qura University, Makkah
        /// <br/>* `5` - Egyptian General Authority of Survey
        /// <br/>* `6` - Institute of Geophysics, University of Tehran
        /// <br/>* `7` - Gulf Region
        /// <br/>* `8` - Kuwait
        /// <br/>* `9` - Qatar
        /// <br/>* `10` - Majlis Ugama Islam Singapura, Singapore
        /// <br/>* `11` - Union Organization islamic de France
        /// <br/>* `12` - Diyanet İşleri Başkanlığı, Turkey
        /// <br/>* `13` - Spiritual Administration of Muslims of Russia
        /// <br/>* `14` - Moonsighting Committee Worldwide (also requires shafaq paramteer)
        /// <br/>* `99` - Custom. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods)</param>
        /// <param name="shafaq">Which Shafaq to use if the method is Moonsighting Commitee Worldwide. Acceptable options are 'general', 'ahmer' and 'abyad'</param>
        /// <param name="tune">Comma Separated String of integers to offset timings returned by the API in minutes. The order is `Imsak,Fajr,Sunrise,Dhuhr,Asr,Maghrib,Sunset,Isha,Midnight`. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods) for more details.</param>
        /// <param name="school">Shafi (or the standard way) or Hanafi. &lt;br /&gt;&lt;br /&gt; Possible values:
        /// <br/>* `0` - Shafi
        /// <br/>* `1` - Hanafi</param>
        /// <param name="midnightMode">Determines the method for calculating midnight &lt;br&gt;&lt;br&gt; Possible values:
        /// <br/>* `0` - Standard (Mid Sunset to Sunrise)
        /// <br/>* `1` - Jafari (Mid Sunset to Fajr)</param>
        /// <param name="timezonestring">A valid timezone name as specified on [https://php.net/manual/en/timezones.php](https://php.net/manual/en/timezones.php). &lt;br&gt; *If you do not specify this, we'll calcuate it using the co-ordinates you provide.*</param>
        /// <param name="latitudeAdjustmentMethod">Method for adjusting times at higher latitudes. For example, if you are checking timings in the UK or Sweden. &lt;br&gt;&lt;br&gt; Possible values:
        /// <br/>* `1` - Middle of the Night
        /// <br/>* `2` - One Seventh
        /// <br/>* `3` - Angle Based</param>
        /// <param name="adjustment">Number of days to adjust hijri date(s).</param>
        /// <param name="iso8601">Whether to return the prayer times in the iso8601 format. Example: true will return 2020-07-01T02:56:00+01:00 instead of 02:56</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ApiResponse<Timings_response>> V1TimingsGetAsync(string date_or_timestamp, double? latitude, double? longitude, double? method, Shafaq8? shafaq, string? tune, School8? school, MidnightMode8? midnightMode, string? timezonestring, LatitudeAdjustmentMethod8? latitudeAdjustmentMethod, int? adjustment, bool? iso8601)
        {
            return V1TimingsGetAsync(date_or_timestamp, latitude, longitude, method, shafaq, tune, school, midnightMode, timezonestring, latitudeAdjustmentMethod, adjustment, iso8601, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Prayer Times for date
        /// </summary>
        /// <remarks>
        /// Returns all prayer times for a specific date.
        /// </remarks>
        /// <param name="date_or_timestamp">A date in the DD-MM-YYYY format or UNIX timestamp. Defaults to the current date if omitted.</param>
        /// <param name="latitude">The decimal value for the latitude co-ordinate of the location you want the time computed for.</param>
        /// <param name="longitude">The decimal value for the longitude co-ordinate of the location you want the time computed for.</param>
        /// <param name="method">A prayer times calculation method. Methods identify various schools of thought about how to compute the timings. If not specified, it defaults to the closest authority based on the location or co-ordinates specified in the API call. This parameter accepts values from 0-12 and 99, as specified below: &lt;br&gt;&lt;br&gt; Possible values:
        /// <br/>* `0` - Shia Ithna-Ansari
        /// <br/>* `1` - University of Islamic Sciences, Karachi
        /// <br/>* `2` - Islamic Society of North America
        /// <br/>* `3` - Muslim World League
        /// <br/>* `4` - Umm Al-Qura University, Makkah
        /// <br/>* `5` - Egyptian General Authority of Survey
        /// <br/>* `6` - Institute of Geophysics, University of Tehran
        /// <br/>* `7` - Gulf Region
        /// <br/>* `8` - Kuwait
        /// <br/>* `9` - Qatar
        /// <br/>* `10` - Majlis Ugama Islam Singapura, Singapore
        /// <br/>* `11` - Union Organization islamic de France
        /// <br/>* `12` - Diyanet İşleri Başkanlığı, Turkey
        /// <br/>* `13` - Spiritual Administration of Muslims of Russia
        /// <br/>* `14` - Moonsighting Committee Worldwide (also requires shafaq paramteer)
        /// <br/>* `99` - Custom. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods)</param>
        /// <param name="shafaq">Which Shafaq to use if the method is Moonsighting Commitee Worldwide. Acceptable options are 'general', 'ahmer' and 'abyad'</param>
        /// <param name="tune">Comma Separated String of integers to offset timings returned by the API in minutes. The order is `Imsak,Fajr,Sunrise,Dhuhr,Asr,Maghrib,Sunset,Isha,Midnight`. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods) for more details.</param>
        /// <param name="school">Shafi (or the standard way) or Hanafi. &lt;br /&gt;&lt;br /&gt; Possible values:
        /// <br/>* `0` - Shafi
        /// <br/>* `1` - Hanafi</param>
        /// <param name="midnightMode">Determines the method for calculating midnight &lt;br&gt;&lt;br&gt; Possible values:
        /// <br/>* `0` - Standard (Mid Sunset to Sunrise)
        /// <br/>* `1` - Jafari (Mid Sunset to Fajr)</param>
        /// <param name="timezonestring">A valid timezone name as specified on [https://php.net/manual/en/timezones.php](https://php.net/manual/en/timezones.php). &lt;br&gt; *If you do not specify this, we'll calcuate it using the co-ordinates you provide.*</param>
        /// <param name="latitudeAdjustmentMethod">Method for adjusting times at higher latitudes. For example, if you are checking timings in the UK or Sweden. &lt;br&gt;&lt;br&gt; Possible values:
        /// <br/>* `1` - Middle of the Night
        /// <br/>* `2` - One Seventh
        /// <br/>* `3` - Angle Based</param>
        /// <param name="adjustment">Number of days to adjust hijri date(s).</param>
        /// <param name="iso8601">Whether to return the prayer times in the iso8601 format. Example: true will return 2020-07-01T02:56:00+01:00 instead of 02:56</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ApiResponse<Timings_response>> V1TimingsGetAsync(string date_or_timestamp, double? latitude, double? longitude, double? method, Shafaq8? shafaq, string? tune, School8? school, MidnightMode8? midnightMode, string? timezonestring, LatitudeAdjustmentMethod8? latitudeAdjustmentMethod, int? adjustment, bool? iso8601, System.Threading.CancellationToken cancellationToken)
        {
            if (date_or_timestamp == null)
                throw new System.ArgumentNullException("date_or_timestamp");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/timings/{date_or_timestamp}?");
            urlBuilder_.Replace("{date_or_timestamp}", System.Uri.EscapeDataString(ConvertToString(date_or_timestamp, System.Globalization.CultureInfo.InvariantCulture)));
            if (latitude != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("latitude") + "=").Append(System.Uri.EscapeDataString(ConvertToString(latitude, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (longitude != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("longitude") + "=").Append(System.Uri.EscapeDataString(ConvertToString(longitude, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (method != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("method") + "=").Append(System.Uri.EscapeDataString(ConvertToString(method, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (shafaq != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("shafaq") + "=").Append(System.Uri.EscapeDataString(ConvertToString(shafaq, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (tune != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tune") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tune, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (school != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("school") + "=").Append(System.Uri.EscapeDataString(ConvertToString(school, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (midnightMode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("midnightMode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(midnightMode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (timezonestring != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timezonestring") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timezonestring, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (latitudeAdjustmentMethod != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("latitudeAdjustmentMethod") + "=").Append(System.Uri.EscapeDataString(ConvertToString(latitudeAdjustmentMethod, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (adjustment != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("adjustment") + "=").Append(System.Uri.EscapeDataString(ConvertToString(adjustment, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (iso8601 != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("iso8601") + "=").Append(System.Uri.EscapeDataString(ConvertToString(iso8601, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Timings_response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new ApiResponse<Timings_response>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Timings By Address
        /// </summary>
        /// <remarks>
        /// Returns all prayer times for a specific date at a particular address.
        /// </remarks>
        /// <param name="address">An address string</param>
        /// <param name="method">A prayer times calculation method. Methods identify various schools of thought about how to compute the timings. If not specified, it defaults to the closest authority based on the location or co-ordinates specified in the API call. This parameter accepts values from 0-12 and 99, as specified below: &lt;br&gt;&lt;br&gt; Possible values:
        /// <br/>* `0` - Shia Ithna-Ansari
        /// <br/>* `1` - University of Islamic Sciences, Karachi
        /// <br/>* `2` - Islamic Society of North America
        /// <br/>* `3` - Muslim World League
        /// <br/>* `4` - Umm Al-Qura University, Makkah
        /// <br/>* `5` - Egyptian General Authority of Survey
        /// <br/>* `6` - Institute of Geophysics, University of Tehran
        /// <br/>* `7` - Gulf Region
        /// <br/>* `8` - Kuwait
        /// <br/>* `9` - Qatar
        /// <br/>* `10` - Majlis Ugama Islam Singapura, Singapore
        /// <br/>* `11` - Union Organization islamic de France
        /// <br/>* `12` - Diyanet İşleri Başkanlığı, Turkey
        /// <br/>* `13` - Spiritual Administration of Muslims of Russia
        /// <br/>* `14` - Moonsighting Committee Worldwide (also requires shafaq paramteer)
        /// <br/>* `99` - Custom. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods)</param>
        /// <param name="shafaq">Which Shafaq to use if the method is Moonsighting Commitee Worldwide. Acceptable options are 'general', 'ahmer' and 'abyad'</param>
        /// <param name="tune">Comma Separated String of integers to offset timings returned by the API in minutes. The order is `Imsak,Fajr,Sunrise,Dhuhr,Asr,Maghrib,Sunset,Isha,Midnight`. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods) for more details.</param>
        /// <param name="school">Shafi (or the standard way) or Hanafi. &lt;br /&gt;&lt;br /&gt; Possible values:
        /// <br/>* `0` - Shafi
        /// <br/>* `1` - Hanafi</param>
        /// <param name="midnightMode">Determines the method for calculating midnight &lt;br&gt;&lt;br&gt; Possible values:
        /// <br/>* `0` - Standard (Mid Sunset to Sunrise)
        /// <br/>* `1` - Jafari (Mid Sunset to Fajr)</param>
        /// <param name="timezonestring">A valid timezone name as specified on [https://php.net/manual/en/timezones.php](https://php.net/manual/en/timezones.php). &lt;br&gt; *If you do not specify this, we'll calcuate it using the co-ordinates you provide.*</param>
        /// <param name="latitudeAdjustmentMethod">Method for adjusting times at higher latitudes. For example, if you are checking timings in the UK or Sweden. &lt;br&gt;&lt;br&gt; Possible values:
        /// <br/>* `1` - Middle of the Night
        /// <br/>* `2` - One Seventh
        /// <br/>* `3` - Angle Based</param>
        /// <param name="adjustment">Number of days to adjust hijri date(s).</param>
        /// <param name="iso8601">Whether to return the prayer times in the iso8601 format. Example: true will return 2020-07-01T02:56:00+01:00 instead of 02:56</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ApiResponse<Timings_response>> V1TimingsByAddressGetAsync(string? address, double? method, Shafaq9? shafaq, string? tune, School9? school, MidnightMode9? midnightMode, string? timezonestring, LatitudeAdjustmentMethod9? latitudeAdjustmentMethod, int? adjustment, bool? iso8601)
        {
            return V1TimingsByAddressGetAsync(address, method, shafaq, tune, school, midnightMode, timezonestring, latitudeAdjustmentMethod, adjustment, iso8601, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Timings By Address
        /// </summary>
        /// <remarks>
        /// Returns all prayer times for a specific date at a particular address.
        /// </remarks>
        /// <param name="address">An address string</param>
        /// <param name="method">A prayer times calculation method. Methods identify various schools of thought about how to compute the timings. If not specified, it defaults to the closest authority based on the location or co-ordinates specified in the API call. This parameter accepts values from 0-12 and 99, as specified below: &lt;br&gt;&lt;br&gt; Possible values:
        /// <br/>* `0` - Shia Ithna-Ansari
        /// <br/>* `1` - University of Islamic Sciences, Karachi
        /// <br/>* `2` - Islamic Society of North America
        /// <br/>* `3` - Muslim World League
        /// <br/>* `4` - Umm Al-Qura University, Makkah
        /// <br/>* `5` - Egyptian General Authority of Survey
        /// <br/>* `6` - Institute of Geophysics, University of Tehran
        /// <br/>* `7` - Gulf Region
        /// <br/>* `8` - Kuwait
        /// <br/>* `9` - Qatar
        /// <br/>* `10` - Majlis Ugama Islam Singapura, Singapore
        /// <br/>* `11` - Union Organization islamic de France
        /// <br/>* `12` - Diyanet İşleri Başkanlığı, Turkey
        /// <br/>* `13` - Spiritual Administration of Muslims of Russia
        /// <br/>* `14` - Moonsighting Committee Worldwide (also requires shafaq paramteer)
        /// <br/>* `99` - Custom. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods)</param>
        /// <param name="shafaq">Which Shafaq to use if the method is Moonsighting Commitee Worldwide. Acceptable options are 'general', 'ahmer' and 'abyad'</param>
        /// <param name="tune">Comma Separated String of integers to offset timings returned by the API in minutes. The order is `Imsak,Fajr,Sunrise,Dhuhr,Asr,Maghrib,Sunset,Isha,Midnight`. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods) for more details.</param>
        /// <param name="school">Shafi (or the standard way) or Hanafi. &lt;br /&gt;&lt;br /&gt; Possible values:
        /// <br/>* `0` - Shafi
        /// <br/>* `1` - Hanafi</param>
        /// <param name="midnightMode">Determines the method for calculating midnight &lt;br&gt;&lt;br&gt; Possible values:
        /// <br/>* `0` - Standard (Mid Sunset to Sunrise)
        /// <br/>* `1` - Jafari (Mid Sunset to Fajr)</param>
        /// <param name="timezonestring">A valid timezone name as specified on [https://php.net/manual/en/timezones.php](https://php.net/manual/en/timezones.php). &lt;br&gt; *If you do not specify this, we'll calcuate it using the co-ordinates you provide.*</param>
        /// <param name="latitudeAdjustmentMethod">Method for adjusting times at higher latitudes. For example, if you are checking timings in the UK or Sweden. &lt;br&gt;&lt;br&gt; Possible values:
        /// <br/>* `1` - Middle of the Night
        /// <br/>* `2` - One Seventh
        /// <br/>* `3` - Angle Based</param>
        /// <param name="adjustment">Number of days to adjust hijri date(s).</param>
        /// <param name="iso8601">Whether to return the prayer times in the iso8601 format. Example: true will return 2020-07-01T02:56:00+01:00 instead of 02:56</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ApiResponse<Timings_response>> V1TimingsByAddressGetAsync(string? address, double? method, Shafaq9? shafaq, string? tune, School9? school, MidnightMode9? midnightMode, string? timezonestring, LatitudeAdjustmentMethod9? latitudeAdjustmentMethod, int? adjustment, bool? iso8601, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/timingsByAddress?");
            if (address != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("address") + "=").Append(System.Uri.EscapeDataString(ConvertToString(address, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (method != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("method") + "=").Append(System.Uri.EscapeDataString(ConvertToString(method, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (shafaq != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("shafaq") + "=").Append(System.Uri.EscapeDataString(ConvertToString(shafaq, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (tune != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tune") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tune, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (school != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("school") + "=").Append(System.Uri.EscapeDataString(ConvertToString(school, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (midnightMode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("midnightMode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(midnightMode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (timezonestring != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timezonestring") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timezonestring, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (latitudeAdjustmentMethod != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("latitudeAdjustmentMethod") + "=").Append(System.Uri.EscapeDataString(ConvertToString(latitudeAdjustmentMethod, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (adjustment != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("adjustment") + "=").Append(System.Uri.EscapeDataString(ConvertToString(adjustment, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (iso8601 != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("iso8601") + "=").Append(System.Uri.EscapeDataString(ConvertToString(iso8601, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Timings_response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new ApiResponse<Timings_response>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Timings By Address
        /// </summary>
        /// <remarks>
        /// Returns all prayer times for a specific date at a particular address.
        /// </remarks>
        /// <param name="date_or_timestamp">A date in the DD-MM-YYYY format or UNIX timestamp. Defaults to the current date if omitted.</param>
        /// <param name="address">An address string</param>
        /// <param name="method">A prayer times calculation method. Methods identify various schools of thought about how to compute the timings. If not specified, it defaults to the closest authority based on the location or co-ordinates specified in the API call. This parameter accepts values from 0-12 and 99, as specified below: &lt;br&gt;&lt;br&gt; Possible values:
        /// <br/>* `0` - Shia Ithna-Ansari
        /// <br/>* `1` - University of Islamic Sciences, Karachi
        /// <br/>* `2` - Islamic Society of North America
        /// <br/>* `3` - Muslim World League
        /// <br/>* `4` - Umm Al-Qura University, Makkah
        /// <br/>* `5` - Egyptian General Authority of Survey
        /// <br/>* `6` - Institute of Geophysics, University of Tehran
        /// <br/>* `7` - Gulf Region
        /// <br/>* `8` - Kuwait
        /// <br/>* `9` - Qatar
        /// <br/>* `10` - Majlis Ugama Islam Singapura, Singapore
        /// <br/>* `11` - Union Organization islamic de France
        /// <br/>* `12` - Diyanet İşleri Başkanlığı, Turkey
        /// <br/>* `13` - Spiritual Administration of Muslims of Russia
        /// <br/>* `14` - Moonsighting Committee Worldwide (also requires shafaq paramteer)
        /// <br/>* `99` - Custom. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods)</param>
        /// <param name="shafaq">Which Shafaq to use if the method is Moonsighting Commitee Worldwide. Acceptable options are 'general', 'ahmer' and 'abyad'</param>
        /// <param name="tune">Comma Separated String of integers to offset timings returned by the API in minutes. The order is `Imsak,Fajr,Sunrise,Dhuhr,Asr,Maghrib,Sunset,Isha,Midnight`. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods) for more details.</param>
        /// <param name="school">Shafi (or the standard way) or Hanafi. &lt;br /&gt;&lt;br /&gt; Possible values:
        /// <br/>* `0` - Shafi
        /// <br/>* `1` - Hanafi</param>
        /// <param name="midnightMode">Determines the method for calculating midnight &lt;br&gt;&lt;br&gt; Possible values:
        /// <br/>* `0` - Standard (Mid Sunset to Sunrise)
        /// <br/>* `1` - Jafari (Mid Sunset to Fajr)</param>
        /// <param name="timezonestring">A valid timezone name as specified on [https://php.net/manual/en/timezones.php](https://php.net/manual/en/timezones.php). &lt;br&gt; *If you do not specify this, we'll calcuate it using the co-ordinates you provide.*</param>
        /// <param name="latitudeAdjustmentMethod">Method for adjusting times at higher latitudes. For example, if you are checking timings in the UK or Sweden. &lt;br&gt;&lt;br&gt; Possible values:
        /// <br/>* `1` - Middle of the Night
        /// <br/>* `2` - One Seventh
        /// <br/>* `3` - Angle Based</param>
        /// <param name="adjustment">Number of days to adjust hijri date(s).</param>
        /// <param name="iso8601">Whether to return the prayer times in the iso8601 format. Example: true will return 2020-07-01T02:56:00+01:00 instead of 02:56</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ApiResponse<Timings_response>> V1TimingsByAddressGetAsync(string date_or_timestamp, string? address, double? method, Shafaq10? shafaq, string? tune, School10? school, MidnightMode10? midnightMode, string? timezonestring, LatitudeAdjustmentMethod10? latitudeAdjustmentMethod, int? adjustment, bool? iso8601)
        {
            return V1TimingsByAddressGetAsync(date_or_timestamp, address, method, shafaq, tune, school, midnightMode, timezonestring, latitudeAdjustmentMethod, adjustment, iso8601, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Timings By Address
        /// </summary>
        /// <remarks>
        /// Returns all prayer times for a specific date at a particular address.
        /// </remarks>
        /// <param name="date_or_timestamp">A date in the DD-MM-YYYY format or UNIX timestamp. Defaults to the current date if omitted.</param>
        /// <param name="address">An address string</param>
        /// <param name="method">A prayer times calculation method. Methods identify various schools of thought about how to compute the timings. If not specified, it defaults to the closest authority based on the location or co-ordinates specified in the API call. This parameter accepts values from 0-12 and 99, as specified below: &lt;br&gt;&lt;br&gt; Possible values:
        /// <br/>* `0` - Shia Ithna-Ansari
        /// <br/>* `1` - University of Islamic Sciences, Karachi
        /// <br/>* `2` - Islamic Society of North America
        /// <br/>* `3` - Muslim World League
        /// <br/>* `4` - Umm Al-Qura University, Makkah
        /// <br/>* `5` - Egyptian General Authority of Survey
        /// <br/>* `6` - Institute of Geophysics, University of Tehran
        /// <br/>* `7` - Gulf Region
        /// <br/>* `8` - Kuwait
        /// <br/>* `9` - Qatar
        /// <br/>* `10` - Majlis Ugama Islam Singapura, Singapore
        /// <br/>* `11` - Union Organization islamic de France
        /// <br/>* `12` - Diyanet İşleri Başkanlığı, Turkey
        /// <br/>* `13` - Spiritual Administration of Muslims of Russia
        /// <br/>* `14` - Moonsighting Committee Worldwide (also requires shafaq paramteer)
        /// <br/>* `99` - Custom. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods)</param>
        /// <param name="shafaq">Which Shafaq to use if the method is Moonsighting Commitee Worldwide. Acceptable options are 'general', 'ahmer' and 'abyad'</param>
        /// <param name="tune">Comma Separated String of integers to offset timings returned by the API in minutes. The order is `Imsak,Fajr,Sunrise,Dhuhr,Asr,Maghrib,Sunset,Isha,Midnight`. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods) for more details.</param>
        /// <param name="school">Shafi (or the standard way) or Hanafi. &lt;br /&gt;&lt;br /&gt; Possible values:
        /// <br/>* `0` - Shafi
        /// <br/>* `1` - Hanafi</param>
        /// <param name="midnightMode">Determines the method for calculating midnight &lt;br&gt;&lt;br&gt; Possible values:
        /// <br/>* `0` - Standard (Mid Sunset to Sunrise)
        /// <br/>* `1` - Jafari (Mid Sunset to Fajr)</param>
        /// <param name="timezonestring">A valid timezone name as specified on [https://php.net/manual/en/timezones.php](https://php.net/manual/en/timezones.php). &lt;br&gt; *If you do not specify this, we'll calcuate it using the co-ordinates you provide.*</param>
        /// <param name="latitudeAdjustmentMethod">Method for adjusting times at higher latitudes. For example, if you are checking timings in the UK or Sweden. &lt;br&gt;&lt;br&gt; Possible values:
        /// <br/>* `1` - Middle of the Night
        /// <br/>* `2` - One Seventh
        /// <br/>* `3` - Angle Based</param>
        /// <param name="adjustment">Number of days to adjust hijri date(s).</param>
        /// <param name="iso8601">Whether to return the prayer times in the iso8601 format. Example: true will return 2020-07-01T02:56:00+01:00 instead of 02:56</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ApiResponse<Timings_response>> V1TimingsByAddressGetAsync(string date_or_timestamp, string? address, double? method, Shafaq10? shafaq, string? tune, School10? school, MidnightMode10? midnightMode, string? timezonestring, LatitudeAdjustmentMethod10? latitudeAdjustmentMethod, int? adjustment, bool? iso8601, System.Threading.CancellationToken cancellationToken)
        {
            if (date_or_timestamp == null)
                throw new System.ArgumentNullException("date_or_timestamp");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/timingsByAddress/{date_or_timestamp}?");
            urlBuilder_.Replace("{date_or_timestamp}", System.Uri.EscapeDataString(ConvertToString(date_or_timestamp, System.Globalization.CultureInfo.InvariantCulture)));
            if (address != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("address") + "=").Append(System.Uri.EscapeDataString(ConvertToString(address, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (method != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("method") + "=").Append(System.Uri.EscapeDataString(ConvertToString(method, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (shafaq != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("shafaq") + "=").Append(System.Uri.EscapeDataString(ConvertToString(shafaq, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (tune != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tune") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tune, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (school != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("school") + "=").Append(System.Uri.EscapeDataString(ConvertToString(school, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (midnightMode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("midnightMode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(midnightMode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (timezonestring != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timezonestring") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timezonestring, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (latitudeAdjustmentMethod != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("latitudeAdjustmentMethod") + "=").Append(System.Uri.EscapeDataString(ConvertToString(latitudeAdjustmentMethod, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (adjustment != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("adjustment") + "=").Append(System.Uri.EscapeDataString(ConvertToString(adjustment, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (iso8601 != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("iso8601") + "=").Append(System.Uri.EscapeDataString(ConvertToString(iso8601, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Timings_response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new ApiResponse<Timings_response>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Timings By City
        /// </summary>
        /// <remarks>
        /// Returns all prayer times for a specific date in a particular city.
        /// </remarks>
        /// <param name="city">A city name</param>
        /// <param name="country">A country name or 2 character alpha ISO 3166 code</param>
        /// <param name="method">A prayer times calculation method. Methods identify various schools of thought about how to compute the timings. If not specified, it defaults to the closest authority based on the location or co-ordinates specified in the API call. This parameter accepts values from 0-12 and 99, as specified below: &lt;br&gt;&lt;br&gt; Possible values:
        /// <br/>* `0` - Shia Ithna-Ansari
        /// <br/>* `1` - University of Islamic Sciences, Karachi
        /// <br/>* `2` - Islamic Society of North America
        /// <br/>* `3` - Muslim World League
        /// <br/>* `4` - Umm Al-Qura University, Makkah
        /// <br/>* `5` - Egyptian General Authority of Survey
        /// <br/>* `6` - Institute of Geophysics, University of Tehran
        /// <br/>* `7` - Gulf Region
        /// <br/>* `8` - Kuwait
        /// <br/>* `9` - Qatar
        /// <br/>* `10` - Majlis Ugama Islam Singapura, Singapore
        /// <br/>* `11` - Union Organization islamic de France
        /// <br/>* `12` - Diyanet İşleri Başkanlığı, Turkey
        /// <br/>* `13` - Spiritual Administration of Muslims of Russia
        /// <br/>* `14` - Moonsighting Committee Worldwide (also requires shafaq paramteer)
        /// <br/>* `99` - Custom. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods)</param>
        /// <param name="shafaq">Which Shafaq to use if the method is Moonsighting Commitee Worldwide. Acceptable options are 'general', 'ahmer' and 'abyad'</param>
        /// <param name="tune">Comma Separated String of integers to offset timings returned by the API in minutes. The order is `Imsak,Fajr,Sunrise,Dhuhr,Asr,Maghrib,Sunset,Isha,Midnight`. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods) for more details.</param>
        /// <param name="school">Shafi (or the standard way) or Hanafi. &lt;br /&gt;&lt;br /&gt; Possible values:
        /// <br/>* `0` - Shafi
        /// <br/>* `1` - Hanafi</param>
        /// <param name="midnightMode">Determines the method for calculating midnight &lt;br&gt;&lt;br&gt; Possible values:
        /// <br/>* `0` - Standard (Mid Sunset to Sunrise)
        /// <br/>* `1` - Jafari (Mid Sunset to Fajr)</param>
        /// <param name="timezonestring">A valid timezone name as specified on [https://php.net/manual/en/timezones.php](https://php.net/manual/en/timezones.php). &lt;br&gt; *If you do not specify this, we'll calcuate it using the co-ordinates you provide.*</param>
        /// <param name="latitudeAdjustmentMethod">Method for adjusting times at higher latitudes. For example, if you are checking timings in the UK or Sweden. &lt;br&gt;&lt;br&gt; Possible values:
        /// <br/>* `1` - Middle of the Night
        /// <br/>* `2` - One Seventh
        /// <br/>* `3` - Angle Based</param>
        /// <param name="adjustment">Number of days to adjust hijri date(s).</param>
        /// <param name="iso8601">Whether to return the prayer times in the iso8601 format. Example: true will return 2020-07-01T02:56:00+01:00 instead of 02:56</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ApiResponse<Timings_response>> V1TimingsByCityGetAsync(string? city, string? country, double? method, Shafaq11? shafaq, string? tune, School11? school, MidnightMode11? midnightMode, string? timezonestring, LatitudeAdjustmentMethod11? latitudeAdjustmentMethod, int? adjustment, bool? iso8601)
        {
            return V1TimingsByCityGetAsync(city, country, method, shafaq, tune, school, midnightMode, timezonestring, latitudeAdjustmentMethod, adjustment, iso8601, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Timings By City
        /// </summary>
        /// <remarks>
        /// Returns all prayer times for a specific date in a particular city.
        /// </remarks>
        /// <param name="city">A city name</param>
        /// <param name="country">A country name or 2 character alpha ISO 3166 code</param>
        /// <param name="method">A prayer times calculation method. Methods identify various schools of thought about how to compute the timings. If not specified, it defaults to the closest authority based on the location or co-ordinates specified in the API call. This parameter accepts values from 0-12 and 99, as specified below: &lt;br&gt;&lt;br&gt; Possible values:
        /// <br/>* `0` - Shia Ithna-Ansari
        /// <br/>* `1` - University of Islamic Sciences, Karachi
        /// <br/>* `2` - Islamic Society of North America
        /// <br/>* `3` - Muslim World League
        /// <br/>* `4` - Umm Al-Qura University, Makkah
        /// <br/>* `5` - Egyptian General Authority of Survey
        /// <br/>* `6` - Institute of Geophysics, University of Tehran
        /// <br/>* `7` - Gulf Region
        /// <br/>* `8` - Kuwait
        /// <br/>* `9` - Qatar
        /// <br/>* `10` - Majlis Ugama Islam Singapura, Singapore
        /// <br/>* `11` - Union Organization islamic de France
        /// <br/>* `12` - Diyanet İşleri Başkanlığı, Turkey
        /// <br/>* `13` - Spiritual Administration of Muslims of Russia
        /// <br/>* `14` - Moonsighting Committee Worldwide (also requires shafaq paramteer)
        /// <br/>* `99` - Custom. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods)</param>
        /// <param name="shafaq">Which Shafaq to use if the method is Moonsighting Commitee Worldwide. Acceptable options are 'general', 'ahmer' and 'abyad'</param>
        /// <param name="tune">Comma Separated String of integers to offset timings returned by the API in minutes. The order is `Imsak,Fajr,Sunrise,Dhuhr,Asr,Maghrib,Sunset,Isha,Midnight`. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods) for more details.</param>
        /// <param name="school">Shafi (or the standard way) or Hanafi. &lt;br /&gt;&lt;br /&gt; Possible values:
        /// <br/>* `0` - Shafi
        /// <br/>* `1` - Hanafi</param>
        /// <param name="midnightMode">Determines the method for calculating midnight &lt;br&gt;&lt;br&gt; Possible values:
        /// <br/>* `0` - Standard (Mid Sunset to Sunrise)
        /// <br/>* `1` - Jafari (Mid Sunset to Fajr)</param>
        /// <param name="timezonestring">A valid timezone name as specified on [https://php.net/manual/en/timezones.php](https://php.net/manual/en/timezones.php). &lt;br&gt; *If you do not specify this, we'll calcuate it using the co-ordinates you provide.*</param>
        /// <param name="latitudeAdjustmentMethod">Method for adjusting times at higher latitudes. For example, if you are checking timings in the UK or Sweden. &lt;br&gt;&lt;br&gt; Possible values:
        /// <br/>* `1` - Middle of the Night
        /// <br/>* `2` - One Seventh
        /// <br/>* `3` - Angle Based</param>
        /// <param name="adjustment">Number of days to adjust hijri date(s).</param>
        /// <param name="iso8601">Whether to return the prayer times in the iso8601 format. Example: true will return 2020-07-01T02:56:00+01:00 instead of 02:56</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ApiResponse<Timings_response>> V1TimingsByCityGetAsync(string? city, string? country, double? method, Shafaq11? shafaq, string? tune, School11? school, MidnightMode11? midnightMode, string? timezonestring, LatitudeAdjustmentMethod11? latitudeAdjustmentMethod, int? adjustment, bool? iso8601, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/timingsByCity?");
            if (city != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("city") + "=").Append(System.Uri.EscapeDataString(ConvertToString(city, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (country != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("country") + "=").Append(System.Uri.EscapeDataString(ConvertToString(country, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (method != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("method") + "=").Append(System.Uri.EscapeDataString(ConvertToString(method, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (shafaq != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("shafaq") + "=").Append(System.Uri.EscapeDataString(ConvertToString(shafaq, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (tune != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tune") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tune, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (school != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("school") + "=").Append(System.Uri.EscapeDataString(ConvertToString(school, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (midnightMode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("midnightMode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(midnightMode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (timezonestring != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timezonestring") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timezonestring, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (latitudeAdjustmentMethod != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("latitudeAdjustmentMethod") + "=").Append(System.Uri.EscapeDataString(ConvertToString(latitudeAdjustmentMethod, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (adjustment != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("adjustment") + "=").Append(System.Uri.EscapeDataString(ConvertToString(adjustment, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (iso8601 != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("iso8601") + "=").Append(System.Uri.EscapeDataString(ConvertToString(iso8601, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Timings_response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new ApiResponse<Timings_response>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Timings By City
        /// </summary>
        /// <remarks>
        /// Returns all prayer times for a specific date in a particular city.
        /// </remarks>
        /// <param name="date_or_timestamp">A date in the DD-MM-YYYY format or UNIX timestamp. Defaults to the current date if omitted.</param>
        /// <param name="city">A city name</param>
        /// <param name="country">A country name or 2 character alpha ISO 3166 code</param>
        /// <param name="method">A prayer times calculation method. Methods identify various schools of thought about how to compute the timings. If not specified, it defaults to the closest authority based on the location or co-ordinates specified in the API call. This parameter accepts values from 0-12 and 99, as specified below: &lt;br&gt;&lt;br&gt; Possible values:
        /// <br/>* `0` - Shia Ithna-Ansari
        /// <br/>* `1` - University of Islamic Sciences, Karachi
        /// <br/>* `2` - Islamic Society of North America
        /// <br/>* `3` - Muslim World League
        /// <br/>* `4` - Umm Al-Qura University, Makkah
        /// <br/>* `5` - Egyptian General Authority of Survey
        /// <br/>* `6` - Institute of Geophysics, University of Tehran
        /// <br/>* `7` - Gulf Region
        /// <br/>* `8` - Kuwait
        /// <br/>* `9` - Qatar
        /// <br/>* `10` - Majlis Ugama Islam Singapura, Singapore
        /// <br/>* `11` - Union Organization islamic de France
        /// <br/>* `12` - Diyanet İşleri Başkanlığı, Turkey
        /// <br/>* `13` - Spiritual Administration of Muslims of Russia
        /// <br/>* `14` - Moonsighting Committee Worldwide (also requires shafaq paramteer)
        /// <br/>* `99` - Custom. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods)</param>
        /// <param name="shafaq">Which Shafaq to use if the method is Moonsighting Commitee Worldwide. Acceptable options are 'general', 'ahmer' and 'abyad'</param>
        /// <param name="tune">Comma Separated String of integers to offset timings returned by the API in minutes. The order is `Imsak,Fajr,Sunrise,Dhuhr,Asr,Maghrib,Sunset,Isha,Midnight`. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods) for more details.</param>
        /// <param name="school">Shafi (or the standard way) or Hanafi. &lt;br /&gt;&lt;br /&gt; Possible values:
        /// <br/>* `0` - Shafi
        /// <br/>* `1` - Hanafi</param>
        /// <param name="midnightMode">Determines the method for calculating midnight &lt;br&gt;&lt;br&gt; Possible values:
        /// <br/>* `0` - Standard (Mid Sunset to Sunrise)
        /// <br/>* `1` - Jafari (Mid Sunset to Fajr)</param>
        /// <param name="timezonestring">A valid timezone name as specified on [https://php.net/manual/en/timezones.php](https://php.net/manual/en/timezones.php). &lt;br&gt; *If you do not specify this, we'll calcuate it using the co-ordinates you provide.*</param>
        /// <param name="latitudeAdjustmentMethod">Method for adjusting times at higher latitudes. For example, if you are checking timings in the UK or Sweden. &lt;br&gt;&lt;br&gt; Possible values:
        /// <br/>* `1` - Middle of the Night
        /// <br/>* `2` - One Seventh
        /// <br/>* `3` - Angle Based</param>
        /// <param name="adjustment">Number of days to adjust hijri date(s).</param>
        /// <param name="iso8601">Whether to return the prayer times in the iso8601 format. Example: true will return 2020-07-01T02:56:00+01:00 instead of 02:56</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ApiResponse<Timings_response>> V1TimingsByCityGetAsync(string date_or_timestamp, string? city, string? country, double? method, Shafaq12? shafaq, string? tune, School12? school, MidnightMode12? midnightMode, string? timezonestring, LatitudeAdjustmentMethod12? latitudeAdjustmentMethod, int? adjustment, bool? iso8601)
        {
            return V1TimingsByCityGetAsync(date_or_timestamp, city, country, method, shafaq, tune, school, midnightMode, timezonestring, latitudeAdjustmentMethod, adjustment, iso8601, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Timings By City
        /// </summary>
        /// <remarks>
        /// Returns all prayer times for a specific date in a particular city.
        /// </remarks>
        /// <param name="date_or_timestamp">A date in the DD-MM-YYYY format or UNIX timestamp. Defaults to the current date if omitted.</param>
        /// <param name="city">A city name</param>
        /// <param name="country">A country name or 2 character alpha ISO 3166 code</param>
        /// <param name="method">A prayer times calculation method. Methods identify various schools of thought about how to compute the timings. If not specified, it defaults to the closest authority based on the location or co-ordinates specified in the API call. This parameter accepts values from 0-12 and 99, as specified below: &lt;br&gt;&lt;br&gt; Possible values:
        /// <br/>* `0` - Shia Ithna-Ansari
        /// <br/>* `1` - University of Islamic Sciences, Karachi
        /// <br/>* `2` - Islamic Society of North America
        /// <br/>* `3` - Muslim World League
        /// <br/>* `4` - Umm Al-Qura University, Makkah
        /// <br/>* `5` - Egyptian General Authority of Survey
        /// <br/>* `6` - Institute of Geophysics, University of Tehran
        /// <br/>* `7` - Gulf Region
        /// <br/>* `8` - Kuwait
        /// <br/>* `9` - Qatar
        /// <br/>* `10` - Majlis Ugama Islam Singapura, Singapore
        /// <br/>* `11` - Union Organization islamic de France
        /// <br/>* `12` - Diyanet İşleri Başkanlığı, Turkey
        /// <br/>* `13` - Spiritual Administration of Muslims of Russia
        /// <br/>* `14` - Moonsighting Committee Worldwide (also requires shafaq paramteer)
        /// <br/>* `99` - Custom. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods)</param>
        /// <param name="shafaq">Which Shafaq to use if the method is Moonsighting Commitee Worldwide. Acceptable options are 'general', 'ahmer' and 'abyad'</param>
        /// <param name="tune">Comma Separated String of integers to offset timings returned by the API in minutes. The order is `Imsak,Fajr,Sunrise,Dhuhr,Asr,Maghrib,Sunset,Isha,Midnight`. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods) for more details.</param>
        /// <param name="school">Shafi (or the standard way) or Hanafi. &lt;br /&gt;&lt;br /&gt; Possible values:
        /// <br/>* `0` - Shafi
        /// <br/>* `1` - Hanafi</param>
        /// <param name="midnightMode">Determines the method for calculating midnight &lt;br&gt;&lt;br&gt; Possible values:
        /// <br/>* `0` - Standard (Mid Sunset to Sunrise)
        /// <br/>* `1` - Jafari (Mid Sunset to Fajr)</param>
        /// <param name="timezonestring">A valid timezone name as specified on [https://php.net/manual/en/timezones.php](https://php.net/manual/en/timezones.php). &lt;br&gt; *If you do not specify this, we'll calcuate it using the co-ordinates you provide.*</param>
        /// <param name="latitudeAdjustmentMethod">Method for adjusting times at higher latitudes. For example, if you are checking timings in the UK or Sweden. &lt;br&gt;&lt;br&gt; Possible values:
        /// <br/>* `1` - Middle of the Night
        /// <br/>* `2` - One Seventh
        /// <br/>* `3` - Angle Based</param>
        /// <param name="adjustment">Number of days to adjust hijri date(s).</param>
        /// <param name="iso8601">Whether to return the prayer times in the iso8601 format. Example: true will return 2020-07-01T02:56:00+01:00 instead of 02:56</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ApiResponse<Timings_response>> V1TimingsByCityGetAsync(string date_or_timestamp, string? city, string? country, double? method, Shafaq12? shafaq, string? tune, School12? school, MidnightMode12? midnightMode, string? timezonestring, LatitudeAdjustmentMethod12? latitudeAdjustmentMethod, int? adjustment, bool? iso8601, System.Threading.CancellationToken cancellationToken)
        {
            if (date_or_timestamp == null)
                throw new System.ArgumentNullException("date_or_timestamp");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/timingsByCity/{date_or_timestamp}?");
            urlBuilder_.Replace("{date_or_timestamp}", System.Uri.EscapeDataString(ConvertToString(date_or_timestamp, System.Globalization.CultureInfo.InvariantCulture)));
            if (city != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("city") + "=").Append(System.Uri.EscapeDataString(ConvertToString(city, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (country != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("country") + "=").Append(System.Uri.EscapeDataString(ConvertToString(country, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (method != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("method") + "=").Append(System.Uri.EscapeDataString(ConvertToString(method, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (shafaq != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("shafaq") + "=").Append(System.Uri.EscapeDataString(ConvertToString(shafaq, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (tune != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tune") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tune, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (school != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("school") + "=").Append(System.Uri.EscapeDataString(ConvertToString(school, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (midnightMode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("midnightMode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(midnightMode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (timezonestring != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timezonestring") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timezonestring, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (latitudeAdjustmentMethod != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("latitudeAdjustmentMethod") + "=").Append(System.Uri.EscapeDataString(ConvertToString(latitudeAdjustmentMethod, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (adjustment != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("adjustment") + "=").Append(System.Uri.EscapeDataString(ConvertToString(adjustment, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (iso8601 != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("iso8601") + "=").Append(System.Uri.EscapeDataString(ConvertToString(iso8601, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Timings_response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new ApiResponse<Timings_response>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class CurrentDateSuccess
    {
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Always)]
        public int Code { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Status { get; set; } = default!;

        /// <summary>
        /// Current date in the specified timezone.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"dd-mm-yyyy")]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter),"dd-MM-yyyy")]
        public System.DateTimeOffset Data { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class CurrentTimeSuccess
    {
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Always)]
        public int Code { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Status { get; set; } = default!;

        /// <summary>
        /// Current time in the specified timezone.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"hh:mm")]
        public System.TimeSpan Data { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class CurrentTimestampSuccess
    {
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Always)]
        public int Code { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Status { get; set; } = default!;

        /// <summary>
        /// Current epoch/unix timestamp in the specified timezone.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Data { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class MethodsSuccess
    {
        /// <summary>
        /// The response status code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Always)]
        public double Code { get; set; } = default!;

        /// <summary>
        /// The response status description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Status { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Methodssuccess_data Data { get; set; } = new Methodssuccess_data();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class Calendar_response
    {
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Code { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Calendar_data? Data { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class Calendar_data : System.Collections.ObjectModel.Collection<Result_item>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class Result_item
    {
        [Newtonsoft.Json.JsonProperty("timings", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Timings? Timings { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Date? Date { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("meta", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Meta? Meta { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class Timings
    {
        [Newtonsoft.Json.JsonProperty("Fajr", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Fajr { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Sunrise", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Sunrise { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Dhuhr", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Dhuhr { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Asr", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Asr { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Sunset", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Sunset { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Maghrib", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Maghrib { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Isha", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Isha { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Imsak", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Imsak { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Midnight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Midnight { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class Date
    {
        [Newtonsoft.Json.JsonProperty("readable", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Readable { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("timestamp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Timestamp { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gregorian", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Date_gregorian? Gregorian { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hijri", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Date_hijri? Hijri { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class Weekday_en
    {
        /// <summary>
        /// English name of weekday
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("en", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? En { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class Month_en
    {
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Number { get; set; } = default!;

        /// <summary>
        /// English name of the month
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("en", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? En { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class Designation_en
    {
        [Newtonsoft.Json.JsonProperty("abbreviated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Abbreviated { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("expanded", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Expanded { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class Weekday_en_ar
    {
        /// <summary>
        /// English name of weekday
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("en", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? En { get; set; } = default!;

        /// <summary>
        /// Arabic name of weekday
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ar", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Ar { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class Month_en_ar
    {
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Number { get; set; } = default!;

        /// <summary>
        /// English name of the month
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("en", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? En { get; set; } = default!;

        /// <summary>
        /// Arabic name of the month
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ar", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Ar { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class Designation_ar
    {
        [Newtonsoft.Json.JsonProperty("abbreviated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Abbreviated { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("expanded", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Expanded { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class Meta
    {
        [Newtonsoft.Json.JsonProperty("latitude", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Latitude { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("longitude", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Longitude { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("timezone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Timezone { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("method", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Method? Method { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("latitudeAdjustmentMethod", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LatitudeAdjustmentMethod { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("midnightMode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MidnightMode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("school", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string School { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("offset", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Offset? Offset { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class Method
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("params", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Method_params? Params { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class Offset
    {
        [Newtonsoft.Json.JsonProperty("Imsak", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Imsak { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Fajr", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Fajr { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Sunrise", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Sunrise { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Dhuhr", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Dhuhr { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Asr", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Asr { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Maghrib", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Maghrib { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Sunset", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Sunset { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Isha", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Isha { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Midnight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Midnight { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class Timings_response
    {
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Code { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Timing_data? Data { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class Timing_data
    {
        [Newtonsoft.Json.JsonProperty("timings", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Timings? Timings { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Date? Date { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("meta", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Meta? Meta { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class Methodssuccess_data_MWL_params
    {
        [Newtonsoft.Json.JsonProperty("Fajr", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Fajr { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Isha", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Isha { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class Methodssuccess_data_MWL_location
    {
        [Newtonsoft.Json.JsonProperty("latitude", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Latitude { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("longitude", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Longitude { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class Methodssuccess_data_MWL
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("params", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Methodssuccess_data_MWL_params? Params { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Methodssuccess_data_MWL_location? Location { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class Methodssuccess_data_ISNA_params
    {
        [Newtonsoft.Json.JsonProperty("Fajr", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Fajr { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Isha", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Isha { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class Methodssuccess_data_ISNA
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("params", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Methodssuccess_data_ISNA_params? Params { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Methodssuccess_data_MWL_location? Location { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class Methodssuccess_data_EGYPT_params
    {
        [Newtonsoft.Json.JsonProperty("Fajr", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Fajr { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Isha", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Isha { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class Methodssuccess_data_EGYPT
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("params", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Methodssuccess_data_EGYPT_params? Params { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Methodssuccess_data_MWL_location? Location { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class Methodssuccess_data_MAKKAH_params
    {
        [Newtonsoft.Json.JsonProperty("Fajr", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Fajr { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Isha", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Isha { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class Methodssuccess_data_MAKKAH
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("params", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Methodssuccess_data_MAKKAH_params? Params { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Methodssuccess_data_MWL_location? Location { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class Methodssuccess_data_KARACHI_params
    {
        [Newtonsoft.Json.JsonProperty("Fajr", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Fajr { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Isha", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Isha { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class Methodssuccess_data_KARACHI
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("params", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Methodssuccess_data_KARACHI_params? Params { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Methodssuccess_data_MWL_location? Location { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class Methodssuccess_data_TEHRAN_params
    {
        [Newtonsoft.Json.JsonProperty("Fajr", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Fajr { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Maghrib", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Maghrib { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Isha", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Isha { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Midnight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Midnight { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class Methodssuccess_data_TEHRAN
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("params", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Methodssuccess_data_TEHRAN_params? Params { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Methodssuccess_data_MWL_location? Location { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class Methodssuccess_data_JAFARI_params
    {
        [Newtonsoft.Json.JsonProperty("Fajr", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Fajr { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Maghrib", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Maghrib { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Isha", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Isha { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Midnight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Midnight { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class Methodssuccess_data_JAFARI
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("params", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Methodssuccess_data_JAFARI_params? Params { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Methodssuccess_data_MWL_location? Location { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class Methodssuccess_data_GULF_params
    {
        [Newtonsoft.Json.JsonProperty("Fajr", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Fajr { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Isha", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Isha { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class Methodssuccess_data_GULF
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("params", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Methodssuccess_data_GULF_params? Params { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Methodssuccess_data_MWL_location? Location { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class Methodssuccess_data_KUWAIT_params
    {
        [Newtonsoft.Json.JsonProperty("Fajr", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Fajr { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Isha", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Isha { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class Methodssuccess_data_KUWAIT
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("params", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Methodssuccess_data_KUWAIT_params? Params { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Methodssuccess_data_MWL_location? Location { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class Methodssuccess_data_QATAR_params
    {
        [Newtonsoft.Json.JsonProperty("Fajr", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Fajr { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Isha", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Isha { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class Methodssuccess_data_QATAR
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("params", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Methodssuccess_data_QATAR_params? Params { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Methodssuccess_data_MWL_location? Location { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class Methodssuccess_data_SINGAPORE_params
    {
        [Newtonsoft.Json.JsonProperty("Fajr", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Fajr { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Isha", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Isha { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class Methodssuccess_data_SINGAPORE
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("params", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Methodssuccess_data_SINGAPORE_params? Params { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Methodssuccess_data_MWL_location? Location { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class Methodssuccess_data_FRANCE_params
    {
        [Newtonsoft.Json.JsonProperty("Fajr", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Fajr { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Isha", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Isha { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class Methodssuccess_data_FRANCE
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("params", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Methodssuccess_data_FRANCE_params? Params { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Methodssuccess_data_MWL_location? Location { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class Methodssuccess_data_TURKEY
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("params", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Methodssuccess_data_MWL_params? Params { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Methodssuccess_data_MWL_location? Location { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class Methodssuccess_data_RUSSIA_params
    {
        [Newtonsoft.Json.JsonProperty("Fajr", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Fajr { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Isha", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Isha { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class Methodssuccess_data_RUSSIA
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("params", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Methodssuccess_data_RUSSIA_params? Params { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Methodssuccess_data_MWL_location? Location { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class Methodssuccess_data_MOONSIGHTING_params
    {
        [Newtonsoft.Json.JsonProperty("shafaq", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Shafaq { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class Methodssuccess_data_MOONSIGHTING
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("params", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Methodssuccess_data_MOONSIGHTING_params? Params { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Methodssuccess_data_MWL_location? Location { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Contains a collection of key-object mapping containing details of different prayer time calculation methods.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class Methodssuccess_data
    {
        [Newtonsoft.Json.JsonProperty("MWL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Methodssuccess_data_MWL? MWL { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("ISNA", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Methodssuccess_data_ISNA? ISNA { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("EGYPT", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Methodssuccess_data_EGYPT? EGYPT { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("MAKKAH", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Methodssuccess_data_MAKKAH? MAKKAH { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("KARACHI", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Methodssuccess_data_KARACHI? KARACHI { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("TEHRAN", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Methodssuccess_data_TEHRAN? TEHRAN { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("JAFARI", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Methodssuccess_data_JAFARI? JAFARI { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("GULF", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Methodssuccess_data_GULF? GULF { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("KUWAIT", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Methodssuccess_data_KUWAIT? KUWAIT { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("QATAR", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Methodssuccess_data_QATAR? QATAR { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SINGAPORE", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Methodssuccess_data_SINGAPORE? SINGAPORE { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FRANCE", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Methodssuccess_data_FRANCE? FRANCE { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("TURKEY", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Methodssuccess_data_TURKEY? TURKEY { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("RUSSIA", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Methodssuccess_data_RUSSIA? RUSSIA { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("MOONSIGHTING", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Methodssuccess_data_MOONSIGHTING? MOONSIGHTING { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class Date_gregorian
    {
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Date { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("format", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Format { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("day", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Day { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("weekday", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Weekday_en? Weekday { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("month", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Month_en? Month { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("year", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Year { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("designation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Designation_en? Designation { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class Date_hijri
    {
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Date { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("format", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Format { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("day", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Day { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("weekday", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Weekday_en_ar? Weekday { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("month", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Month_en_ar? Month { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("year", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Year { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("designation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Designation_ar? Designation { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("holidays", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Holidays { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class Method_params
    {
        [Newtonsoft.Json.JsonProperty("Fajr", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Fajr { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Isha", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Isha { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public enum Shafaq
    {

        [System.Runtime.Serialization.EnumMember(Value = @"general")]
        General = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ahmer")]
        Ahmer = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"abyad")]
        Abyad = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public enum School
    {

        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public enum MidnightMode
    {

        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public enum LatitudeAdjustmentMethod
    {

        _1 = 1,

        _2 = 2,

        _3 = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public enum Shafaq2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"general")]
        General = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ahmer")]
        Ahmer = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"abyad")]
        Abyad = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public enum School2
    {

        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public enum MidnightMode2
    {

        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public enum LatitudeAdjustmentMethod2
    {

        _1 = 1,

        _2 = 2,

        _3 = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public enum Shafaq3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"general")]
        General = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ahmer")]
        Ahmer = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"abyad")]
        Abyad = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public enum School3
    {

        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public enum MidnightMode3
    {

        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public enum LatitudeAdjustmentMethod3
    {

        _1 = 1,

        _2 = 2,

        _3 = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public enum Shafaq4
    {

        [System.Runtime.Serialization.EnumMember(Value = @"general")]
        General = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ahmer")]
        Ahmer = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"abyad")]
        Abyad = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public enum School4
    {

        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public enum MidnightMode4
    {

        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public enum LatitudeAdjustmentMethod4
    {

        _1 = 1,

        _2 = 2,

        _3 = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public enum Shafaq5
    {

        [System.Runtime.Serialization.EnumMember(Value = @"general")]
        General = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ahmer")]
        Ahmer = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"abyad")]
        Abyad = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public enum School5
    {

        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public enum MidnightMode5
    {

        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public enum LatitudeAdjustmentMethod5
    {

        _1 = 1,

        _2 = 2,

        _3 = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public enum Shafaq6
    {

        [System.Runtime.Serialization.EnumMember(Value = @"general")]
        General = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ahmer")]
        Ahmer = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"abyad")]
        Abyad = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public enum School6
    {

        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public enum MidnightMode6
    {

        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public enum LatitudeAdjustmentMethod6
    {

        _1 = 1,

        _2 = 2,

        _3 = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public enum Shafaq7
    {

        [System.Runtime.Serialization.EnumMember(Value = @"general")]
        General = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ahmer")]
        Ahmer = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"abyad")]
        Abyad = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public enum School7
    {

        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public enum MidnightMode7
    {

        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public enum LatitudeAdjustmentMethod7
    {

        _1 = 1,

        _2 = 2,

        _3 = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public enum Shafaq8
    {

        [System.Runtime.Serialization.EnumMember(Value = @"general")]
        General = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ahmer")]
        Ahmer = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"abyad")]
        Abyad = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public enum School8
    {

        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public enum MidnightMode8
    {

        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public enum LatitudeAdjustmentMethod8
    {

        _1 = 1,

        _2 = 2,

        _3 = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public enum Shafaq9
    {

        [System.Runtime.Serialization.EnumMember(Value = @"general")]
        General = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ahmer")]
        Ahmer = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"abyad")]
        Abyad = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public enum School9
    {

        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public enum MidnightMode9
    {

        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public enum LatitudeAdjustmentMethod9
    {

        _1 = 1,

        _2 = 2,

        _3 = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public enum Shafaq10
    {

        [System.Runtime.Serialization.EnumMember(Value = @"general")]
        General = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ahmer")]
        Ahmer = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"abyad")]
        Abyad = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public enum School10
    {

        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public enum MidnightMode10
    {

        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public enum LatitudeAdjustmentMethod10
    {

        _1 = 1,

        _2 = 2,

        _3 = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public enum Shafaq11
    {

        [System.Runtime.Serialization.EnumMember(Value = @"general")]
        General = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ahmer")]
        Ahmer = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"abyad")]
        Abyad = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public enum School11
    {

        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public enum MidnightMode11
    {

        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public enum LatitudeAdjustmentMethod11
    {

        _1 = 1,

        _2 = 2,

        _3 = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public enum Shafaq12
    {

        [System.Runtime.Serialization.EnumMember(Value = @"general")]
        General = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ahmer")]
        Ahmer = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"abyad")]
        Abyad = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public enum School12
    {

        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public enum MidnightMode12
    {

        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public enum LatitudeAdjustmentMethod12
    {

        _1 = 1,

        _2 = 2,

        _3 = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    internal class DateFormatConverter : Newtonsoft.Json.Converters.IsoDateTimeConverter
    {
        public DateFormatConverter()
        {
            DateTimeFormat = "yyyy-MM-dd";
        }
        public DateFormatConverter(string format)
        {
            DateTimeFormat = format;
        }
    }


    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class ApiResponse
    {
        public int StatusCode { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            StatusCode = statusCode;
            Headers = headers;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class ApiResponse<TResult> : ApiResponse
    {
        public TResult Result { get; private set; }

        public ApiResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result)
            : base(statusCode, headers)
        {
            Result = result;
        }
    }


    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string? Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string? response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception? innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string? response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception? innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603