{
  "runtime": "NetCore21",
  "defaultVariables": null,
  "documentGenerator": {
    "fromDocument": {
      "json": "{\n  \"openapi\" : \"3.0.3\",\n  \"info\" : {\n    \"title\" : \"Islamic Network - Prayer Times API\",\n    \"description\" : \"# Introduction\\n\\nA RESTful API to get islamic prayer times for a given day, month or year.\\n\\n## Note \\n\\nThe API has several endpoints to assist developers. All the endpoints return JSON and are available over `http` and `https`.\\n\\nThis documentation is incomplete, and currently a work in progress. The full documentation can be accessed [here](https://aladhan.com/prayer-times-api).\\n\\n**NOTE: If you are using this API, please sign up to the developer mailing list [here](https://aladhan.com/contact) so you can be informed of any updates or scheduled maintenance to the API.**\\n\\n## Contributing\\n\\nThe following links may be useful if interested in contributing:\\n- [Patreon](https://www.patreon.com/islamicnetwork/)\\n- [API Codebase](https://github.com/islamic-network/api.aladhan.com)\\n- [OpenAPI Documentation](https://github.com/islamic-network/openapi)\\n- [Islamic Network Website (Current Documentation)](https://aladhan.com/)\\n\\nDonations to our [patreaon](https://www.patreon.com/islamicnetwork/) are appreciated and used to pay for cost of the cluster that provides the Islamic Network APIs (this includes the AlAdhan, AlQuran APIs and the Masjid Project).\\n\\nIf you have any suggestions or would like to say something, you can get in touch by visiting the Islamic Network Community at https://community.islamic.network, emailing `support@islamic.network` or by joining the [Islamic Network Discord server](https://discord.gg/FwUy69M).\\n\",\n    \"version\" : \"1.0.0\"\n  },\n  \"servers\" : [ {\n    \"url\" : \"http://api.aladhan.com\"\n  }, {\n    \"url\" : \"https://api.aladhan.com\"\n  } ],\n  \"tags\" : [ {\n    \"name\" : \"Current Date/Time\"\n  }, {\n    \"name\" : \"Prayer Times Methods\"\n  } ],\n  \"paths\" : {\n    \"/v1/currentDate\" : {\n      \"summary\" : \"Current Date\",\n      \"get\" : {\n        \"tags\" : [ \"Current Date/Time\" ],\n        \"summary\" : \"Current Date\",\n        \"description\" : \"Returns the current date for the specified time zone.\\n\",\n        \"parameters\" : [ {\n          \"name\" : \"zone\",\n          \"in\" : \"query\",\n          \"description\" : \"A valid timezone as specified [here](http://php.net/manual/en/timezones.php).\",\n          \"required\" : true,\n          \"schema\" : {\n            \"type\" : \"string\",\n            \"example\" : \"Europe/London\"\n          }\n        } ],\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"Success\",\n            \"content\" : {\n              \"application/json\" : {\n                \"schema\" : {\n                  \"$ref\" : \"#/components/schemas/current-date-success\"\n                },\n                \"example\" : {\n                  \"code\" : 200,\n                  \"status\" : \"OK\",\n                  \"data\" : \"23-08-2017\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/v1/currentTime\" : {\n      \"summary\" : \"Current Time\",\n      \"get\" : {\n        \"tags\" : [ \"Current Date/Time\" ],\n        \"summary\" : \"Current Time\",\n        \"description\" : \"Returns the current time for the specified time zone.\\n\",\n        \"parameters\" : [ {\n          \"name\" : \"zone\",\n          \"in\" : \"query\",\n          \"description\" : \"A valid timezone as specified [here](http://php.net/manual/en/timezones.php).\",\n          \"required\" : true,\n          \"schema\" : {\n            \"type\" : \"string\",\n            \"example\" : \"Europe/London\"\n          }\n        } ],\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"Success\",\n            \"content\" : {\n              \"application/json\" : {\n                \"schema\" : {\n                  \"$ref\" : \"#/components/schemas/current-time-success\"\n                },\n                \"example\" : {\n                  \"code\" : 200,\n                  \"status\" : \"OK\",\n                  \"data\" : \"05:32\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/v1/currentTimestamp\" : {\n      \"summary\" : \"Current Timestamp\",\n      \"get\" : {\n        \"tags\" : [ \"Current Date/Time\" ],\n        \"summary\" : \"Current Timestamp\",\n        \"description\" : \"Returns the current [unix/epoch](https://en.wikipedia.org/wiki/Unix_time) timestamp for the specified time zone.\\n\",\n        \"parameters\" : [ {\n          \"name\" : \"zone\",\n          \"in\" : \"query\",\n          \"description\" : \"A valid timezone as specified [here](http://php.net/manual/en/timezones.php).\",\n          \"required\" : true,\n          \"schema\" : {\n            \"type\" : \"string\",\n            \"example\" : \"Europe/London\"\n          }\n        } ],\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"Success\",\n            \"content\" : {\n              \"application/json\" : {\n                \"schema\" : {\n                  \"$ref\" : \"#/components/schemas/current-timestamp-success\"\n                },\n                \"example\" : {\n                  \"code\" : 200,\n                  \"status\" : \"OK\",\n                  \"data\" : \"1503495668\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/v1/methods\" : {\n      \"get\" : {\n        \"tags\" : [ \"Prayer Times Methods\" ],\n        \"summary\" : \"Prayer Times Methods\",\n        \"description\" : \"Returns all the prayer times calculation methods & details supported by Islamic Network API. \\\\\\n\\nFurthermore, [you can use customize the methods & create your own if needed](https://aladhan.com/calculation-methods).\\n\",\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"Success\",\n            \"content\" : {\n              \"application/json\" : {\n                \"schema\" : {\n                  \"$ref\" : \"#/components/schemas/methods-success\"\n                },\n                \"example\" : {\n                  \"$ref\" : \"./success-example.json\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/v1/calendar\" : {\n      \"get\" : {\n        \"tags\" : [ \"Monthly / Annual Calendar\" ],\n        \"summary\" : \"Prayer Times Calendar\",\n        \"description\" : \"Returns all prayer times for a specific calendar month.\",\n        \"parameters\" : [ {\n          \"name\" : \"latitude\",\n          \"in\" : \"query\",\n          \"description\" : \"The decimal value for the latitude co-ordinate of the location you want the time computed for.\\n\",\n          \"schema\" : {\n            \"type\" : \"number\",\n            \"example\" : 51.75865125\n          }\n        }, {\n          \"name\" : \"longitude\",\n          \"in\" : \"query\",\n          \"description\" : \"The decimal value for the longitude co-ordinate of the location you want the time computed for.\\n\",\n          \"schema\" : {\n            \"type\" : \"number\",\n            \"example\" : -1.25387785\n          }\n        }, {\n          \"name\" : \"month\",\n          \"in\" : \"query\",\n          \"description\" : \"A gregorian calendar month\\n\",\n          \"schema\" : {\n            \"type\" : \"number\",\n            \"example\" : 8\n          }\n        }, {\n          \"name\" : \"year\",\n          \"in\" : \"query\",\n          \"description\" : \"A gregorian calendar year\\n\",\n          \"schema\" : {\n            \"type\" : \"number\",\n            \"example\" : 2022\n          }\n        }, {\n          \"name\" : \"annual\",\n          \"in\" : \"query\",\n          \"description\" : \"If true, month parameter will be ignored and the calendar for the entire year will be returned\\n\",\n          \"schema\" : {\n            \"type\" : \"boolean\",\n            \"example\" : false,\n            \"default\" : false\n          }\n        }, {\n          \"name\" : \"method\",\n          \"in\" : \"query\",\n          \"description\" : \"A prayer times calculation method. Methods identify various schools of thought about how to compute the timings. If not specified, it defaults to the closest authority based on the location or co-ordinates specified in the API call. This parameter accepts values from 0-12 and 99, as specified below: <br><br> Possible values:\\n* `0` - Shia Ithna-Ansari\\n* `1` - University of Islamic Sciences, Karachi\\n* `2` - Islamic Society of North America\\n* `3` - Muslim World League\\n* `4` - Umm Al-Qura University, Makkah\\n* `5` - Egyptian General Authority of Survey\\n* `6` - Institute of Geophysics, University of Tehran\\n* `7` - Gulf Region\\n* `8` - Kuwait\\n* `9` - Qatar\\n* `10` - Majlis Ugama Islam Singapura, Singapore\\n* `11` - Union Organization islamic de France\\n* `12` - Diyanet İşleri Başkanlığı, Turkey\\n* `13` - Spiritual Administration of Muslims of Russia\\n* `14` - Moonsighting Committee Worldwide (also requires shafaq paramteer)\\n* `99` - Custom. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods)\\n\",\n          \"schema\" : {\n            \"type\" : \"number\",\n            \"example\" : 4,\n            \"default\" : 0,\n            \"enum\" : [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 99 ]\n          }\n        }, {\n          \"name\" : \"shafaq\",\n          \"in\" : \"query\",\n          \"description\" : \"Which Shafaq to use if the method is Moonsighting Commitee Worldwide. Acceptable options are 'general', 'ahmer' and 'abyad'\\n\",\n          \"schema\" : {\n            \"type\" : \"string\",\n            \"example\" : \"general\",\n            \"default\" : \"general\",\n            \"enum\" : [ \"general\", \"ahmer\", \"abyad\" ]\n          }\n        }, {\n          \"name\" : \"tune\",\n          \"in\" : \"query\",\n          \"description\" : \"Comma Separated String of integers to offset timings returned by the API in minutes. The order is `Imsak,Fajr,Sunrise,Dhuhr,Asr,Maghrib,Sunset,Isha,Midnight`. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods) for more details.\\n\",\n          \"schema\" : {\n            \"type\" : \"string\",\n            \"example\" : \"5,3,5,7,9,-1,0,8,-6\"\n          }\n        }, {\n          \"name\" : \"school\",\n          \"in\" : \"query\",\n          \"description\" : \"Shafi (or the standard way) or Hanafi. <br /><br /> Possible values:\\n* `0` - Shafi\\n* `1` - Hanafi\\n\",\n          \"schema\" : {\n            \"type\" : \"integer\",\n            \"default\" : 0,\n            \"enum\" : [ 0, 1 ]\n          }\n        }, {\n          \"name\" : \"midnightMode\",\n          \"in\" : \"query\",\n          \"description\" : \"Determines the method for calculating midnight <br><br> Possible values:\\n* `0` - Standard (Mid Sunset to Sunrise)\\n* `1` - Jafari (Mid Sunset to Fajr)\\n\",\n          \"schema\" : {\n            \"type\" : \"integer\",\n            \"default\" : 0,\n            \"enum\" : [ 0, 1 ]\n          }\n        }, {\n          \"name\" : \"timezonestring\",\n          \"in\" : \"query\",\n          \"description\" : \"A valid timezone name as specified on [https://php.net/manual/en/timezones.php](https://php.net/manual/en/timezones.php). <br> *If you do not specify this, we'll calcuate it using the co-ordinates you provide.*\\n\",\n          \"schema\" : {\n            \"type\" : \"string\",\n            \"example\" : \"Europe/London\"\n          }\n        }, {\n          \"name\" : \"latitudeAdjustmentMethod\",\n          \"in\" : \"query\",\n          \"description\" : \"Method for adjusting times at higher latitudes. For example, if you are checking timings in the UK or Sweden. <br><br> Possible values:\\n* `1` - Middle of the Night\\n* `2` - One Seventh\\n* `3` - Angle Based\\n\",\n          \"schema\" : {\n            \"type\" : \"integer\",\n            \"enum\" : [ 1, 2, 3 ]\n          }\n        }, {\n          \"name\" : \"adjustment\",\n          \"in\" : \"query\",\n          \"description\" : \"Number of days to adjust hijri date(s).\\n\",\n          \"schema\" : {\n            \"type\" : \"integer\",\n            \"example\" : -1\n          }\n        }, {\n          \"name\" : \"iso8601\",\n          \"in\" : \"query\",\n          \"description\" : \"Whether to return the prayer times in the iso8601 format. Example: true will return 2020-07-01T02:56:00+01:00 instead of 02:56\\n\",\n          \"schema\" : {\n            \"type\" : \"boolean\",\n            \"default\" : false\n          }\n        } ],\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"OK\",\n            \"content\" : {\n              \"application/json\" : {\n                \"schema\" : {\n                  \"$ref\" : \"#/components/schemas/calendar_response\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/v1/calendarByAddress\" : {\n      \"get\" : {\n        \"tags\" : [ \"Monthly / Annual Calendar\" ],\n        \"summary\" : \"Prayer Times Calendar by address\",\n        \"description\" : \"Returns all prayer times for a specific calendar month at a particular address.\",\n        \"parameters\" : [ {\n          \"name\" : \"address\",\n          \"in\" : \"query\",\n          \"description\" : \"An address string\\n\",\n          \"schema\" : {\n            \"type\" : \"string\",\n            \"example\" : \"1420 Austin Bluffs Parkway, Colorado Springs, CO\"\n          }\n        }, {\n          \"name\" : \"month\",\n          \"in\" : \"query\",\n          \"description\" : \"A gregorian calendar month\\n\",\n          \"schema\" : {\n            \"type\" : \"number\",\n            \"example\" : 8\n          }\n        }, {\n          \"name\" : \"year\",\n          \"in\" : \"query\",\n          \"description\" : \"A gregorian calendar year\\n\",\n          \"schema\" : {\n            \"type\" : \"number\",\n            \"example\" : 2022\n          }\n        }, {\n          \"name\" : \"annual\",\n          \"in\" : \"query\",\n          \"description\" : \"If true, month parameter will be ignored and the calendar for the entire year will be returned\\n\",\n          \"schema\" : {\n            \"type\" : \"boolean\",\n            \"example\" : false,\n            \"default\" : false\n          }\n        }, {\n          \"name\" : \"method\",\n          \"in\" : \"query\",\n          \"description\" : \"A prayer times calculation method. Methods identify various schools of thought about how to compute the timings. If not specified, it defaults to the closest authority based on the location or co-ordinates specified in the API call. This parameter accepts values from 0-12 and 99, as specified below: <br><br> Possible values:\\n* `0` - Shia Ithna-Ansari\\n* `1` - University of Islamic Sciences, Karachi\\n* `2` - Islamic Society of North America\\n* `3` - Muslim World League\\n* `4` - Umm Al-Qura University, Makkah\\n* `5` - Egyptian General Authority of Survey\\n* `6` - Institute of Geophysics, University of Tehran\\n* `7` - Gulf Region\\n* `8` - Kuwait\\n* `9` - Qatar\\n* `10` - Majlis Ugama Islam Singapura, Singapore\\n* `11` - Union Organization islamic de France\\n* `12` - Diyanet İşleri Başkanlığı, Turkey\\n* `13` - Spiritual Administration of Muslims of Russia\\n* `14` - Moonsighting Committee Worldwide (also requires shafaq paramteer)\\n* `99` - Custom. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods)\\n\",\n          \"schema\" : {\n            \"type\" : \"number\",\n            \"example\" : 4,\n            \"default\" : 0,\n            \"enum\" : [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 99 ]\n          }\n        }, {\n          \"name\" : \"shafaq\",\n          \"in\" : \"query\",\n          \"description\" : \"Which Shafaq to use if the method is Moonsighting Commitee Worldwide. Acceptable options are 'general', 'ahmer' and 'abyad'\\n\",\n          \"schema\" : {\n            \"type\" : \"string\",\n            \"example\" : \"general\",\n            \"default\" : \"general\",\n            \"enum\" : [ \"general\", \"ahmer\", \"abyad\" ]\n          }\n        }, {\n          \"name\" : \"tune\",\n          \"in\" : \"query\",\n          \"description\" : \"Comma Separated String of integers to offset timings returned by the API in minutes. The order is `Imsak,Fajr,Sunrise,Dhuhr,Asr,Maghrib,Sunset,Isha,Midnight`. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods) for more details.\\n\",\n          \"schema\" : {\n            \"type\" : \"string\",\n            \"example\" : \"5,3,5,7,9,-1,0,8,-6\"\n          }\n        }, {\n          \"name\" : \"school\",\n          \"in\" : \"query\",\n          \"description\" : \"Shafi (or the standard way) or Hanafi. <br /><br /> Possible values:\\n* `0` - Shafi\\n* `1` - Hanafi\\n\",\n          \"schema\" : {\n            \"type\" : \"integer\",\n            \"default\" : 0,\n            \"enum\" : [ 0, 1 ]\n          }\n        }, {\n          \"name\" : \"midnightMode\",\n          \"in\" : \"query\",\n          \"description\" : \"Determines the method for calculating midnight <br><br> Possible values:\\n* `0` - Standard (Mid Sunset to Sunrise)\\n* `1` - Jafari (Mid Sunset to Fajr)\\n\",\n          \"schema\" : {\n            \"type\" : \"integer\",\n            \"default\" : 0,\n            \"enum\" : [ 0, 1 ]\n          }\n        }, {\n          \"name\" : \"latitudeAdjustmentMethod\",\n          \"in\" : \"query\",\n          \"description\" : \"Method for adjusting times at higher latitudes. For example, if you are checking timings in the UK or Sweden. <br><br> Possible values:\\n* `1` - Middle of the Night\\n* `2` - One Seventh\\n* `3` - Angle Based\\n\",\n          \"schema\" : {\n            \"type\" : \"integer\",\n            \"enum\" : [ 1, 2, 3 ]\n          }\n        }, {\n          \"name\" : \"adjustment\",\n          \"in\" : \"query\",\n          \"description\" : \"Number of days to adjust hijri date(s).\\n\",\n          \"schema\" : {\n            \"type\" : \"integer\",\n            \"example\" : -1\n          }\n        }, {\n          \"name\" : \"iso8601\",\n          \"in\" : \"query\",\n          \"description\" : \"Whether to return the prayer times in the iso8601 format. Example: true will return 2020-07-01T02:56:00+01:00 instead of 02:56\\n\",\n          \"schema\" : {\n            \"type\" : \"boolean\",\n            \"default\" : false\n          }\n        } ],\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"OK\",\n            \"content\" : {\n              \"application/json\" : {\n                \"schema\" : {\n                  \"$ref\" : \"#/components/schemas/calendar_response\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/v1/calendarByCity\" : {\n      \"get\" : {\n        \"tags\" : [ \"Monthly / Annual Calendar\" ],\n        \"summary\" : \"Prayer Times Calendar by city\",\n        \"description\" : \"Returns all prayer times for a specific calendar month by City.\",\n        \"parameters\" : [ {\n          \"name\" : \"city\",\n          \"in\" : \"query\",\n          \"description\" : \"A city name\\n\",\n          \"schema\" : {\n            \"type\" : \"string\",\n            \"example\" : \"London\"\n          }\n        }, {\n          \"name\" : \"country\",\n          \"in\" : \"query\",\n          \"description\" : \"A country name or 2 character alpha ISO 3166 code\\n\",\n          \"schema\" : {\n            \"type\" : \"string\",\n            \"example\" : \"GB\"\n          }\n        }, {\n          \"name\" : \"month\",\n          \"in\" : \"query\",\n          \"description\" : \"A gregorian calendar month\\n\",\n          \"schema\" : {\n            \"type\" : \"number\",\n            \"example\" : 8\n          }\n        }, {\n          \"name\" : \"year\",\n          \"in\" : \"query\",\n          \"description\" : \"A gregorian calendar year\\n\",\n          \"schema\" : {\n            \"type\" : \"number\",\n            \"example\" : 2022\n          }\n        }, {\n          \"name\" : \"annual\",\n          \"in\" : \"query\",\n          \"description\" : \"If true, month parameter will be ignored and the calendar for the entire year will be returned\\n\",\n          \"schema\" : {\n            \"type\" : \"boolean\",\n            \"example\" : false,\n            \"default\" : false\n          }\n        }, {\n          \"name\" : \"method\",\n          \"in\" : \"query\",\n          \"description\" : \"A prayer times calculation method. Methods identify various schools of thought about how to compute the timings. If not specified, it defaults to the closest authority based on the location or co-ordinates specified in the API call. This parameter accepts values from 0-12 and 99, as specified below: <br><br> Possible values:\\n* `0` - Shia Ithna-Ansari\\n* `1` - University of Islamic Sciences, Karachi\\n* `2` - Islamic Society of North America\\n* `3` - Muslim World League\\n* `4` - Umm Al-Qura University, Makkah\\n* `5` - Egyptian General Authority of Survey\\n* `6` - Institute of Geophysics, University of Tehran\\n* `7` - Gulf Region\\n* `8` - Kuwait\\n* `9` - Qatar\\n* `10` - Majlis Ugama Islam Singapura, Singapore\\n* `11` - Union Organization islamic de France\\n* `12` - Diyanet İşleri Başkanlığı, Turkey\\n* `13` - Spiritual Administration of Muslims of Russia\\n* `14` - Moonsighting Committee Worldwide (also requires shafaq paramteer)\\n* `99` - Custom. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods)\\n\",\n          \"schema\" : {\n            \"type\" : \"number\",\n            \"example\" : 4,\n            \"default\" : 0,\n            \"enum\" : [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 99 ]\n          }\n        }, {\n          \"name\" : \"shafaq\",\n          \"in\" : \"query\",\n          \"description\" : \"Which Shafaq to use if the method is Moonsighting Commitee Worldwide. Acceptable options are 'general', 'ahmer' and 'abyad'\\n\",\n          \"schema\" : {\n            \"type\" : \"string\",\n            \"example\" : \"general\",\n            \"default\" : \"general\",\n            \"enum\" : [ \"general\", \"ahmer\", \"abyad\" ]\n          }\n        }, {\n          \"name\" : \"tune\",\n          \"in\" : \"query\",\n          \"description\" : \"Comma Separated String of integers to offset timings returned by the API in minutes. The order is `Imsak,Fajr,Sunrise,Dhuhr,Asr,Maghrib,Sunset,Isha,Midnight`. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods) for more details.\\n\",\n          \"schema\" : {\n            \"type\" : \"string\",\n            \"example\" : \"5,3,5,7,9,-1,0,8,-6\"\n          }\n        }, {\n          \"name\" : \"school\",\n          \"in\" : \"query\",\n          \"description\" : \"Shafi (or the standard way) or Hanafi. <br /><br /> Possible values:\\n* `0` - Shafi\\n* `1` - Hanafi\\n\",\n          \"schema\" : {\n            \"type\" : \"integer\",\n            \"default\" : 0,\n            \"enum\" : [ 0, 1 ]\n          }\n        }, {\n          \"name\" : \"midnightMode\",\n          \"in\" : \"query\",\n          \"description\" : \"Determines the method for calculating midnight <br><br> Possible values:\\n* `0` - Standard (Mid Sunset to Sunrise)\\n* `1` - Jafari (Mid Sunset to Fajr)\\n\",\n          \"schema\" : {\n            \"type\" : \"integer\",\n            \"default\" : 0,\n            \"enum\" : [ 0, 1 ]\n          }\n        }, {\n          \"name\" : \"latitudeAdjustmentMethod\",\n          \"in\" : \"query\",\n          \"description\" : \"Method for adjusting times at higher latitudes. For example, if you are checking timings in the UK or Sweden. <br><br> Possible values:\\n* `1` - Middle of the Night\\n* `2` - One Seventh\\n* `3` - Angle Based\\n\",\n          \"schema\" : {\n            \"type\" : \"integer\",\n            \"enum\" : [ 1, 2, 3 ]\n          }\n        }, {\n          \"name\" : \"adjustment\",\n          \"in\" : \"query\",\n          \"description\" : \"Number of days to adjust hijri date(s).\\n\",\n          \"schema\" : {\n            \"type\" : \"integer\",\n            \"example\" : -1\n          }\n        }, {\n          \"name\" : \"iso8601\",\n          \"in\" : \"query\",\n          \"description\" : \"Whether to return the prayer times in the iso8601 format. Example: true will return 2020-07-01T02:56:00+01:00 instead of 02:56\\n\",\n          \"schema\" : {\n            \"type\" : \"boolean\",\n            \"default\" : false\n          }\n        } ],\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"OK\",\n            \"content\" : {\n              \"application/json\" : {\n                \"schema\" : {\n                  \"$ref\" : \"#/components/schemas/calendar_response\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/v1/hijriCalendar\" : {\n      \"get\" : {\n        \"tags\" : [ \"Monthly / Annual Calendar\" ],\n        \"summary\" : \"Prayer Times Calendar\",\n        \"description\" : \"Returns all prayer times for a specific calendar month.\",\n        \"parameters\" : [ {\n          \"name\" : \"latitude\",\n          \"in\" : \"query\",\n          \"description\" : \"The decimal value for the latitude co-ordinate of the location you want the time computed for.\\n\",\n          \"schema\" : {\n            \"type\" : \"number\",\n            \"example\" : 51.75865125\n          }\n        }, {\n          \"name\" : \"longitude\",\n          \"in\" : \"query\",\n          \"description\" : \"The decimal value for the longitude co-ordinate of the location you want the time computed for.\\n\",\n          \"schema\" : {\n            \"type\" : \"number\",\n            \"example\" : -1.25387785\n          }\n        }, {\n          \"name\" : \"month\",\n          \"in\" : \"query\",\n          \"description\" : \"A hijri calendar month\\n\",\n          \"schema\" : {\n            \"type\" : \"number\",\n            \"example\" : 8\n          }\n        }, {\n          \"name\" : \"year\",\n          \"in\" : \"query\",\n          \"description\" : \"A gregorian calendar year\\n\",\n          \"schema\" : {\n            \"type\" : \"number\",\n            \"example\" : 2022\n          }\n        }, {\n          \"name\" : \"annual\",\n          \"in\" : \"query\",\n          \"description\" : \"If true, month parameter will be ignored and the calendar for the entire year will be returned\\n\",\n          \"schema\" : {\n            \"type\" : \"boolean\",\n            \"example\" : false,\n            \"default\" : false\n          }\n        }, {\n          \"name\" : \"method\",\n          \"in\" : \"query\",\n          \"description\" : \"A prayer times calculation method. Methods identify various schools of thought about how to compute the timings. If not specified, it defaults to the closest authority based on the location or co-ordinates specified in the API call. This parameter accepts values from 0-12 and 99, as specified below: <br><br> Possible values:\\n* `0` - Shia Ithna-Ansari\\n* `1` - University of Islamic Sciences, Karachi\\n* `2` - Islamic Society of North America\\n* `3` - Muslim World League\\n* `4` - Umm Al-Qura University, Makkah\\n* `5` - Egyptian General Authority of Survey\\n* `6` - Institute of Geophysics, University of Tehran\\n* `7` - Gulf Region\\n* `8` - Kuwait\\n* `9` - Qatar\\n* `10` - Majlis Ugama Islam Singapura, Singapore\\n* `11` - Union Organization islamic de France\\n* `12` - Diyanet İşleri Başkanlığı, Turkey\\n* `13` - Spiritual Administration of Muslims of Russia\\n* `14` - Moonsighting Committee Worldwide (also requires shafaq paramteer)\\n* `99` - Custom. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods)\\n\",\n          \"schema\" : {\n            \"type\" : \"number\",\n            \"example\" : 4,\n            \"default\" : 0,\n            \"enum\" : [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 99 ]\n          }\n        }, {\n          \"name\" : \"shafaq\",\n          \"in\" : \"query\",\n          \"description\" : \"Which Shafaq to use if the method is Moonsighting Commitee Worldwide. Acceptable options are 'general', 'ahmer' and 'abyad'\\n\",\n          \"schema\" : {\n            \"type\" : \"string\",\n            \"example\" : \"general\",\n            \"default\" : \"general\",\n            \"enum\" : [ \"general\", \"ahmer\", \"abyad\" ]\n          }\n        }, {\n          \"name\" : \"tune\",\n          \"in\" : \"query\",\n          \"description\" : \"Comma Separated String of integers to offset timings returned by the API in minutes. The order is `Imsak,Fajr,Sunrise,Dhuhr,Asr,Maghrib,Sunset,Isha,Midnight`. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods) for more details.\\n\",\n          \"schema\" : {\n            \"type\" : \"string\",\n            \"example\" : \"5,3,5,7,9,-1,0,8,-6\"\n          }\n        }, {\n          \"name\" : \"school\",\n          \"in\" : \"query\",\n          \"description\" : \"Shafi (or the standard way) or Hanafi. <br /><br /> Possible values:\\n* `0` - Shafi\\n* `1` - Hanafi\\n\",\n          \"schema\" : {\n            \"type\" : \"integer\",\n            \"default\" : 0,\n            \"enum\" : [ 0, 1 ]\n          }\n        }, {\n          \"name\" : \"midnightMode\",\n          \"in\" : \"query\",\n          \"description\" : \"Determines the method for calculating midnight <br><br> Possible values:\\n* `0` - Standard (Mid Sunset to Sunrise)\\n* `1` - Jafari (Mid Sunset to Fajr)\\n\",\n          \"schema\" : {\n            \"type\" : \"integer\",\n            \"default\" : 0,\n            \"enum\" : [ 0, 1 ]\n          }\n        }, {\n          \"name\" : \"timezonestring\",\n          \"in\" : \"query\",\n          \"description\" : \"A valid timezone name as specified on [https://php.net/manual/en/timezones.php](https://php.net/manual/en/timezones.php). <br> *If you do not specify this, we'll calcuate it using the co-ordinates you provide.*\\n\",\n          \"schema\" : {\n            \"type\" : \"string\",\n            \"example\" : \"Europe/London\"\n          }\n        }, {\n          \"name\" : \"latitudeAdjustmentMethod\",\n          \"in\" : \"query\",\n          \"description\" : \"Method for adjusting times at higher latitudes. For example, if you are checking timings in the UK or Sweden. <br><br> Possible values:\\n* `1` - Middle of the Night\\n* `2` - One Seventh\\n* `3` - Angle Based\\n\",\n          \"schema\" : {\n            \"type\" : \"integer\",\n            \"enum\" : [ 1, 2, 3 ]\n          }\n        }, {\n          \"name\" : \"adjustment\",\n          \"in\" : \"query\",\n          \"description\" : \"Number of days to adjust hijri date(s).\\n\",\n          \"schema\" : {\n            \"type\" : \"integer\",\n            \"example\" : -1\n          }\n        }, {\n          \"name\" : \"iso8601\",\n          \"in\" : \"query\",\n          \"description\" : \"Whether to return the prayer times in the iso8601 format. Example: true will return 2020-07-01T02:56:00+01:00 instead of 02:56\\n\",\n          \"schema\" : {\n            \"type\" : \"boolean\",\n            \"default\" : false\n          }\n        } ],\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"OK\",\n            \"content\" : {\n              \"application/json\" : {\n                \"schema\" : {\n                  \"$ref\" : \"#/components/schemas/calendar_response\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/v1/hijriCalendarByAddress\" : {\n      \"get\" : {\n        \"tags\" : [ \"Monthly / Annual Calendar\" ],\n        \"summary\" : \"Prayer Times Hijri Calendar by address\",\n        \"description\" : \"Returns all prayer times for a specific Hijri calendar month at a particular address.\",\n        \"parameters\" : [ {\n          \"name\" : \"latitude\",\n          \"in\" : \"query\",\n          \"description\" : \"The decimal value for the latitude co-ordinate of the location you want the time computed for.\\n\",\n          \"schema\" : {\n            \"type\" : \"number\",\n            \"example\" : 51.75865125\n          }\n        }, {\n          \"name\" : \"longitude\",\n          \"in\" : \"query\",\n          \"description\" : \"The decimal value for the longitude co-ordinate of the location you want the time computed for.\\n\",\n          \"schema\" : {\n            \"type\" : \"number\",\n            \"example\" : -1.25387785\n          }\n        }, {\n          \"name\" : \"month\",\n          \"in\" : \"query\",\n          \"description\" : \"A hijri calendar month\\n\",\n          \"schema\" : {\n            \"type\" : \"number\",\n            \"example\" : 8\n          }\n        }, {\n          \"name\" : \"year\",\n          \"in\" : \"query\",\n          \"description\" : \"A gregorian calendar year\\n\",\n          \"schema\" : {\n            \"type\" : \"number\",\n            \"example\" : 2022\n          }\n        }, {\n          \"name\" : \"annual\",\n          \"in\" : \"query\",\n          \"description\" : \"If true, month parameter will be ignored and the calendar for the entire year will be returned\\n\",\n          \"schema\" : {\n            \"type\" : \"boolean\",\n            \"example\" : false,\n            \"default\" : false\n          }\n        }, {\n          \"name\" : \"method\",\n          \"in\" : \"query\",\n          \"description\" : \"A prayer times calculation method. Methods identify various schools of thought about how to compute the timings. If not specified, it defaults to the closest authority based on the location or co-ordinates specified in the API call. This parameter accepts values from 0-12 and 99, as specified below: <br><br> Possible values:\\n* `0` - Shia Ithna-Ansari\\n* `1` - University of Islamic Sciences, Karachi\\n* `2` - Islamic Society of North America\\n* `3` - Muslim World League\\n* `4` - Umm Al-Qura University, Makkah\\n* `5` - Egyptian General Authority of Survey\\n* `6` - Institute of Geophysics, University of Tehran\\n* `7` - Gulf Region\\n* `8` - Kuwait\\n* `9` - Qatar\\n* `10` - Majlis Ugama Islam Singapura, Singapore\\n* `11` - Union Organization islamic de France\\n* `12` - Diyanet İşleri Başkanlığı, Turkey\\n* `13` - Spiritual Administration of Muslims of Russia\\n* `14` - Moonsighting Committee Worldwide (also requires shafaq paramteer)\\n* `99` - Custom. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods)\\n\",\n          \"schema\" : {\n            \"type\" : \"number\",\n            \"example\" : 4,\n            \"default\" : 0,\n            \"enum\" : [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 99 ]\n          }\n        }, {\n          \"name\" : \"shafaq\",\n          \"in\" : \"query\",\n          \"description\" : \"Which Shafaq to use if the method is Moonsighting Commitee Worldwide. Acceptable options are 'general', 'ahmer' and 'abyad'\\n\",\n          \"schema\" : {\n            \"type\" : \"string\",\n            \"example\" : \"general\",\n            \"default\" : \"general\",\n            \"enum\" : [ \"general\", \"ahmer\", \"abyad\" ]\n          }\n        }, {\n          \"name\" : \"tune\",\n          \"in\" : \"query\",\n          \"description\" : \"Comma Separated String of integers to offset timings returned by the API in minutes. The order is `Imsak,Fajr,Sunrise,Dhuhr,Asr,Maghrib,Sunset,Isha,Midnight`. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods) for more details.\\n\",\n          \"schema\" : {\n            \"type\" : \"string\",\n            \"example\" : \"5,3,5,7,9,-1,0,8,-6\"\n          }\n        }, {\n          \"name\" : \"school\",\n          \"in\" : \"query\",\n          \"description\" : \"Shafi (or the standard way) or Hanafi. <br /><br /> Possible values:\\n* `0` - Shafi\\n* `1` - Hanafi\\n\",\n          \"schema\" : {\n            \"type\" : \"integer\",\n            \"default\" : 0,\n            \"enum\" : [ 0, 1 ]\n          }\n        }, {\n          \"name\" : \"midnightMode\",\n          \"in\" : \"query\",\n          \"description\" : \"Determines the method for calculating midnight <br><br> Possible values:\\n* `0` - Standard (Mid Sunset to Sunrise)\\n* `1` - Jafari (Mid Sunset to Fajr)\\n\",\n          \"schema\" : {\n            \"type\" : \"integer\",\n            \"default\" : 0,\n            \"enum\" : [ 0, 1 ]\n          }\n        }, {\n          \"name\" : \"timezonestring\",\n          \"in\" : \"query\",\n          \"description\" : \"A valid timezone name as specified on [https://php.net/manual/en/timezones.php](https://php.net/manual/en/timezones.php). <br> *If you do not specify this, we'll calcuate it using the co-ordinates you provide.*\\n\",\n          \"schema\" : {\n            \"type\" : \"string\",\n            \"example\" : \"Europe/London\"\n          }\n        }, {\n          \"name\" : \"latitudeAdjustmentMethod\",\n          \"in\" : \"query\",\n          \"description\" : \"Method for adjusting times at higher latitudes. For example, if you are checking timings in the UK or Sweden. <br><br> Possible values:\\n* `1` - Middle of the Night\\n* `2` - One Seventh\\n* `3` - Angle Based\\n\",\n          \"schema\" : {\n            \"type\" : \"integer\",\n            \"enum\" : [ 1, 2, 3 ]\n          }\n        }, {\n          \"name\" : \"adjustment\",\n          \"in\" : \"query\",\n          \"description\" : \"Number of days to adjust hijri date(s).\\n\",\n          \"schema\" : {\n            \"type\" : \"integer\",\n            \"example\" : -1\n          }\n        }, {\n          \"name\" : \"iso8601\",\n          \"in\" : \"query\",\n          \"description\" : \"Whether to return the prayer times in the iso8601 format. Example: true will return 2020-07-01T02:56:00+01:00 instead of 02:56\\n\",\n          \"schema\" : {\n            \"type\" : \"boolean\",\n            \"default\" : false\n          }\n        } ],\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"OK\",\n            \"content\" : {\n              \"application/json\" : {\n                \"schema\" : {\n                  \"$ref\" : \"#/components/schemas/calendar_response\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/v1/hijriCalendarByCity\" : {\n      \"get\" : {\n        \"tags\" : [ \"Monthly / Annual Calendar\" ],\n        \"summary\" : \"Prayer Times Hijri Calendar by city\",\n        \"description\" : \"Returns all prayer times for a specific Hijri calendar month by City.\",\n        \"parameters\" : [ {\n          \"name\" : \"latitude\",\n          \"in\" : \"query\",\n          \"description\" : \"The decimal value for the latitude co-ordinate of the location you want the time computed for.\\n\",\n          \"schema\" : {\n            \"type\" : \"number\",\n            \"example\" : 51.75865125\n          }\n        }, {\n          \"name\" : \"longitude\",\n          \"in\" : \"query\",\n          \"description\" : \"The decimal value for the longitude co-ordinate of the location you want the time computed for.\\n\",\n          \"schema\" : {\n            \"type\" : \"number\",\n            \"example\" : -1.25387785\n          }\n        }, {\n          \"name\" : \"month\",\n          \"in\" : \"query\",\n          \"description\" : \"A hijri calendar month\\n\",\n          \"schema\" : {\n            \"type\" : \"number\",\n            \"example\" : 8\n          }\n        }, {\n          \"name\" : \"year\",\n          \"in\" : \"query\",\n          \"description\" : \"A gregorian calendar year\\n\",\n          \"schema\" : {\n            \"type\" : \"number\",\n            \"example\" : 2022\n          }\n        }, {\n          \"name\" : \"annual\",\n          \"in\" : \"query\",\n          \"description\" : \"If true, month parameter will be ignored and the calendar for the entire year will be returned\\n\",\n          \"schema\" : {\n            \"type\" : \"boolean\",\n            \"example\" : false,\n            \"default\" : false\n          }\n        }, {\n          \"name\" : \"method\",\n          \"in\" : \"query\",\n          \"description\" : \"A prayer times calculation method. Methods identify various schools of thought about how to compute the timings. If not specified, it defaults to the closest authority based on the location or co-ordinates specified in the API call. This parameter accepts values from 0-12 and 99, as specified below: <br><br> Possible values:\\n* `0` - Shia Ithna-Ansari\\n* `1` - University of Islamic Sciences, Karachi\\n* `2` - Islamic Society of North America\\n* `3` - Muslim World League\\n* `4` - Umm Al-Qura University, Makkah\\n* `5` - Egyptian General Authority of Survey\\n* `6` - Institute of Geophysics, University of Tehran\\n* `7` - Gulf Region\\n* `8` - Kuwait\\n* `9` - Qatar\\n* `10` - Majlis Ugama Islam Singapura, Singapore\\n* `11` - Union Organization islamic de France\\n* `12` - Diyanet İşleri Başkanlığı, Turkey\\n* `13` - Spiritual Administration of Muslims of Russia\\n* `14` - Moonsighting Committee Worldwide (also requires shafaq paramteer)\\n* `99` - Custom. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods)\\n\",\n          \"schema\" : {\n            \"type\" : \"number\",\n            \"example\" : 4,\n            \"default\" : 0,\n            \"enum\" : [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 99 ]\n          }\n        }, {\n          \"name\" : \"shafaq\",\n          \"in\" : \"query\",\n          \"description\" : \"Which Shafaq to use if the method is Moonsighting Commitee Worldwide. Acceptable options are 'general', 'ahmer' and 'abyad'\\n\",\n          \"schema\" : {\n            \"type\" : \"string\",\n            \"example\" : \"general\",\n            \"default\" : \"general\",\n            \"enum\" : [ \"general\", \"ahmer\", \"abyad\" ]\n          }\n        }, {\n          \"name\" : \"tune\",\n          \"in\" : \"query\",\n          \"description\" : \"Comma Separated String of integers to offset timings returned by the API in minutes. The order is `Imsak,Fajr,Sunrise,Dhuhr,Asr,Maghrib,Sunset,Isha,Midnight`. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods) for more details.\\n\",\n          \"schema\" : {\n            \"type\" : \"string\",\n            \"example\" : \"5,3,5,7,9,-1,0,8,-6\"\n          }\n        }, {\n          \"name\" : \"school\",\n          \"in\" : \"query\",\n          \"description\" : \"Shafi (or the standard way) or Hanafi. <br /><br /> Possible values:\\n* `0` - Shafi\\n* `1` - Hanafi\\n\",\n          \"schema\" : {\n            \"type\" : \"integer\",\n            \"default\" : 0,\n            \"enum\" : [ 0, 1 ]\n          }\n        }, {\n          \"name\" : \"midnightMode\",\n          \"in\" : \"query\",\n          \"description\" : \"Determines the method for calculating midnight <br><br> Possible values:\\n* `0` - Standard (Mid Sunset to Sunrise)\\n* `1` - Jafari (Mid Sunset to Fajr)\\n\",\n          \"schema\" : {\n            \"type\" : \"integer\",\n            \"default\" : 0,\n            \"enum\" : [ 0, 1 ]\n          }\n        }, {\n          \"name\" : \"timezonestring\",\n          \"in\" : \"query\",\n          \"description\" : \"A valid timezone name as specified on [https://php.net/manual/en/timezones.php](https://php.net/manual/en/timezones.php). <br> *If you do not specify this, we'll calcuate it using the co-ordinates you provide.*\\n\",\n          \"schema\" : {\n            \"type\" : \"string\",\n            \"example\" : \"Europe/London\"\n          }\n        }, {\n          \"name\" : \"latitudeAdjustmentMethod\",\n          \"in\" : \"query\",\n          \"description\" : \"Method for adjusting times at higher latitudes. For example, if you are checking timings in the UK or Sweden. <br><br> Possible values:\\n* `1` - Middle of the Night\\n* `2` - One Seventh\\n* `3` - Angle Based\\n\",\n          \"schema\" : {\n            \"type\" : \"integer\",\n            \"enum\" : [ 1, 2, 3 ]\n          }\n        }, {\n          \"name\" : \"adjustment\",\n          \"in\" : \"query\",\n          \"description\" : \"Number of days to adjust hijri date(s).\\n\",\n          \"schema\" : {\n            \"type\" : \"integer\",\n            \"example\" : -1\n          }\n        }, {\n          \"name\" : \"iso8601\",\n          \"in\" : \"query\",\n          \"description\" : \"Whether to return the prayer times in the iso8601 format. Example: true will return 2020-07-01T02:56:00+01:00 instead of 02:56\\n\",\n          \"schema\" : {\n            \"type\" : \"boolean\",\n            \"default\" : false\n          }\n        } ],\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"OK\",\n            \"content\" : {\n              \"application/json\" : {\n                \"schema\" : {\n                  \"$ref\" : \"#/components/schemas/calendar_response\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/v1/timings\" : {\n      \"get\" : {\n        \"tags\" : [ \"Daily\" ],\n        \"summary\" : \"Prayer Times for date\",\n        \"description\" : \"Returns all prayer times for a specific date.\",\n        \"parameters\" : [ {\n          \"name\" : \"latitude\",\n          \"in\" : \"query\",\n          \"description\" : \"The decimal value for the latitude co-ordinate of the location you want the time computed for.\\n\",\n          \"schema\" : {\n            \"type\" : \"number\",\n            \"example\" : 51.75865125\n          }\n        }, {\n          \"name\" : \"longitude\",\n          \"in\" : \"query\",\n          \"description\" : \"The decimal value for the longitude co-ordinate of the location you want the time computed for.\\n\",\n          \"schema\" : {\n            \"type\" : \"number\",\n            \"example\" : -1.25387785\n          }\n        }, {\n          \"name\" : \"method\",\n          \"in\" : \"query\",\n          \"description\" : \"A prayer times calculation method. Methods identify various schools of thought about how to compute the timings. If not specified, it defaults to the closest authority based on the location or co-ordinates specified in the API call. This parameter accepts values from 0-12 and 99, as specified below: <br><br> Possible values:\\n* `0` - Shia Ithna-Ansari\\n* `1` - University of Islamic Sciences, Karachi\\n* `2` - Islamic Society of North America\\n* `3` - Muslim World League\\n* `4` - Umm Al-Qura University, Makkah\\n* `5` - Egyptian General Authority of Survey\\n* `6` - Institute of Geophysics, University of Tehran\\n* `7` - Gulf Region\\n* `8` - Kuwait\\n* `9` - Qatar\\n* `10` - Majlis Ugama Islam Singapura, Singapore\\n* `11` - Union Organization islamic de France\\n* `12` - Diyanet İşleri Başkanlığı, Turkey\\n* `13` - Spiritual Administration of Muslims of Russia\\n* `14` - Moonsighting Committee Worldwide (also requires shafaq paramteer)\\n* `99` - Custom. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods)\\n\",\n          \"schema\" : {\n            \"type\" : \"number\",\n            \"example\" : 4,\n            \"default\" : 0,\n            \"enum\" : [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 99 ]\n          }\n        }, {\n          \"name\" : \"shafaq\",\n          \"in\" : \"query\",\n          \"description\" : \"Which Shafaq to use if the method is Moonsighting Commitee Worldwide. Acceptable options are 'general', 'ahmer' and 'abyad'\\n\",\n          \"schema\" : {\n            \"type\" : \"string\",\n            \"example\" : \"general\",\n            \"default\" : \"general\",\n            \"enum\" : [ \"general\", \"ahmer\", \"abyad\" ]\n          }\n        }, {\n          \"name\" : \"tune\",\n          \"in\" : \"query\",\n          \"description\" : \"Comma Separated String of integers to offset timings returned by the API in minutes. The order is `Imsak,Fajr,Sunrise,Dhuhr,Asr,Maghrib,Sunset,Isha,Midnight`. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods) for more details.\\n\",\n          \"schema\" : {\n            \"type\" : \"string\",\n            \"example\" : \"5,3,5,7,9,-1,0,8,-6\"\n          }\n        }, {\n          \"name\" : \"school\",\n          \"in\" : \"query\",\n          \"description\" : \"Shafi (or the standard way) or Hanafi. <br /><br /> Possible values:\\n* `0` - Shafi\\n* `1` - Hanafi\\n\",\n          \"schema\" : {\n            \"type\" : \"integer\",\n            \"default\" : 0,\n            \"enum\" : [ 0, 1 ]\n          }\n        }, {\n          \"name\" : \"midnightMode\",\n          \"in\" : \"query\",\n          \"description\" : \"Determines the method for calculating midnight <br><br> Possible values:\\n* `0` - Standard (Mid Sunset to Sunrise)\\n* `1` - Jafari (Mid Sunset to Fajr)\\n\",\n          \"schema\" : {\n            \"type\" : \"integer\",\n            \"default\" : 0,\n            \"enum\" : [ 0, 1 ]\n          }\n        }, {\n          \"name\" : \"timezonestring\",\n          \"in\" : \"query\",\n          \"description\" : \"A valid timezone name as specified on [https://php.net/manual/en/timezones.php](https://php.net/manual/en/timezones.php). <br> *If you do not specify this, we'll calcuate it using the co-ordinates you provide.*\\n\",\n          \"schema\" : {\n            \"type\" : \"string\",\n            \"example\" : \"Europe/London\"\n          }\n        }, {\n          \"name\" : \"latitudeAdjustmentMethod\",\n          \"in\" : \"query\",\n          \"description\" : \"Method for adjusting times at higher latitudes. For example, if you are checking timings in the UK or Sweden. <br><br> Possible values:\\n* `1` - Middle of the Night\\n* `2` - One Seventh\\n* `3` - Angle Based\\n\",\n          \"schema\" : {\n            \"type\" : \"integer\",\n            \"enum\" : [ 1, 2, 3 ]\n          }\n        }, {\n          \"name\" : \"adjustment\",\n          \"in\" : \"query\",\n          \"description\" : \"Number of days to adjust hijri date(s).\\n\",\n          \"schema\" : {\n            \"type\" : \"integer\",\n            \"example\" : -1\n          }\n        }, {\n          \"name\" : \"iso8601\",\n          \"in\" : \"query\",\n          \"description\" : \"Whether to return the prayer times in the iso8601 format. Example: true will return 2020-07-01T02:56:00+01:00 instead of 02:56\\n\",\n          \"schema\" : {\n            \"type\" : \"boolean\",\n            \"default\" : false\n          }\n        } ],\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"OK\",\n            \"content\" : {\n              \"application/json\" : {\n                \"schema\" : {\n                  \"$ref\" : \"#/components/schemas/timings_response\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/v1/timings/{date_or_timestamp}\" : {\n      \"get\" : {\n        \"tags\" : [ \"Daily\" ],\n        \"summary\" : \"Prayer Times for date\",\n        \"description\" : \"Returns all prayer times for a specific date.\",\n        \"parameters\" : [ {\n          \"name\" : \"date_or_timestamp\",\n          \"in\" : \"path\",\n          \"description\" : \"A date in the DD-MM-YYYY format or UNIX timestamp. Defaults to the current date if omitted.\\n\",\n          \"required\" : true,\n          \"schema\" : {\n            \"type\" : \"string\"\n          }\n        }, {\n          \"name\" : \"latitude\",\n          \"in\" : \"query\",\n          \"description\" : \"The decimal value for the latitude co-ordinate of the location you want the time computed for.\\n\",\n          \"schema\" : {\n            \"type\" : \"number\",\n            \"example\" : 51.75865125\n          }\n        }, {\n          \"name\" : \"longitude\",\n          \"in\" : \"query\",\n          \"description\" : \"The decimal value for the longitude co-ordinate of the location you want the time computed for.\\n\",\n          \"schema\" : {\n            \"type\" : \"number\",\n            \"example\" : -1.25387785\n          }\n        }, {\n          \"name\" : \"method\",\n          \"in\" : \"query\",\n          \"description\" : \"A prayer times calculation method. Methods identify various schools of thought about how to compute the timings. If not specified, it defaults to the closest authority based on the location or co-ordinates specified in the API call. This parameter accepts values from 0-12 and 99, as specified below: <br><br> Possible values:\\n* `0` - Shia Ithna-Ansari\\n* `1` - University of Islamic Sciences, Karachi\\n* `2` - Islamic Society of North America\\n* `3` - Muslim World League\\n* `4` - Umm Al-Qura University, Makkah\\n* `5` - Egyptian General Authority of Survey\\n* `6` - Institute of Geophysics, University of Tehran\\n* `7` - Gulf Region\\n* `8` - Kuwait\\n* `9` - Qatar\\n* `10` - Majlis Ugama Islam Singapura, Singapore\\n* `11` - Union Organization islamic de France\\n* `12` - Diyanet İşleri Başkanlığı, Turkey\\n* `13` - Spiritual Administration of Muslims of Russia\\n* `14` - Moonsighting Committee Worldwide (also requires shafaq paramteer)\\n* `99` - Custom. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods)\\n\",\n          \"schema\" : {\n            \"type\" : \"number\",\n            \"example\" : 4,\n            \"default\" : 0,\n            \"enum\" : [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 99 ]\n          }\n        }, {\n          \"name\" : \"shafaq\",\n          \"in\" : \"query\",\n          \"description\" : \"Which Shafaq to use if the method is Moonsighting Commitee Worldwide. Acceptable options are 'general', 'ahmer' and 'abyad'\\n\",\n          \"schema\" : {\n            \"type\" : \"string\",\n            \"example\" : \"general\",\n            \"default\" : \"general\",\n            \"enum\" : [ \"general\", \"ahmer\", \"abyad\" ]\n          }\n        }, {\n          \"name\" : \"tune\",\n          \"in\" : \"query\",\n          \"description\" : \"Comma Separated String of integers to offset timings returned by the API in minutes. The order is `Imsak,Fajr,Sunrise,Dhuhr,Asr,Maghrib,Sunset,Isha,Midnight`. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods) for more details.\\n\",\n          \"schema\" : {\n            \"type\" : \"string\",\n            \"example\" : \"5,3,5,7,9,-1,0,8,-6\"\n          }\n        }, {\n          \"name\" : \"school\",\n          \"in\" : \"query\",\n          \"description\" : \"Shafi (or the standard way) or Hanafi. <br /><br /> Possible values:\\n* `0` - Shafi\\n* `1` - Hanafi\\n\",\n          \"schema\" : {\n            \"type\" : \"integer\",\n            \"default\" : 0,\n            \"enum\" : [ 0, 1 ]\n          }\n        }, {\n          \"name\" : \"midnightMode\",\n          \"in\" : \"query\",\n          \"description\" : \"Determines the method for calculating midnight <br><br> Possible values:\\n* `0` - Standard (Mid Sunset to Sunrise)\\n* `1` - Jafari (Mid Sunset to Fajr)\\n\",\n          \"schema\" : {\n            \"type\" : \"integer\",\n            \"default\" : 0,\n            \"enum\" : [ 0, 1 ]\n          }\n        }, {\n          \"name\" : \"timezonestring\",\n          \"in\" : \"query\",\n          \"description\" : \"A valid timezone name as specified on [https://php.net/manual/en/timezones.php](https://php.net/manual/en/timezones.php). <br> *If you do not specify this, we'll calcuate it using the co-ordinates you provide.*\\n\",\n          \"schema\" : {\n            \"type\" : \"string\",\n            \"example\" : \"Europe/London\"\n          }\n        }, {\n          \"name\" : \"latitudeAdjustmentMethod\",\n          \"in\" : \"query\",\n          \"description\" : \"Method for adjusting times at higher latitudes. For example, if you are checking timings in the UK or Sweden. <br><br> Possible values:\\n* `1` - Middle of the Night\\n* `2` - One Seventh\\n* `3` - Angle Based\\n\",\n          \"schema\" : {\n            \"type\" : \"integer\",\n            \"enum\" : [ 1, 2, 3 ]\n          }\n        }, {\n          \"name\" : \"adjustment\",\n          \"in\" : \"query\",\n          \"description\" : \"Number of days to adjust hijri date(s).\\n\",\n          \"schema\" : {\n            \"type\" : \"integer\",\n            \"example\" : -1\n          }\n        }, {\n          \"name\" : \"iso8601\",\n          \"in\" : \"query\",\n          \"description\" : \"Whether to return the prayer times in the iso8601 format. Example: true will return 2020-07-01T02:56:00+01:00 instead of 02:56\\n\",\n          \"schema\" : {\n            \"type\" : \"boolean\",\n            \"default\" : false\n          }\n        } ],\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"OK\",\n            \"content\" : {\n              \"application/json\" : {\n                \"schema\" : {\n                  \"$ref\" : \"#/components/schemas/timings_response\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/v1/timingsByAddress\" : {\n      \"get\" : {\n        \"tags\" : [ \"Daily\" ],\n        \"summary\" : \"Timings By Address\",\n        \"description\" : \"Returns all prayer times for a specific date at a particular address.\",\n        \"parameters\" : [ {\n          \"name\" : \"address\",\n          \"in\" : \"query\",\n          \"description\" : \"An address string\\n\",\n          \"schema\" : {\n            \"type\" : \"string\",\n            \"example\" : \"1420 Austin Bluffs Parkway, Colorado Springs, CO\"\n          }\n        }, {\n          \"name\" : \"method\",\n          \"in\" : \"query\",\n          \"description\" : \"A prayer times calculation method. Methods identify various schools of thought about how to compute the timings. If not specified, it defaults to the closest authority based on the location or co-ordinates specified in the API call. This parameter accepts values from 0-12 and 99, as specified below: <br><br> Possible values:\\n* `0` - Shia Ithna-Ansari\\n* `1` - University of Islamic Sciences, Karachi\\n* `2` - Islamic Society of North America\\n* `3` - Muslim World League\\n* `4` - Umm Al-Qura University, Makkah\\n* `5` - Egyptian General Authority of Survey\\n* `6` - Institute of Geophysics, University of Tehran\\n* `7` - Gulf Region\\n* `8` - Kuwait\\n* `9` - Qatar\\n* `10` - Majlis Ugama Islam Singapura, Singapore\\n* `11` - Union Organization islamic de France\\n* `12` - Diyanet İşleri Başkanlığı, Turkey\\n* `13` - Spiritual Administration of Muslims of Russia\\n* `14` - Moonsighting Committee Worldwide (also requires shafaq paramteer)\\n* `99` - Custom. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods)\\n\",\n          \"schema\" : {\n            \"type\" : \"number\",\n            \"example\" : 4,\n            \"default\" : 0,\n            \"enum\" : [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 99 ]\n          }\n        }, {\n          \"name\" : \"shafaq\",\n          \"in\" : \"query\",\n          \"description\" : \"Which Shafaq to use if the method is Moonsighting Commitee Worldwide. Acceptable options are 'general', 'ahmer' and 'abyad'\\n\",\n          \"schema\" : {\n            \"type\" : \"string\",\n            \"example\" : \"general\",\n            \"default\" : \"general\",\n            \"enum\" : [ \"general\", \"ahmer\", \"abyad\" ]\n          }\n        }, {\n          \"name\" : \"tune\",\n          \"in\" : \"query\",\n          \"description\" : \"Comma Separated String of integers to offset timings returned by the API in minutes. The order is `Imsak,Fajr,Sunrise,Dhuhr,Asr,Maghrib,Sunset,Isha,Midnight`. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods) for more details.\\n\",\n          \"schema\" : {\n            \"type\" : \"string\",\n            \"example\" : \"5,3,5,7,9,-1,0,8,-6\"\n          }\n        }, {\n          \"name\" : \"school\",\n          \"in\" : \"query\",\n          \"description\" : \"Shafi (or the standard way) or Hanafi. <br /><br /> Possible values:\\n* `0` - Shafi\\n* `1` - Hanafi\\n\",\n          \"schema\" : {\n            \"type\" : \"integer\",\n            \"default\" : 0,\n            \"enum\" : [ 0, 1 ]\n          }\n        }, {\n          \"name\" : \"midnightMode\",\n          \"in\" : \"query\",\n          \"description\" : \"Determines the method for calculating midnight <br><br> Possible values:\\n* `0` - Standard (Mid Sunset to Sunrise)\\n* `1` - Jafari (Mid Sunset to Fajr)\\n\",\n          \"schema\" : {\n            \"type\" : \"integer\",\n            \"default\" : 0,\n            \"enum\" : [ 0, 1 ]\n          }\n        }, {\n          \"name\" : \"timezonestring\",\n          \"in\" : \"query\",\n          \"description\" : \"A valid timezone name as specified on [https://php.net/manual/en/timezones.php](https://php.net/manual/en/timezones.php). <br> *If you do not specify this, we'll calcuate it using the co-ordinates you provide.*\\n\",\n          \"schema\" : {\n            \"type\" : \"string\",\n            \"example\" : \"Europe/London\"\n          }\n        }, {\n          \"name\" : \"latitudeAdjustmentMethod\",\n          \"in\" : \"query\",\n          \"description\" : \"Method for adjusting times at higher latitudes. For example, if you are checking timings in the UK or Sweden. <br><br> Possible values:\\n* `1` - Middle of the Night\\n* `2` - One Seventh\\n* `3` - Angle Based\\n\",\n          \"schema\" : {\n            \"type\" : \"integer\",\n            \"enum\" : [ 1, 2, 3 ]\n          }\n        }, {\n          \"name\" : \"adjustment\",\n          \"in\" : \"query\",\n          \"description\" : \"Number of days to adjust hijri date(s).\\n\",\n          \"schema\" : {\n            \"type\" : \"integer\",\n            \"example\" : -1\n          }\n        }, {\n          \"name\" : \"iso8601\",\n          \"in\" : \"query\",\n          \"description\" : \"Whether to return the prayer times in the iso8601 format. Example: true will return 2020-07-01T02:56:00+01:00 instead of 02:56\\n\",\n          \"schema\" : {\n            \"type\" : \"boolean\",\n            \"default\" : false\n          }\n        } ],\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"OK\",\n            \"content\" : {\n              \"application/json\" : {\n                \"schema\" : {\n                  \"$ref\" : \"#/components/schemas/timings_response\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/v1/timingsByAddress/{date_or_timestamp}\" : {\n      \"get\" : {\n        \"tags\" : [ \"Daily\" ],\n        \"summary\" : \"Timings By Address\",\n        \"description\" : \"Returns all prayer times for a specific date at a particular address.\",\n        \"parameters\" : [ {\n          \"name\" : \"date_or_timestamp\",\n          \"in\" : \"path\",\n          \"description\" : \"A date in the DD-MM-YYYY format or UNIX timestamp. Defaults to the current date if omitted.\\n\",\n          \"required\" : true,\n          \"schema\" : {\n            \"type\" : \"string\"\n          }\n        }, {\n          \"name\" : \"address\",\n          \"in\" : \"query\",\n          \"description\" : \"An address string\\n\",\n          \"schema\" : {\n            \"type\" : \"string\",\n            \"example\" : \"1420 Austin Bluffs Parkway, Colorado Springs, CO\"\n          }\n        }, {\n          \"name\" : \"method\",\n          \"in\" : \"query\",\n          \"description\" : \"A prayer times calculation method. Methods identify various schools of thought about how to compute the timings. If not specified, it defaults to the closest authority based on the location or co-ordinates specified in the API call. This parameter accepts values from 0-12 and 99, as specified below: <br><br> Possible values:\\n* `0` - Shia Ithna-Ansari\\n* `1` - University of Islamic Sciences, Karachi\\n* `2` - Islamic Society of North America\\n* `3` - Muslim World League\\n* `4` - Umm Al-Qura University, Makkah\\n* `5` - Egyptian General Authority of Survey\\n* `6` - Institute of Geophysics, University of Tehran\\n* `7` - Gulf Region\\n* `8` - Kuwait\\n* `9` - Qatar\\n* `10` - Majlis Ugama Islam Singapura, Singapore\\n* `11` - Union Organization islamic de France\\n* `12` - Diyanet İşleri Başkanlığı, Turkey\\n* `13` - Spiritual Administration of Muslims of Russia\\n* `14` - Moonsighting Committee Worldwide (also requires shafaq paramteer)\\n* `99` - Custom. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods)\\n\",\n          \"schema\" : {\n            \"type\" : \"number\",\n            \"example\" : 4,\n            \"default\" : 0,\n            \"enum\" : [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 99 ]\n          }\n        }, {\n          \"name\" : \"shafaq\",\n          \"in\" : \"query\",\n          \"description\" : \"Which Shafaq to use if the method is Moonsighting Commitee Worldwide. Acceptable options are 'general', 'ahmer' and 'abyad'\\n\",\n          \"schema\" : {\n            \"type\" : \"string\",\n            \"example\" : \"general\",\n            \"default\" : \"general\",\n            \"enum\" : [ \"general\", \"ahmer\", \"abyad\" ]\n          }\n        }, {\n          \"name\" : \"tune\",\n          \"in\" : \"query\",\n          \"description\" : \"Comma Separated String of integers to offset timings returned by the API in minutes. The order is `Imsak,Fajr,Sunrise,Dhuhr,Asr,Maghrib,Sunset,Isha,Midnight`. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods) for more details.\\n\",\n          \"schema\" : {\n            \"type\" : \"string\",\n            \"example\" : \"5,3,5,7,9,-1,0,8,-6\"\n          }\n        }, {\n          \"name\" : \"school\",\n          \"in\" : \"query\",\n          \"description\" : \"Shafi (or the standard way) or Hanafi. <br /><br /> Possible values:\\n* `0` - Shafi\\n* `1` - Hanafi\\n\",\n          \"schema\" : {\n            \"type\" : \"integer\",\n            \"default\" : 0,\n            \"enum\" : [ 0, 1 ]\n          }\n        }, {\n          \"name\" : \"midnightMode\",\n          \"in\" : \"query\",\n          \"description\" : \"Determines the method for calculating midnight <br><br> Possible values:\\n* `0` - Standard (Mid Sunset to Sunrise)\\n* `1` - Jafari (Mid Sunset to Fajr)\\n\",\n          \"schema\" : {\n            \"type\" : \"integer\",\n            \"default\" : 0,\n            \"enum\" : [ 0, 1 ]\n          }\n        }, {\n          \"name\" : \"timezonestring\",\n          \"in\" : \"query\",\n          \"description\" : \"A valid timezone name as specified on [https://php.net/manual/en/timezones.php](https://php.net/manual/en/timezones.php). <br> *If you do not specify this, we'll calcuate it using the co-ordinates you provide.*\\n\",\n          \"schema\" : {\n            \"type\" : \"string\",\n            \"example\" : \"Europe/London\"\n          }\n        }, {\n          \"name\" : \"latitudeAdjustmentMethod\",\n          \"in\" : \"query\",\n          \"description\" : \"Method for adjusting times at higher latitudes. For example, if you are checking timings in the UK or Sweden. <br><br> Possible values:\\n* `1` - Middle of the Night\\n* `2` - One Seventh\\n* `3` - Angle Based\\n\",\n          \"schema\" : {\n            \"type\" : \"integer\",\n            \"enum\" : [ 1, 2, 3 ]\n          }\n        }, {\n          \"name\" : \"adjustment\",\n          \"in\" : \"query\",\n          \"description\" : \"Number of days to adjust hijri date(s).\\n\",\n          \"schema\" : {\n            \"type\" : \"integer\",\n            \"example\" : -1\n          }\n        }, {\n          \"name\" : \"iso8601\",\n          \"in\" : \"query\",\n          \"description\" : \"Whether to return the prayer times in the iso8601 format. Example: true will return 2020-07-01T02:56:00+01:00 instead of 02:56\\n\",\n          \"schema\" : {\n            \"type\" : \"boolean\",\n            \"default\" : false\n          }\n        } ],\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"OK\",\n            \"content\" : {\n              \"application/json\" : {\n                \"schema\" : {\n                  \"$ref\" : \"#/components/schemas/timings_response\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/v1/timingsByCity\" : {\n      \"get\" : {\n        \"tags\" : [ \"Daily\" ],\n        \"summary\" : \"Timings By City\",\n        \"description\" : \"Returns all prayer times for a specific date in a particular city.\",\n        \"parameters\" : [ {\n          \"name\" : \"city\",\n          \"in\" : \"query\",\n          \"description\" : \"A city name\\n\",\n          \"schema\" : {\n            \"type\" : \"string\",\n            \"example\" : \"London\"\n          }\n        }, {\n          \"name\" : \"country\",\n          \"in\" : \"query\",\n          \"description\" : \"A country name or 2 character alpha ISO 3166 code\\n\",\n          \"schema\" : {\n            \"type\" : \"string\",\n            \"example\" : \"GB\"\n          }\n        }, {\n          \"name\" : \"method\",\n          \"in\" : \"query\",\n          \"description\" : \"A prayer times calculation method. Methods identify various schools of thought about how to compute the timings. If not specified, it defaults to the closest authority based on the location or co-ordinates specified in the API call. This parameter accepts values from 0-12 and 99, as specified below: <br><br> Possible values:\\n* `0` - Shia Ithna-Ansari\\n* `1` - University of Islamic Sciences, Karachi\\n* `2` - Islamic Society of North America\\n* `3` - Muslim World League\\n* `4` - Umm Al-Qura University, Makkah\\n* `5` - Egyptian General Authority of Survey\\n* `6` - Institute of Geophysics, University of Tehran\\n* `7` - Gulf Region\\n* `8` - Kuwait\\n* `9` - Qatar\\n* `10` - Majlis Ugama Islam Singapura, Singapore\\n* `11` - Union Organization islamic de France\\n* `12` - Diyanet İşleri Başkanlığı, Turkey\\n* `13` - Spiritual Administration of Muslims of Russia\\n* `14` - Moonsighting Committee Worldwide (also requires shafaq paramteer)\\n* `99` - Custom. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods)\\n\",\n          \"schema\" : {\n            \"type\" : \"number\",\n            \"example\" : 4,\n            \"default\" : 0,\n            \"enum\" : [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 99 ]\n          }\n        }, {\n          \"name\" : \"shafaq\",\n          \"in\" : \"query\",\n          \"description\" : \"Which Shafaq to use if the method is Moonsighting Commitee Worldwide. Acceptable options are 'general', 'ahmer' and 'abyad'\\n\",\n          \"schema\" : {\n            \"type\" : \"string\",\n            \"example\" : \"general\",\n            \"default\" : \"general\",\n            \"enum\" : [ \"general\", \"ahmer\", \"abyad\" ]\n          }\n        }, {\n          \"name\" : \"tune\",\n          \"in\" : \"query\",\n          \"description\" : \"Comma Separated String of integers to offset timings returned by the API in minutes. The order is `Imsak,Fajr,Sunrise,Dhuhr,Asr,Maghrib,Sunset,Isha,Midnight`. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods) for more details.\\n\",\n          \"schema\" : {\n            \"type\" : \"string\",\n            \"example\" : \"5,3,5,7,9,-1,0,8,-6\"\n          }\n        }, {\n          \"name\" : \"school\",\n          \"in\" : \"query\",\n          \"description\" : \"Shafi (or the standard way) or Hanafi. <br /><br /> Possible values:\\n* `0` - Shafi\\n* `1` - Hanafi\\n\",\n          \"schema\" : {\n            \"type\" : \"integer\",\n            \"default\" : 0,\n            \"enum\" : [ 0, 1 ]\n          }\n        }, {\n          \"name\" : \"midnightMode\",\n          \"in\" : \"query\",\n          \"description\" : \"Determines the method for calculating midnight <br><br> Possible values:\\n* `0` - Standard (Mid Sunset to Sunrise)\\n* `1` - Jafari (Mid Sunset to Fajr)\\n\",\n          \"schema\" : {\n            \"type\" : \"integer\",\n            \"default\" : 0,\n            \"enum\" : [ 0, 1 ]\n          }\n        }, {\n          \"name\" : \"timezonestring\",\n          \"in\" : \"query\",\n          \"description\" : \"A valid timezone name as specified on [https://php.net/manual/en/timezones.php](https://php.net/manual/en/timezones.php). <br> *If you do not specify this, we'll calcuate it using the co-ordinates you provide.*\\n\",\n          \"schema\" : {\n            \"type\" : \"string\",\n            \"example\" : \"Europe/London\"\n          }\n        }, {\n          \"name\" : \"latitudeAdjustmentMethod\",\n          \"in\" : \"query\",\n          \"description\" : \"Method for adjusting times at higher latitudes. For example, if you are checking timings in the UK or Sweden. <br><br> Possible values:\\n* `1` - Middle of the Night\\n* `2` - One Seventh\\n* `3` - Angle Based\\n\",\n          \"schema\" : {\n            \"type\" : \"integer\",\n            \"enum\" : [ 1, 2, 3 ]\n          }\n        }, {\n          \"name\" : \"adjustment\",\n          \"in\" : \"query\",\n          \"description\" : \"Number of days to adjust hijri date(s).\\n\",\n          \"schema\" : {\n            \"type\" : \"integer\",\n            \"example\" : -1\n          }\n        }, {\n          \"name\" : \"iso8601\",\n          \"in\" : \"query\",\n          \"description\" : \"Whether to return the prayer times in the iso8601 format. Example: true will return 2020-07-01T02:56:00+01:00 instead of 02:56\\n\",\n          \"schema\" : {\n            \"type\" : \"boolean\",\n            \"default\" : false\n          }\n        } ],\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"OK\",\n            \"content\" : {\n              \"application/json\" : {\n                \"schema\" : {\n                  \"$ref\" : \"#/components/schemas/timings_response\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/v1/timingsByCity/{date_or_timestamp}\" : {\n      \"get\" : {\n        \"tags\" : [ \"Daily\" ],\n        \"summary\" : \"Timings By City\",\n        \"description\" : \"Returns all prayer times for a specific date in a particular city.\",\n        \"parameters\" : [ {\n          \"name\" : \"date_or_timestamp\",\n          \"in\" : \"path\",\n          \"description\" : \"A date in the DD-MM-YYYY format or UNIX timestamp. Defaults to the current date if omitted.\\n\",\n          \"required\" : true,\n          \"schema\" : {\n            \"type\" : \"string\"\n          }\n        }, {\n          \"name\" : \"city\",\n          \"in\" : \"query\",\n          \"description\" : \"A city name\\n\",\n          \"schema\" : {\n            \"type\" : \"string\",\n            \"example\" : \"London\"\n          }\n        }, {\n          \"name\" : \"country\",\n          \"in\" : \"query\",\n          \"description\" : \"A country name or 2 character alpha ISO 3166 code\\n\",\n          \"schema\" : {\n            \"type\" : \"string\",\n            \"example\" : \"GB\"\n          }\n        }, {\n          \"name\" : \"method\",\n          \"in\" : \"query\",\n          \"description\" : \"A prayer times calculation method. Methods identify various schools of thought about how to compute the timings. If not specified, it defaults to the closest authority based on the location or co-ordinates specified in the API call. This parameter accepts values from 0-12 and 99, as specified below: <br><br> Possible values:\\n* `0` - Shia Ithna-Ansari\\n* `1` - University of Islamic Sciences, Karachi\\n* `2` - Islamic Society of North America\\n* `3` - Muslim World League\\n* `4` - Umm Al-Qura University, Makkah\\n* `5` - Egyptian General Authority of Survey\\n* `6` - Institute of Geophysics, University of Tehran\\n* `7` - Gulf Region\\n* `8` - Kuwait\\n* `9` - Qatar\\n* `10` - Majlis Ugama Islam Singapura, Singapore\\n* `11` - Union Organization islamic de France\\n* `12` - Diyanet İşleri Başkanlığı, Turkey\\n* `13` - Spiritual Administration of Muslims of Russia\\n* `14` - Moonsighting Committee Worldwide (also requires shafaq paramteer)\\n* `99` - Custom. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods)\\n\",\n          \"schema\" : {\n            \"type\" : \"number\",\n            \"example\" : 4,\n            \"default\" : 0,\n            \"enum\" : [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 99 ]\n          }\n        }, {\n          \"name\" : \"shafaq\",\n          \"in\" : \"query\",\n          \"description\" : \"Which Shafaq to use if the method is Moonsighting Commitee Worldwide. Acceptable options are 'general', 'ahmer' and 'abyad'\\n\",\n          \"schema\" : {\n            \"type\" : \"string\",\n            \"example\" : \"general\",\n            \"default\" : \"general\",\n            \"enum\" : [ \"general\", \"ahmer\", \"abyad\" ]\n          }\n        }, {\n          \"name\" : \"tune\",\n          \"in\" : \"query\",\n          \"description\" : \"Comma Separated String of integers to offset timings returned by the API in minutes. The order is `Imsak,Fajr,Sunrise,Dhuhr,Asr,Maghrib,Sunset,Isha,Midnight`. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods) for more details.\\n\",\n          \"schema\" : {\n            \"type\" : \"string\",\n            \"example\" : \"5,3,5,7,9,-1,0,8,-6\"\n          }\n        }, {\n          \"name\" : \"school\",\n          \"in\" : \"query\",\n          \"description\" : \"Shafi (or the standard way) or Hanafi. <br /><br /> Possible values:\\n* `0` - Shafi\\n* `1` - Hanafi\\n\",\n          \"schema\" : {\n            \"type\" : \"integer\",\n            \"default\" : 0,\n            \"enum\" : [ 0, 1 ]\n          }\n        }, {\n          \"name\" : \"midnightMode\",\n          \"in\" : \"query\",\n          \"description\" : \"Determines the method for calculating midnight <br><br> Possible values:\\n* `0` - Standard (Mid Sunset to Sunrise)\\n* `1` - Jafari (Mid Sunset to Fajr)\\n\",\n          \"schema\" : {\n            \"type\" : \"integer\",\n            \"default\" : 0,\n            \"enum\" : [ 0, 1 ]\n          }\n        }, {\n          \"name\" : \"timezonestring\",\n          \"in\" : \"query\",\n          \"description\" : \"A valid timezone name as specified on [https://php.net/manual/en/timezones.php](https://php.net/manual/en/timezones.php). <br> *If you do not specify this, we'll calcuate it using the co-ordinates you provide.*\\n\",\n          \"schema\" : {\n            \"type\" : \"string\",\n            \"example\" : \"Europe/London\"\n          }\n        }, {\n          \"name\" : \"latitudeAdjustmentMethod\",\n          \"in\" : \"query\",\n          \"description\" : \"Method for adjusting times at higher latitudes. For example, if you are checking timings in the UK or Sweden. <br><br> Possible values:\\n* `1` - Middle of the Night\\n* `2` - One Seventh\\n* `3` - Angle Based\\n\",\n          \"schema\" : {\n            \"type\" : \"integer\",\n            \"enum\" : [ 1, 2, 3 ]\n          }\n        }, {\n          \"name\" : \"adjustment\",\n          \"in\" : \"query\",\n          \"description\" : \"Number of days to adjust hijri date(s).\\n\",\n          \"schema\" : {\n            \"type\" : \"integer\",\n            \"example\" : -1\n          }\n        }, {\n          \"name\" : \"iso8601\",\n          \"in\" : \"query\",\n          \"description\" : \"Whether to return the prayer times in the iso8601 format. Example: true will return 2020-07-01T02:56:00+01:00 instead of 02:56\\n\",\n          \"schema\" : {\n            \"type\" : \"boolean\",\n            \"default\" : false\n          }\n        } ],\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"OK\",\n            \"content\" : {\n              \"application/json\" : {\n                \"schema\" : {\n                  \"$ref\" : \"#/components/schemas/timings_response\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"components\" : {\n    \"schemas\" : {\n      \"current-date-success\" : {\n        \"required\" : [ \"code\", \"data\", \"status\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"code\" : {\n            \"$ref\" : \"#/components/schemas/code\"\n          },\n          \"status\" : {\n            \"$ref\" : \"#/components/schemas/status\"\n          },\n          \"data\" : {\n            \"pattern\" : \"dd-mm-yyyy\",\n            \"type\" : \"string\",\n            \"description\" : \"Current date in the specified timezone.\",\n            \"format\" : \"date\",\n            \"example\" : \"0029-02-06\"\n          }\n        }\n      },\n      \"code\" : {\n        \"type\" : \"integer\",\n        \"description\" : \"The response status code.\",\n        \"example\" : 200\n      },\n      \"status\" : {\n        \"type\" : \"string\",\n        \"description\" : \"The response status description.\",\n        \"example\" : \"OK\"\n      },\n      \"current-time-success\" : {\n        \"required\" : [ \"code\", \"data\", \"status\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"code\" : {\n            \"$ref\" : \"#/components/schemas/code\"\n          },\n          \"status\" : {\n            \"$ref\" : \"#/components/schemas/status\"\n          },\n          \"data\" : {\n            \"pattern\" : \"hh:mm\",\n            \"type\" : \"string\",\n            \"description\" : \"Current time in the specified timezone.\",\n            \"format\" : \"time\",\n            \"example\" : \"05:32\"\n          }\n        }\n      },\n      \"current-timestamp-success\" : {\n        \"required\" : [ \"code\", \"data\", \"status\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"code\" : {\n            \"$ref\" : \"#/components/schemas/code\"\n          },\n          \"status\" : {\n            \"$ref\" : \"#/components/schemas/status\"\n          },\n          \"data\" : {\n            \"type\" : \"string\",\n            \"description\" : \"Current epoch/unix timestamp in the specified timezone.\",\n            \"example\" : \"1503495668\"\n          }\n        }\n      },\n      \"methods-success\" : {\n        \"required\" : [ \"code\", \"data\", \"status\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"code\" : {\n            \"type\" : \"number\",\n            \"description\" : \"The response status code.\",\n            \"example\" : 200\n          },\n          \"status\" : {\n            \"type\" : \"string\",\n            \"description\" : \"The response status description.\",\n            \"example\" : \"OK\"\n          },\n          \"data\" : {\n            \"$ref\" : \"#/components/schemas/methodssuccess_data\"\n          }\n        }\n      },\n      \"latitude\" : {\n        \"type\" : \"number\",\n        \"example\" : 51.75865125\n      },\n      \"longitude\" : {\n        \"type\" : \"number\",\n        \"example\" : -1.25387785\n      },\n      \"calendar_response\" : {\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"code\" : {\n            \"$ref\" : \"#/components/schemas/code_1\"\n          },\n          \"status\" : {\n            \"$ref\" : \"#/components/schemas/status_1\"\n          },\n          \"data\" : {\n            \"$ref\" : \"#/components/schemas/calendar_data\"\n          }\n        }\n      },\n      \"code_1\" : {\n        \"type\" : \"integer\",\n        \"example\" : 200\n      },\n      \"status_1\" : {\n        \"type\" : \"string\",\n        \"example\" : \"OK\"\n      },\n      \"calendar_data\" : {\n        \"type\" : \"array\",\n        \"items\" : {\n          \"$ref\" : \"#/components/schemas/result_item\"\n        }\n      },\n      \"result_item\" : {\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"timings\" : {\n            \"$ref\" : \"#/components/schemas/timings\"\n          },\n          \"date\" : {\n            \"$ref\" : \"#/components/schemas/date\"\n          },\n          \"meta\" : {\n            \"$ref\" : \"#/components/schemas/meta\"\n          }\n        }\n      },\n      \"timings\" : {\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"Fajr\" : {\n            \"type\" : \"string\",\n            \"example\" : \"02:52 (BST)\"\n          },\n          \"Sunrise\" : {\n            \"type\" : \"string\",\n            \"example\" : \"05:33 (BST)\"\n          },\n          \"Dhuhr\" : {\n            \"type\" : \"string\",\n            \"example\" : \"13:18 (BST)\"\n          },\n          \"Asr\" : {\n            \"type\" : \"string\",\n            \"example\" : \"17:31 (BST)\"\n          },\n          \"Sunset\" : {\n            \"type\" : \"string\",\n            \"example\" : \"20:11\"\n          },\n          \"Maghrib\" : {\n            \"type\" : \"string\",\n            \"example\" : \"20:10\"\n          },\n          \"Isha\" : {\n            \"type\" : \"string\",\n            \"example\" : \"22:11\"\n          },\n          \"Imsak\" : {\n            \"type\" : \"string\",\n            \"example\" : \"03:33\"\n          },\n          \"Midnight\" : {\n            \"type\" : \"string\",\n            \"example\" : \"00:58\"\n          }\n        }\n      },\n      \"date\" : {\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"readable\" : {\n            \"type\" : \"string\",\n            \"example\" : \"20 Apr 2022\"\n          },\n          \"timestamp\" : {\n            \"type\" : \"string\",\n            \"example\" : \"1650495506\"\n          },\n          \"gregorian\" : {\n            \"$ref\" : \"#/components/schemas/date_gregorian\"\n          },\n          \"hijri\" : {\n            \"$ref\" : \"#/components/schemas/date_hijri\"\n          }\n        }\n      },\n      \"returned_date_en\" : {\n        \"type\" : \"string\",\n        \"example\" : \"20-04-2022\"\n      },\n      \"format\" : {\n        \"type\" : \"string\",\n        \"example\" : \"DD-MM-YYYY\"\n      },\n      \"day_en\" : {\n        \"type\" : \"string\",\n        \"example\" : \"20\"\n      },\n      \"weekday_en\" : {\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"en\" : {\n            \"type\" : \"string\",\n            \"description\" : \"English name of weekday\\n\",\n            \"example\" : \"Wednesday\"\n          }\n        }\n      },\n      \"month_en\" : {\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"number\" : {\n            \"type\" : \"integer\",\n            \"example\" : 4\n          },\n          \"en\" : {\n            \"type\" : \"string\",\n            \"description\" : \"English name of the month\\n\",\n            \"example\" : \"April\"\n          }\n        }\n      },\n      \"year_en\" : {\n        \"type\" : \"string\",\n        \"example\" : \"2022\"\n      },\n      \"designation_en\" : {\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"abbreviated\" : {\n            \"type\" : \"string\",\n            \"example\" : \"AD\"\n          },\n          \"expanded\" : {\n            \"type\" : \"string\",\n            \"example\" : \"Anno Domini\"\n          }\n        }\n      },\n      \"returned_date_ar\" : {\n        \"type\" : \"string\",\n        \"example\" : \"17-09-1443\"\n      },\n      \"day_ar\" : {\n        \"type\" : \"string\",\n        \"example\" : \"17\"\n      },\n      \"weekday_en_ar\" : {\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"en\" : {\n            \"type\" : \"string\",\n            \"description\" : \"English name of weekday\\n\",\n            \"example\" : \"Al Arba'a\"\n          },\n          \"ar\" : {\n            \"type\" : \"string\",\n            \"description\" : \"Arabic name of weekday\\n\",\n            \"example\" : \"الاربعاء\"\n          }\n        }\n      },\n      \"month_en_ar\" : {\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"number\" : {\n            \"type\" : \"integer\",\n            \"example\" : 9\n          },\n          \"en\" : {\n            \"type\" : \"string\",\n            \"description\" : \"English name of the month\\n\",\n            \"example\" : \"Ramaḍān\"\n          },\n          \"ar\" : {\n            \"type\" : \"string\",\n            \"description\" : \"Arabic name of the month\\n\",\n            \"example\" : \"رَمَضان\"\n          }\n        }\n      },\n      \"year_ar\" : {\n        \"type\" : \"string\",\n        \"example\" : \"1443\"\n      },\n      \"designation_ar\" : {\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"abbreviated\" : {\n            \"type\" : \"string\",\n            \"example\" : \"AH\"\n          },\n          \"expanded\" : {\n            \"type\" : \"string\",\n            \"example\" : \"Anno Hegirae\"\n          }\n        }\n      },\n      \"meta\" : {\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"latitude\" : {\n            \"$ref\" : \"#/components/schemas/latitude\"\n          },\n          \"longitude\" : {\n            \"$ref\" : \"#/components/schemas/longitude\"\n          },\n          \"timezone\" : {\n            \"$ref\" : \"#/components/schemas/timezone\"\n          },\n          \"method\" : {\n            \"$ref\" : \"#/components/schemas/method\"\n          },\n          \"latitudeAdjustmentMethod\" : {\n            \"$ref\" : \"#/components/schemas/latitudeAdjustmentMethod\"\n          },\n          \"midnightMode\" : {\n            \"$ref\" : \"#/components/schemas/midnightMode\"\n          },\n          \"school\" : {\n            \"$ref\" : \"#/components/schemas/school\"\n          },\n          \"offset\" : {\n            \"$ref\" : \"#/components/schemas/offset\"\n          }\n        }\n      },\n      \"timezone\" : {\n        \"type\" : \"string\",\n        \"description\" : \"Timezone for all returned times\\n\",\n        \"example\" : \"Europe/London\"\n      },\n      \"method\" : {\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"id\" : {\n            \"type\" : \"integer\",\n            \"example\" : 4\n          },\n          \"name\" : {\n            \"type\" : \"string\",\n            \"example\" : \"Umm Al-Qura University, Makkah\"\n          },\n          \"params\" : {\n            \"$ref\" : \"#/components/schemas/method_params\"\n          }\n        }\n      },\n      \"latitudeAdjustmentMethod\" : {\n        \"type\" : \"string\",\n        \"example\" : \"ANGLE_BASED\"\n      },\n      \"midnightMode\" : {\n        \"type\" : \"string\",\n        \"example\" : \"STANDARD\"\n      },\n      \"school\" : {\n        \"type\" : \"string\",\n        \"example\" : \"STANDARD\"\n      },\n      \"offset\" : {\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"Imsak\" : {\n            \"type\" : \"string\",\n            \"example\" : \"5\"\n          },\n          \"Fajr\" : {\n            \"type\" : \"string\",\n            \"example\" : \"3\"\n          },\n          \"Sunrise\" : {\n            \"type\" : \"string\",\n            \"example\" : \"5\"\n          },\n          \"Dhuhr\" : {\n            \"type\" : \"string\",\n            \"example\" : \"7\"\n          },\n          \"Asr\" : {\n            \"type\" : \"string\",\n            \"example\" : \"9\"\n          },\n          \"Maghrib\" : {\n            \"type\" : \"string\",\n            \"example\" : \"-1\"\n          },\n          \"Sunset\" : {\n            \"type\" : \"string\",\n            \"example\" : \"0\"\n          },\n          \"Isha\" : {\n            \"type\" : \"string\",\n            \"example\" : \"30 min\"\n          },\n          \"Midnight\" : {\n            \"type\" : \"string\",\n            \"example\" : \"-6\"\n          }\n        }\n      },\n      \"timings_response\" : {\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"code\" : {\n            \"$ref\" : \"#/components/schemas/code_1\"\n          },\n          \"status\" : {\n            \"$ref\" : \"#/components/schemas/status_1\"\n          },\n          \"data\" : {\n            \"$ref\" : \"#/components/schemas/timing_data\"\n          }\n        }\n      },\n      \"timing_data\" : {\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"timings\" : {\n            \"$ref\" : \"#/components/schemas/timings\"\n          },\n          \"date\" : {\n            \"$ref\" : \"#/components/schemas/date\"\n          },\n          \"meta\" : {\n            \"$ref\" : \"#/components/schemas/meta\"\n          }\n        }\n      },\n      \"methodssuccess_data_MWL_params\" : {\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"Fajr\" : {\n            \"type\" : \"number\",\n            \"example\" : 18\n          },\n          \"Isha\" : {\n            \"type\" : \"number\",\n            \"example\" : 17\n          }\n        }\n      },\n      \"methodssuccess_data_MWL_location\" : {\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"latitude\" : {\n            \"$ref\" : \"#/components/schemas/latitude\"\n          },\n          \"longitude\" : {\n            \"$ref\" : \"#/components/schemas/longitude\"\n          }\n        }\n      },\n      \"methodssuccess_data_MWL\" : {\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"id\" : {\n            \"type\" : \"integer\",\n            \"example\" : 3\n          },\n          \"name\" : {\n            \"type\" : \"string\",\n            \"example\" : \"Muslim World League\"\n          },\n          \"params\" : {\n            \"$ref\" : \"#/components/schemas/methodssuccess_data_MWL_params\"\n          },\n          \"location\" : {\n            \"$ref\" : \"#/components/schemas/methodssuccess_data_MWL_location\"\n          }\n        }\n      },\n      \"methodssuccess_data_ISNA_params\" : {\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"Fajr\" : {\n            \"type\" : \"number\",\n            \"example\" : 15\n          },\n          \"Isha\" : {\n            \"type\" : \"number\",\n            \"example\" : 15\n          }\n        }\n      },\n      \"methodssuccess_data_ISNA\" : {\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"id\" : {\n            \"type\" : \"integer\",\n            \"example\" : 2\n          },\n          \"name\" : {\n            \"type\" : \"string\",\n            \"example\" : \"Islamic Society of North America (ISNA)\"\n          },\n          \"params\" : {\n            \"$ref\" : \"#/components/schemas/methodssuccess_data_ISNA_params\"\n          },\n          \"location\" : {\n            \"$ref\" : \"#/components/schemas/methodssuccess_data_MWL_location\"\n          }\n        }\n      },\n      \"methodssuccess_data_EGYPT_params\" : {\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"Fajr\" : {\n            \"type\" : \"number\",\n            \"example\" : 19.5\n          },\n          \"Isha\" : {\n            \"type\" : \"number\",\n            \"example\" : 17.5\n          }\n        }\n      },\n      \"methodssuccess_data_EGYPT\" : {\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"id\" : {\n            \"type\" : \"integer\",\n            \"example\" : 5\n          },\n          \"name\" : {\n            \"type\" : \"string\",\n            \"example\" : \"Egyptian General Authority of Survey\"\n          },\n          \"params\" : {\n            \"$ref\" : \"#/components/schemas/methodssuccess_data_EGYPT_params\"\n          },\n          \"location\" : {\n            \"$ref\" : \"#/components/schemas/methodssuccess_data_MWL_location\"\n          }\n        }\n      },\n      \"methodssuccess_data_MAKKAH_params\" : {\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"Fajr\" : {\n            \"type\" : \"number\",\n            \"example\" : 18.5\n          },\n          \"Isha\" : {\n            \"type\" : \"string\",\n            \"example\" : \"90 min\"\n          }\n        }\n      },\n      \"methodssuccess_data_MAKKAH\" : {\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"id\" : {\n            \"type\" : \"integer\",\n            \"example\" : 4\n          },\n          \"name\" : {\n            \"type\" : \"string\",\n            \"example\" : \"Umm Al-Qura University, Makkah\"\n          },\n          \"params\" : {\n            \"$ref\" : \"#/components/schemas/methodssuccess_data_MAKKAH_params\"\n          },\n          \"location\" : {\n            \"$ref\" : \"#/components/schemas/methodssuccess_data_MWL_location\"\n          }\n        }\n      },\n      \"methodssuccess_data_KARACHI_params\" : {\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"Fajr\" : {\n            \"type\" : \"number\",\n            \"example\" : 18\n          },\n          \"Isha\" : {\n            \"type\" : \"number\",\n            \"example\" : 18\n          }\n        }\n      },\n      \"methodssuccess_data_KARACHI\" : {\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"id\" : {\n            \"type\" : \"integer\",\n            \"example\" : 1\n          },\n          \"name\" : {\n            \"type\" : \"string\",\n            \"example\" : \"University of Islamic Sciences, Karachi\"\n          },\n          \"params\" : {\n            \"$ref\" : \"#/components/schemas/methodssuccess_data_KARACHI_params\"\n          },\n          \"location\" : {\n            \"$ref\" : \"#/components/schemas/methodssuccess_data_MWL_location\"\n          }\n        }\n      },\n      \"methodssuccess_data_TEHRAN_params\" : {\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"Fajr\" : {\n            \"type\" : \"number\",\n            \"example\" : 17.7\n          },\n          \"Maghrib\" : {\n            \"type\" : \"number\",\n            \"example\" : 4.5\n          },\n          \"Isha\" : {\n            \"type\" : \"number\",\n            \"example\" : 14\n          },\n          \"Midnight\" : {\n            \"type\" : \"string\",\n            \"example\" : \"JAFARI\"\n          }\n        }\n      },\n      \"methodssuccess_data_TEHRAN\" : {\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"id\" : {\n            \"type\" : \"integer\",\n            \"example\" : 7\n          },\n          \"name\" : {\n            \"type\" : \"string\",\n            \"example\" : \"Institute of Geophysics, University of Tehran\"\n          },\n          \"params\" : {\n            \"$ref\" : \"#/components/schemas/methodssuccess_data_TEHRAN_params\"\n          },\n          \"location\" : {\n            \"$ref\" : \"#/components/schemas/methodssuccess_data_MWL_location\"\n          }\n        }\n      },\n      \"methodssuccess_data_JAFARI_params\" : {\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"Fajr\" : {\n            \"type\" : \"number\",\n            \"example\" : 16\n          },\n          \"Maghrib\" : {\n            \"type\" : \"number\",\n            \"example\" : 4\n          },\n          \"Isha\" : {\n            \"type\" : \"number\",\n            \"example\" : 14\n          },\n          \"Midnight\" : {\n            \"type\" : \"string\",\n            \"example\" : \"JAFARI\"\n          }\n        }\n      },\n      \"methodssuccess_data_JAFARI\" : {\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"id\" : {\n            \"type\" : \"integer\",\n            \"example\" : 0\n          },\n          \"name\" : {\n            \"type\" : \"string\",\n            \"example\" : \"Shia Ithna-Ashari, Leva Institute, Qum\"\n          },\n          \"params\" : {\n            \"$ref\" : \"#/components/schemas/methodssuccess_data_JAFARI_params\"\n          },\n          \"location\" : {\n            \"$ref\" : \"#/components/schemas/methodssuccess_data_MWL_location\"\n          }\n        }\n      },\n      \"methodssuccess_data_GULF_params\" : {\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"Fajr\" : {\n            \"type\" : \"number\",\n            \"example\" : 19.5\n          },\n          \"Isha\" : {\n            \"type\" : \"string\",\n            \"example\" : \"90 min\"\n          }\n        }\n      },\n      \"methodssuccess_data_GULF\" : {\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"id\" : {\n            \"type\" : \"integer\",\n            \"example\" : 8\n          },\n          \"name\" : {\n            \"type\" : \"string\",\n            \"example\" : \"Gulf Region\"\n          },\n          \"params\" : {\n            \"$ref\" : \"#/components/schemas/methodssuccess_data_GULF_params\"\n          },\n          \"location\" : {\n            \"$ref\" : \"#/components/schemas/methodssuccess_data_MWL_location\"\n          }\n        }\n      },\n      \"methodssuccess_data_KUWAIT_params\" : {\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"Fajr\" : {\n            \"type\" : \"number\",\n            \"example\" : 18\n          },\n          \"Isha\" : {\n            \"type\" : \"number\",\n            \"example\" : 17.5\n          }\n        }\n      },\n      \"methodssuccess_data_KUWAIT\" : {\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"id\" : {\n            \"type\" : \"integer\",\n            \"example\" : 9\n          },\n          \"name\" : {\n            \"type\" : \"string\",\n            \"example\" : \"Kuwait\"\n          },\n          \"params\" : {\n            \"$ref\" : \"#/components/schemas/methodssuccess_data_KUWAIT_params\"\n          },\n          \"location\" : {\n            \"$ref\" : \"#/components/schemas/methodssuccess_data_MWL_location\"\n          }\n        }\n      },\n      \"methodssuccess_data_QATAR_params\" : {\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"Fajr\" : {\n            \"type\" : \"number\",\n            \"example\" : 10\n          },\n          \"Isha\" : {\n            \"type\" : \"string\",\n            \"example\" : \"90 min\"\n          }\n        }\n      },\n      \"methodssuccess_data_QATAR\" : {\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"id\" : {\n            \"type\" : \"integer\",\n            \"example\" : 10\n          },\n          \"name\" : {\n            \"type\" : \"string\",\n            \"example\" : \"Qatar\"\n          },\n          \"params\" : {\n            \"$ref\" : \"#/components/schemas/methodssuccess_data_QATAR_params\"\n          },\n          \"location\" : {\n            \"$ref\" : \"#/components/schemas/methodssuccess_data_MWL_location\"\n          }\n        }\n      },\n      \"methodssuccess_data_SINGAPORE_params\" : {\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"Fajr\" : {\n            \"type\" : \"number\",\n            \"example\" : 20\n          },\n          \"Isha\" : {\n            \"type\" : \"number\",\n            \"example\" : 18\n          }\n        }\n      },\n      \"methodssuccess_data_SINGAPORE\" : {\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"id\" : {\n            \"type\" : \"integer\",\n            \"example\" : 11\n          },\n          \"name\" : {\n            \"type\" : \"string\",\n            \"example\" : \"Majlis Ugama Islam Singapura, Singapore\"\n          },\n          \"params\" : {\n            \"$ref\" : \"#/components/schemas/methodssuccess_data_SINGAPORE_params\"\n          },\n          \"location\" : {\n            \"$ref\" : \"#/components/schemas/methodssuccess_data_MWL_location\"\n          }\n        }\n      },\n      \"methodssuccess_data_FRANCE_params\" : {\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"Fajr\" : {\n            \"type\" : \"number\",\n            \"example\" : 12\n          },\n          \"Isha\" : {\n            \"type\" : \"number\",\n            \"example\" : 12\n          }\n        }\n      },\n      \"methodssuccess_data_FRANCE\" : {\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"id\" : {\n            \"type\" : \"integer\",\n            \"example\" : 12\n          },\n          \"name\" : {\n            \"type\" : \"string\",\n            \"example\" : \"Union Organization Islamic de France\"\n          },\n          \"params\" : {\n            \"$ref\" : \"#/components/schemas/methodssuccess_data_FRANCE_params\"\n          },\n          \"location\" : {\n            \"$ref\" : \"#/components/schemas/methodssuccess_data_MWL_location\"\n          }\n        }\n      },\n      \"methodssuccess_data_TURKEY\" : {\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"id\" : {\n            \"type\" : \"integer\",\n            \"example\" : 13\n          },\n          \"name\" : {\n            \"type\" : \"string\",\n            \"example\" : \"Diyanet İşleri Başkanlığı, Turkey\"\n          },\n          \"params\" : {\n            \"$ref\" : \"#/components/schemas/methodssuccess_data_MWL_params\"\n          },\n          \"location\" : {\n            \"$ref\" : \"#/components/schemas/methodssuccess_data_MWL_location\"\n          }\n        }\n      },\n      \"methodssuccess_data_RUSSIA_params\" : {\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"Fajr\" : {\n            \"type\" : \"number\",\n            \"example\" : 16\n          },\n          \"Isha\" : {\n            \"type\" : \"number\",\n            \"example\" : 15\n          }\n        }\n      },\n      \"methodssuccess_data_RUSSIA\" : {\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"id\" : {\n            \"type\" : \"integer\",\n            \"example\" : 14\n          },\n          \"name\" : {\n            \"type\" : \"string\",\n            \"example\" : \"Spiritual Administration of Muslims of Russia\"\n          },\n          \"params\" : {\n            \"$ref\" : \"#/components/schemas/methodssuccess_data_RUSSIA_params\"\n          },\n          \"location\" : {\n            \"$ref\" : \"#/components/schemas/methodssuccess_data_MWL_location\"\n          }\n        }\n      },\n      \"methodssuccess_data_MOONSIGHTING_params\" : {\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"shafaq\" : {\n            \"type\" : \"string\",\n            \"example\" : \"general\"\n          }\n        }\n      },\n      \"methodssuccess_data_MOONSIGHTING\" : {\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"id\" : {\n            \"type\" : \"integer\",\n            \"example\" : 15\n          },\n          \"name\" : {\n            \"type\" : \"string\",\n            \"example\" : \"Moonsighting Committee Worldwide (Moonsighting.com)\"\n          },\n          \"params\" : {\n            \"$ref\" : \"#/components/schemas/methodssuccess_data_MOONSIGHTING_params\"\n          },\n          \"location\" : {\n            \"$ref\" : \"#/components/schemas/methodssuccess_data_MWL_location\"\n          }\n        }\n      },\n      \"methodssuccess_data\" : {\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"MWL\" : {\n            \"$ref\" : \"#/components/schemas/methodssuccess_data_MWL\"\n          },\n          \"ISNA\" : {\n            \"$ref\" : \"#/components/schemas/methodssuccess_data_ISNA\"\n          },\n          \"EGYPT\" : {\n            \"$ref\" : \"#/components/schemas/methodssuccess_data_EGYPT\"\n          },\n          \"MAKKAH\" : {\n            \"$ref\" : \"#/components/schemas/methodssuccess_data_MAKKAH\"\n          },\n          \"KARACHI\" : {\n            \"$ref\" : \"#/components/schemas/methodssuccess_data_KARACHI\"\n          },\n          \"TEHRAN\" : {\n            \"$ref\" : \"#/components/schemas/methodssuccess_data_TEHRAN\"\n          },\n          \"JAFARI\" : {\n            \"$ref\" : \"#/components/schemas/methodssuccess_data_JAFARI\"\n          },\n          \"GULF\" : {\n            \"$ref\" : \"#/components/schemas/methodssuccess_data_GULF\"\n          },\n          \"KUWAIT\" : {\n            \"$ref\" : \"#/components/schemas/methodssuccess_data_KUWAIT\"\n          },\n          \"QATAR\" : {\n            \"$ref\" : \"#/components/schemas/methodssuccess_data_QATAR\"\n          },\n          \"SINGAPORE\" : {\n            \"$ref\" : \"#/components/schemas/methodssuccess_data_SINGAPORE\"\n          },\n          \"FRANCE\" : {\n            \"$ref\" : \"#/components/schemas/methodssuccess_data_FRANCE\"\n          },\n          \"TURKEY\" : {\n            \"$ref\" : \"#/components/schemas/methodssuccess_data_TURKEY\"\n          },\n          \"RUSSIA\" : {\n            \"$ref\" : \"#/components/schemas/methodssuccess_data_RUSSIA\"\n          },\n          \"MOONSIGHTING\" : {\n            \"$ref\" : \"#/components/schemas/methodssuccess_data_MOONSIGHTING\"\n          }\n        },\n        \"description\" : \"Contains a collection of key-object mapping containing details of different prayer time calculation methods.\"\n      },\n      \"date_gregorian\" : {\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"date\" : {\n            \"$ref\" : \"#/components/schemas/returned_date_en\"\n          },\n          \"format\" : {\n            \"$ref\" : \"#/components/schemas/format\"\n          },\n          \"day\" : {\n            \"$ref\" : \"#/components/schemas/day_en\"\n          },\n          \"weekday\" : {\n            \"$ref\" : \"#/components/schemas/weekday_en\"\n          },\n          \"month\" : {\n            \"$ref\" : \"#/components/schemas/month_en\"\n          },\n          \"year\" : {\n            \"$ref\" : \"#/components/schemas/year_en\"\n          },\n          \"designation\" : {\n            \"$ref\" : \"#/components/schemas/designation_en\"\n          }\n        }\n      },\n      \"date_hijri\" : {\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"date\" : {\n            \"$ref\" : \"#/components/schemas/returned_date_ar\"\n          },\n          \"format\" : {\n            \"$ref\" : \"#/components/schemas/format\"\n          },\n          \"day\" : {\n            \"$ref\" : \"#/components/schemas/day_ar\"\n          },\n          \"weekday\" : {\n            \"$ref\" : \"#/components/schemas/weekday_en_ar\"\n          },\n          \"month\" : {\n            \"$ref\" : \"#/components/schemas/month_en_ar\"\n          },\n          \"year\" : {\n            \"$ref\" : \"#/components/schemas/year_ar\"\n          },\n          \"designation\" : {\n            \"$ref\" : \"#/components/schemas/designation_ar\"\n          },\n          \"holidays\" : {\n            \"type\" : \"array\",\n            \"items\" : {\n              \"type\" : \"string\",\n              \"example\" : \"1st Day of Ramadan\"\n            }\n          }\n        }\n      },\n      \"method_params\" : {\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"Fajr\" : {\n            \"type\" : \"string\",\n            \"example\" : \"18.5\"\n          },\n          \"Isha\" : {\n            \"type\" : \"string\",\n            \"example\" : \"90 min\"\n          }\n        }\n      }\n    },\n    \"parameters\" : {\n      \"zone\" : {\n        \"name\" : \"zone\",\n        \"in\" : \"query\",\n        \"description\" : \"A valid timezone as specified [here](http://php.net/manual/en/timezones.php).\",\n        \"required\" : true,\n        \"schema\" : {\n          \"type\" : \"string\",\n          \"example\" : \"Europe/London\"\n        }\n      },\n      \"latitude\" : {\n        \"name\" : \"latitude\",\n        \"in\" : \"query\",\n        \"description\" : \"The decimal value for the latitude co-ordinate of the location you want the time computed for.\\n\",\n        \"schema\" : {\n          \"type\" : \"number\",\n          \"example\" : 51.75865125\n        }\n      },\n      \"longitude\" : {\n        \"name\" : \"longitude\",\n        \"in\" : \"query\",\n        \"description\" : \"The decimal value for the longitude co-ordinate of the location you want the time computed for.\\n\",\n        \"schema\" : {\n          \"type\" : \"number\",\n          \"example\" : -1.25387785\n        }\n      },\n      \"gregorian_month\" : {\n        \"name\" : \"month\",\n        \"in\" : \"query\",\n        \"description\" : \"A gregorian calendar month\\n\",\n        \"schema\" : {\n          \"type\" : \"number\",\n          \"example\" : 8\n        }\n      },\n      \"gregorian_year\" : {\n        \"name\" : \"year\",\n        \"in\" : \"query\",\n        \"description\" : \"A gregorian calendar year\\n\",\n        \"schema\" : {\n          \"type\" : \"number\",\n          \"example\" : 2022\n        }\n      },\n      \"annual\" : {\n        \"name\" : \"annual\",\n        \"in\" : \"query\",\n        \"description\" : \"If true, month parameter will be ignored and the calendar for the entire year will be returned\\n\",\n        \"schema\" : {\n          \"type\" : \"boolean\",\n          \"example\" : false,\n          \"default\" : false\n        }\n      },\n      \"method\" : {\n        \"name\" : \"method\",\n        \"in\" : \"query\",\n        \"description\" : \"A prayer times calculation method. Methods identify various schools of thought about how to compute the timings. If not specified, it defaults to the closest authority based on the location or co-ordinates specified in the API call. This parameter accepts values from 0-12 and 99, as specified below: <br><br> Possible values:\\n* `0` - Shia Ithna-Ansari\\n* `1` - University of Islamic Sciences, Karachi\\n* `2` - Islamic Society of North America\\n* `3` - Muslim World League\\n* `4` - Umm Al-Qura University, Makkah\\n* `5` - Egyptian General Authority of Survey\\n* `6` - Institute of Geophysics, University of Tehran\\n* `7` - Gulf Region\\n* `8` - Kuwait\\n* `9` - Qatar\\n* `10` - Majlis Ugama Islam Singapura, Singapore\\n* `11` - Union Organization islamic de France\\n* `12` - Diyanet İşleri Başkanlığı, Turkey\\n* `13` - Spiritual Administration of Muslims of Russia\\n* `14` - Moonsighting Committee Worldwide (also requires shafaq paramteer)\\n* `99` - Custom. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods)\\n\",\n        \"schema\" : {\n          \"type\" : \"number\",\n          \"example\" : 4,\n          \"default\" : 0,\n          \"enum\" : [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 99 ]\n        }\n      },\n      \"shafaq\" : {\n        \"name\" : \"shafaq\",\n        \"in\" : \"query\",\n        \"description\" : \"Which Shafaq to use if the method is Moonsighting Commitee Worldwide. Acceptable options are 'general', 'ahmer' and 'abyad'\\n\",\n        \"schema\" : {\n          \"type\" : \"string\",\n          \"example\" : \"general\",\n          \"default\" : \"general\",\n          \"enum\" : [ \"general\", \"ahmer\", \"abyad\" ]\n        }\n      },\n      \"tune\" : {\n        \"name\" : \"tune\",\n        \"in\" : \"query\",\n        \"description\" : \"Comma Separated String of integers to offset timings returned by the API in minutes. The order is `Imsak,Fajr,Sunrise,Dhuhr,Asr,Maghrib,Sunset,Isha,Midnight`. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods) for more details.\\n\",\n        \"schema\" : {\n          \"type\" : \"string\",\n          \"example\" : \"5,3,5,7,9,-1,0,8,-6\"\n        }\n      },\n      \"school\" : {\n        \"name\" : \"school\",\n        \"in\" : \"query\",\n        \"description\" : \"Shafi (or the standard way) or Hanafi. <br /><br /> Possible values:\\n* `0` - Shafi\\n* `1` - Hanafi\\n\",\n        \"schema\" : {\n          \"type\" : \"integer\",\n          \"default\" : 0,\n          \"enum\" : [ 0, 1 ]\n        }\n      },\n      \"midnightMode\" : {\n        \"name\" : \"midnightMode\",\n        \"in\" : \"query\",\n        \"description\" : \"Determines the method for calculating midnight <br><br> Possible values:\\n* `0` - Standard (Mid Sunset to Sunrise)\\n* `1` - Jafari (Mid Sunset to Fajr)\\n\",\n        \"schema\" : {\n          \"type\" : \"integer\",\n          \"default\" : 0,\n          \"enum\" : [ 0, 1 ]\n        }\n      },\n      \"timezonestring\" : {\n        \"name\" : \"timezonestring\",\n        \"in\" : \"query\",\n        \"description\" : \"A valid timezone name as specified on [https://php.net/manual/en/timezones.php](https://php.net/manual/en/timezones.php). <br> *If you do not specify this, we'll calcuate it using the co-ordinates you provide.*\\n\",\n        \"schema\" : {\n          \"type\" : \"string\",\n          \"example\" : \"Europe/London\"\n        }\n      },\n      \"latitudeAdjustmentMethod\" : {\n        \"name\" : \"latitudeAdjustmentMethod\",\n        \"in\" : \"query\",\n        \"description\" : \"Method for adjusting times at higher latitudes. For example, if you are checking timings in the UK or Sweden. <br><br> Possible values:\\n* `1` - Middle of the Night\\n* `2` - One Seventh\\n* `3` - Angle Based\\n\",\n        \"schema\" : {\n          \"type\" : \"integer\",\n          \"enum\" : [ 1, 2, 3 ]\n        }\n      },\n      \"adjustment\" : {\n        \"name\" : \"adjustment\",\n        \"in\" : \"query\",\n        \"description\" : \"Number of days to adjust hijri date(s).\\n\",\n        \"schema\" : {\n          \"type\" : \"integer\",\n          \"example\" : -1\n        }\n      },\n      \"iso8601\" : {\n        \"name\" : \"iso8601\",\n        \"in\" : \"query\",\n        \"description\" : \"Whether to return the prayer times in the iso8601 format. Example: true will return 2020-07-01T02:56:00+01:00 instead of 02:56\\n\",\n        \"schema\" : {\n          \"type\" : \"boolean\",\n          \"default\" : false\n        }\n      },\n      \"address\" : {\n        \"name\" : \"address\",\n        \"in\" : \"query\",\n        \"description\" : \"An address string\\n\",\n        \"schema\" : {\n          \"type\" : \"string\",\n          \"example\" : \"1420 Austin Bluffs Parkway, Colorado Springs, CO\"\n        }\n      },\n      \"city\" : {\n        \"name\" : \"city\",\n        \"in\" : \"query\",\n        \"description\" : \"A city name\\n\",\n        \"schema\" : {\n          \"type\" : \"string\",\n          \"example\" : \"London\"\n        }\n      },\n      \"country\" : {\n        \"name\" : \"country\",\n        \"in\" : \"query\",\n        \"description\" : \"A country name or 2 character alpha ISO 3166 code\\n\",\n        \"schema\" : {\n          \"type\" : \"string\",\n          \"example\" : \"GB\"\n        }\n      },\n      \"hijri_month\" : {\n        \"name\" : \"month\",\n        \"in\" : \"query\",\n        \"description\" : \"A hijri calendar month\\n\",\n        \"schema\" : {\n          \"type\" : \"number\",\n          \"example\" : 8\n        }\n      },\n      \"hijri_year\" : {\n        \"name\" : \"year\",\n        \"in\" : \"query\",\n        \"description\" : \"A gregorian calendar year\\n\",\n        \"schema\" : {\n          \"type\" : \"number\",\n          \"example\" : 2022\n        }\n      },\n      \"date_or_timestamp\" : {\n        \"name\" : \"date_or_timestamp\",\n        \"in\" : \"path\",\n        \"description\" : \"A date in the DD-MM-YYYY format or UNIX timestamp. Defaults to the current date if omitted.\\n\",\n        \"required\" : true,\n        \"schema\" : {\n          \"type\" : \"string\"\n        }\n      }\n    }\n  }\n}",
      "url": "C:\\Temp\\2023-03-24\\alathanAPI_openapi.json",
      "output": "OpenAPI.nswag.json",
      "newLineBehavior": "Auto"
    }
  },
  "codeGenerators": {
    "openApiToCSharpClient": {
      "clientBaseClass": null,
      "configurationClass": null,
      "generateClientClasses": true,
      "generateClientInterfaces": false,
      "clientBaseInterface": null,
      "injectHttpClient": true,
      "disposeHttpClient": true,
      "protectedMethods": [],
      "generateExceptionClasses": true,
      "exceptionClass": "ApiException",
      "wrapDtoExceptions": true,
      "useHttpClientCreationMethod": false,
      "httpClientType": "System.Net.Http.HttpClient",
      "useHttpRequestMessageCreationMethod": false,
      "useBaseUrl": true,
      "generateBaseUrlProperty": true,
      "generateSyncMethods": false,
      "generatePrepareRequestAndProcessResponseAsAsyncMethods": false,
      "exposeJsonSerializerSettings": false,
      "clientClassAccessModifier": "public",
      "typeAccessModifier": "public",
      "generateContractsOutput": false,
      "contractsNamespace": null,
      "contractsOutputFilePath": null,
      "parameterDateTimeFormat": "s",
      "parameterDateFormat": "yyyy-MM-dd",
      "generateUpdateJsonSerializerSettingsMethod": true,
      "useRequestAndResponseSerializationSettings": false,
      "serializeTypeInformation": false,
      "queryNullValue": "",
      "className": "{controller}Client",
      "operationGenerationMode": "SingleClientFromPathSegments",
      "additionalNamespaceUsages": [],
      "additionalContractNamespaceUsages": [],
      "generateOptionalParameters": false,
      "generateJsonMethods": false,
      "enforceFlagEnums": false,
      "parameterArrayType": "System.Collections.Generic.IEnumerable",
      "parameterDictionaryType": "System.Collections.Generic.IDictionary",
      "responseArrayType": "System.Collections.Generic.ICollection",
      "responseDictionaryType": "System.Collections.Generic.IDictionary",
      "wrapResponses": true,
      "wrapResponseMethods": [],
      "generateResponseClasses": true,
      "responseClass": "ApiResponse",
      "namespace": "PrayerTimesAPILibrary.PrayerAPI",
      "requiredPropertiesMustBeDefined": true,
      "dateType": "System.DateTimeOffset",
      "jsonConverters": null,
      "anyType": "object",
      "dateTimeType": "System.DateTimeOffset",
      "timeType": "System.TimeSpan",
      "timeSpanType": "System.TimeSpan",
      "arrayType": "System.Collections.Generic.ICollection",
      "arrayInstanceType": "System.Collections.ObjectModel.Collection",
      "dictionaryType": "System.Collections.Generic.IDictionary",
      "dictionaryInstanceType": "System.Collections.Generic.Dictionary",
      "arrayBaseType": "System.Collections.ObjectModel.Collection",
      "dictionaryBaseType": "System.Collections.Generic.Dictionary",
      "classStyle": "Poco",
      "jsonLibrary": "NewtonsoftJson",
      "generateDefaultValues": true,
      "generateDataAnnotations": true,
      "excludedTypeNames": [],
      "excludedParameterNames": [],
      "handleReferences": false,
      "generateImmutableArrayProperties": false,
      "generateImmutableDictionaryProperties": false,
      "jsonSerializerSettingsTransformationMethod": null,
      "inlineNamedArrays": false,
      "inlineNamedDictionaries": false,
      "inlineNamedTuples": true,
      "inlineNamedAny": false,
      "generateDtoTypes": true,
      "generateOptionalPropertiesAsNullable": true,
      "generateNullableReferenceTypes": true,
      "templateDirectory": null,
      "typeNameGeneratorType": null,
      "propertyNameGeneratorType": null,
      "enumNameGeneratorType": null,
      "serviceHost": null,
      "serviceSchemes": null,
      "output": "OpenAPI.cs",
      "newLineBehavior": "Auto"
    }
  }
}